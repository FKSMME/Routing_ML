[{"filePath":"C:\\Users\\syyun\\Documents\\GitHub\\Routing_ML_251014\\frontend-prediction\\src\\App.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\syyun\\Documents\\GitHub\\Routing_ML_251014\\frontend-prediction\\src\\components\\AnimatedCandidateCard.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\syyun\\Documents\\GitHub\\Routing_ML_251014\\frontend-prediction\\src\\components\\AnimatedCard.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\syyun\\Documents\\GitHub\\Routing_ML_251014\\frontend-prediction\\src\\components\\AnimatedLogo3D.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\syyun\\Documents\\GitHub\\Routing_ML_251014\\frontend-prediction\\src\\components\\BackgroundControls.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\syyun\\Documents\\GitHub\\Routing_ML_251014\\frontend-prediction\\src\\components\\CandidatePanel.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'useEffect' is defined but never used.","line":9,"column":10,"nodeType":"Identifier","messageId":"unusedVar","endLine":9,"endColumn":19},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'dirty' is assigned a value but never used.","line":44,"column":9,"nodeType":"Identifier","messageId":"unusedVar","endLine":44,"endColumn":14},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'lastSavedAt' is assigned a value but never used.","line":45,"column":9,"nodeType":"Identifier","messageId":"unusedVar","endLine":45,"endColumn":20},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'activeTab' is assigned a value but never used.","line":67,"column":9,"nodeType":"Identifier","messageId":"unusedVar","endLine":67,"endColumn":18},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'activeProcessGroup' is assigned a value but never used.","line":137,"column":9,"nodeType":"Identifier","messageId":"unusedVar","endLine":137,"endColumn":27}],"suppressedMessages":[],"errorCount":5,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import type { OperationStep } from \"@app-types/routing\";\nimport {\n  createRecommendationBucketKey,\n  createRecommendationOperationKey,\n  useRoutingStore,\n} from \"@store/routingStore\";\nimport { Activity, Database, Edit3, EyeOff, Plus, Search, Settings, ToggleLeft, ToggleRight, Trash2 } from \"lucide-react\";\nimport type { DragEvent, MouseEvent } from \"react\";\nimport { useEffect, useMemo, useState } from \"react\";\n\nimport { AnimatedCandidateCard } from \"./AnimatedCandidateCard\";\nimport { CandidateSettingsModal } from \"./CandidateSettingsModal\";\n\ninterface OperationBucket {\n  itemCode: string;\n  candidateId: string | null;\n  operations: OperationStep[];\n}\n\ninterface CandidateOperation {\n  id: string;\n  operation: OperationStep;\n  source: \"default\" | \"custom\";\n  entryId?: string;\n  itemCode: string;\n  candidateId: string | null;\n}\n\nexport function CandidatePanel() {\n  const activeProductId = useRoutingStore((state) => state.activeProductId);\n  const recommendations = useRoutingStore((state) => state.recommendations);\n  const customRecommendations = useRoutingStore((state) => state.customRecommendations);\n  const hiddenRecommendationKeys = useRoutingStore((state) => state.hiddenRecommendationKeys);\n  const insertOperation = useRoutingStore((state) => state.insertOperation);\n  const addCustomRecommendation = useRoutingStore((state) => state.addCustomRecommendation);\n  const updateCustomRecommendation = useRoutingStore((state) => state.updateCustomRecommendation);\n  const removeCustomRecommendation = useRoutingStore((state) => state.removeCustomRecommendation);\n  const hideRecommendation = useRoutingStore((state) => state.hideRecommendation);\n  const restoreRecommendation = useRoutingStore((state) => state.restoreRecommendation);\n  const restoreAllRecommendations = useRoutingStore((state) => state.restoreAllRecommendations);\n  const loading = useRoutingStore((state) => state.loading);\n  const productTabs = useRoutingStore((state) => state.productTabs);\n  const timelineLength = useRoutingStore((state) => state.timeline.length);\n  const dirty = useRoutingStore((state) => state.dirty);\n  const lastSavedAt = useRoutingStore((state) => state.lastSavedAt);\n  const erpRequired = useRoutingStore((state) => state.erpRequired);\n  const setERPRequired = useRoutingStore((state) => state.setERPRequired);\n  const processGroups = useRoutingStore((state) => state.processGroups);\n  const activeProcessGroupId = useRoutingStore((state) => state.activeProcessGroupId);\n  const setActiveProcessGroup = useRoutingStore((state) => state.setActiveProcessGroup);\n  const setSelectedCandidate = useRoutingStore((state) => state.setSelectedCandidate);\n\n  const [filter, setFilter] = useState(\"\");\n  const [settingsOpen, setSettingsOpen] = useState(false);\n  const [pendingEditId, setPendingEditId] = useState<string | null>(null);\n\n  const bucket = useMemo<OperationBucket | null>(() => {\n    if (!activeProductId) {\n      return null;\n    }\n    return recommendations.find((item) => item.itemCode === activeProductId) ?? null;\n  }, [activeProductId, recommendations]);\n\n  const bucketCandidateId = bucket?.candidateId ?? null;\n  const bucketKey = bucket ? createRecommendationBucketKey(bucket.itemCode, bucketCandidateId) : null;\n\n  const activeTab = useMemo(() => {\n    if (!activeProductId) {\n      return null;\n    }\n    return productTabs.find((tab) => tab.id === activeProductId) ?? null;\n  }, [activeProductId, productTabs]);\n\n  const bucketCustomEntries = useMemo(\n    () =>\n      bucket\n        ? customRecommendations.filter(\n            (entry) =>\n              entry.itemCode === bucket.itemCode && entry.candidateId === bucketCandidateId,\n          )\n        : [],\n    [bucket, bucketCandidateId, customRecommendations],\n  );\n\n  const hiddenKeys = useMemo(\n    () => (bucketKey ? hiddenRecommendationKeys[bucketKey] ?? [] : []),\n    [bucketKey, hiddenRecommendationKeys],\n  );\n\n  const visibleOperations = useMemo<CandidateOperation[]>(() => {\n    if (!bucket) {\n      return [];\n    }\n    const keyword = filter.trim().toLowerCase();\n    const hiddenSet = new Set(hiddenKeys);\n    const defaultOperations: CandidateOperation[] = bucket.operations\n      .filter((operation) => !hiddenSet.has(createRecommendationOperationKey(operation)))\n      .map((operation) => ({\n        id: `default-${createRecommendationOperationKey(operation)}`,\n        operation,\n        source: \"default\" as const,\n        itemCode: bucket.itemCode,\n        candidateId: bucket.candidateId,\n      }));\n    const customOperations: CandidateOperation[] = bucketCustomEntries.map((entry) => ({\n      id: `custom-${entry.id}`,\n      operation: entry.operation,\n      source: \"custom\" as const,\n      entryId: entry.id,\n      itemCode: entry.itemCode,\n      candidateId: entry.candidateId,\n    }));\n    const combined = [...customOperations, ...defaultOperations];\n    if (!keyword) {\n      return combined;\n    }\n    return combined.filter((item) => {\n      const source = `${item.operation.PROC_CD} ${item.operation.PROC_DESC ?? \"\"}`.toLowerCase();\n      return source.includes(keyword);\n    });\n  }, [bucket, bucketCustomEntries, filter, hiddenKeys]);\n\n  const hiddenOperations = useMemo(() => {\n    if (!bucket) {\n      return [];\n    }\n    const hiddenSet = new Set(hiddenKeys);\n    return bucket.operations.filter((operation) =>\n      hiddenSet.has(createRecommendationOperationKey(operation)),\n    );\n  }, [bucket, hiddenKeys]);\n\n  const visibleCount = bucket ? visibleOperations.length : 0;\n  const customCount = bucketCustomEntries.length;\n  const hiddenCount = hiddenOperations.length;\n\n  const activeProcessGroup = useMemo(\n    () => processGroups.find((group) => group.id === activeProcessGroupId) ?? null,\n    [activeProcessGroupId, processGroups],\n  );\n\n  const handleCardClick = (item: CandidateOperation) => () => {\n    setSelectedCandidate(item.itemCode);\n  };\n\n  const handleDragStart = (operation: OperationStep) => (event: DragEvent<HTMLDivElement>) => {\n    event.dataTransfer.effectAllowed = \"copy\";\n    event.dataTransfer.setData(\n      \"application/routing-operation\",\n      JSON.stringify({ itemCode: bucket?.itemCode ?? \"\", candidateId: bucket?.candidateId, operation }),\n    );\n    event.dataTransfer.setData(\"text/plain\", `${operation.PROC_CD}`);\n  };\n\n  const handleDoubleClick = (operation: OperationStep) => () => {\n    if (!bucket) {\n      return;\n    }\n    insertOperation({ itemCode: bucket.itemCode, candidateId: bucket.candidateId, operation });\n  };\n\n  const handleEditCustom = (entryId: string) => {\n    setPendingEditId(entryId);\n    setSettingsOpen(true);\n  };\n\n  const handleRemoveOperation = (item: CandidateOperation) => (event: MouseEvent) => {\n    event.stopPropagation();\n    if (!bucket) {\n      return;\n    }\n    if (item.source === \"custom\" && item.entryId) {\n      removeCustomRecommendation(item.entryId);\n      return;\n    }\n    const operationKey = createRecommendationOperationKey(item.operation);\n    hideRecommendation(bucket.itemCode, bucketCandidateId, operationKey);\n  };\n\n  const handleOpenSettings = () => {\n    setPendingEditId(null);\n    setSettingsOpen(true);\n  };\n\n  const handleCloseSettings = () => {\n    setPendingEditId(null);\n    setSettingsOpen(false);\n  };\n\n  return (\n    <section className=\"panel-card interactive-card candidate-panel responsive-container\">\n      <header className=\"panel-header candidate-header\" style={{ flexDirection: 'column', alignItems: 'stretch', gap: '1rem' }}>\n        <div style={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center' }}>\n          <h2 className=\"panel-title heading-fluid-3\">후보 공정 노드</h2>\n          <button\n            type=\"button\"\n            className=\"candidate-manage__button touch-target\"\n            onClick={handleOpenSettings}\n          >\n            <Settings size={16} /> 노드 설정\n          </button>\n        </div>\n        <div className=\"candidate-filter candidate-header__filter\" style={{ width: '100%' }}>\n          <Search size={14} className=\"candidate-filter__icon\" />\n          <input\n            type=\"search\"\n            value={filter}\n            onChange={(event) => setFilter(event.target.value)}\n            placeholder=\"공정 코드/설명 검색\"\n            style={{ flex: 1 }}\n          />\n        </div>\n      </header>\n\n      <div className=\"candidate-toolbar\">\n        <div className=\"candidate-tags\">\n          <span className=\"candidate-tag\" aria-label=\"표시 중인 공정 수\">\n            <Activity size={13} /> {visibleCount} 표시\n          </span>\n          <span className=\"candidate-tag\" aria-label=\"사용자 정의 공정 수\">\n            <Plus size={13} /> {customCount} 사용자\n          </span>\n          <span className=\"candidate-tag\" aria-label=\"숨김 처리된 공정 수\">\n            <EyeOff size={13} /> {hiddenCount} 숨김\n          </span>\n          <span className=\"candidate-tag\" aria-label=\"타임라인 단계\">\n            <Database size={13} /> 타임라인 {timelineLength}\n          </span>\n        </div>\n        <div className=\"candidate-controls\">\n          <button\n            type=\"button\"\n            className={`candidate-erp-toggle touch-target${erpRequired ? \" is-active\" : \"\"}`}\n            onClick={() => setERPRequired(!erpRequired)}\n            aria-pressed={erpRequired}\n            aria-label=\"ERP 인터페이스 필요 여부 토글\"\n          >\n            {erpRequired ? <ToggleRight size={16} /> : <ToggleLeft size={16} />}\n            <span>{erpRequired ? \"ERP ON\" : \"ERP OFF\"}</span>\n          </button>\n          <label className=\"candidate-controls__group\">\n            <span className=\"candidate-controls__label\">공정 그룹</span>\n            <select\n              value={activeProcessGroupId ?? \"\"}\n              onChange={(event) =>\n                setActiveProcessGroup(event.target.value ? event.target.value : null)\n              }\n              aria-label=\"활성 공정 그룹 선택\"\n              className=\"touch-target\"\n            >\n              <option value=\"\">선택되지 않음</option>\n              {processGroups.map((group) => (\n                <option key={group.id} value={group.id}>\n                  {group.name} · {group.type === \"machining\" ? \"가공\" : \"후처리\"}\n                </option>\n              ))}\n            </select>\n          </label>\n        </div>\n      </div>\n\n      {loading ? (\n        <div className=\"candidate-placeholder\">추천 공정을 불러오는 중입니다...</div>\n      ) : !bucket ? (\n        <div className=\"candidate-placeholder\">활성 품목이 없습니다. 품목을 검색해 주세요.</div>\n      ) : visibleOperations.length === 0 ? (\n        <div className=\"candidate-placeholder\">\n          {filter.trim()\n            ? \"조건에 맞는 후보 공정이 없습니다.\"\n            : hiddenCount > 0\n            ? \"숨김 처리된 공정만 있습니다. 아래 목록에서 복원하세요.\"\n            : \"등록된 후보 공정이 없습니다. 사용자 정의 공정을 추가해 보세요.\"}\n        </div>\n      ) : (\n        <div className=\"candidate-list responsive-grid responsive-grid--auto-fit\" role=\"list\" style={{ display: 'flex', flexWrap: 'wrap', gap: '1rem', overflowX: 'hidden' }}>\n          {visibleOperations.map((item, index) => (\n            <AnimatedCandidateCard\n              key={item.id}\n              delay={index * 0.05}\n              role=\"listitem\"\n              className={`candidate-node-card responsive-card touch-target${item.source === \"custom\" ? \" is-custom\" : \"\"}`}\n              style={{ flex: '0 1 calc(50% - 0.5rem)', minWidth: '220px', maxWidth: '100%' }}\n              draggable\n              onClick={handleCardClick(item)}\n              onDragStart={handleDragStart(item.operation)}\n              onDoubleClick={handleDoubleClick(item.operation)}\n              tabIndex={0}\n              onKeyDown={(event) => {\n                if (event.key === \"Enter\" || event.key === \" \") {\n                  event.preventDefault();\n                  handleDoubleClick(item.operation)();\n                }\n              }}\n            >\n              <div className=\"timeline-node candidate-node\">\n                <header className=\"timeline-node__header\">\n                  <div className=\"timeline-node__title-group\">\n                    <span className=\"timeline-node__seq\">#{item.operation.PROC_SEQ}</span>\n                    <span className=\"timeline-node__title\">{item.operation.PROC_CD}</span>\n                    {item.operation.OUTSOURCING_REPLACED ? (\n                      <span className=\"candidate-node__badge\" style={{ backgroundColor: '#f97316', color: '#0f172a' }}>\n                        사내전환\n                      </span>\n                    ) : null}\n                    {item.operation.HAS_WORK_DATA === false || item.operation.HAS_WORK_DATA === \"N\" ? (\n                      <span className=\"candidate-node__badge\" style={{ backgroundColor: '#64748b' }}>\n                        실적없음\n                      </span>\n                    ) : null}\n                  </div>\n                  <div className=\"timeline-node__actions\">\n                    {item.source === \"custom\" ? (\n                      <span className=\"candidate-node__badge\">사용자 정의</span>\n                    ) : null}\n                  </div>\n                </header>\n                <p className=\"timeline-node__desc\">{item.operation.PROC_DESC ?? \"설명 없음\"}</p>\n                <div className=\"timeline-node__meta candidate-node__metrics\">\n                  <span className=\"timeline-node__meta-item\">\n                    <strong>Setup:</strong> {item.operation.SETUP_TIME ?? \"-\"}\n                  </span>\n                  <span className=\"timeline-node__meta-item\">\n                    <strong>Run:</strong> {item.operation.RUN_TIME ?? \"-\"}\n                  </span>\n                  <span className=\"timeline-node__meta-item\">\n                    <strong>Wait:</strong> {item.operation.WAIT_TIME ?? \"-\"}\n                  </span>\n                  {(item.operation.SAMPLE_COUNT ?? item.operation.WORK_ORDER_COUNT) ? (\n                    <span className=\"timeline-node__meta-item\">\n                      <strong>샘플:</strong> {item.operation.SAMPLE_COUNT ?? item.operation.WORK_ORDER_COUNT}\n                      {(item.operation.SAMPLE_COUNT ?? item.operation.WORK_ORDER_COUNT ?? 0) < 3 && <span style={{ color: '#f59e0b', marginLeft: '2px' }} title=\"샘플 부족\">⚠️</span>}\n                    </span>\n                  ) : null}\n                  {item.operation.WORK_ORDER_CONFIDENCE !== undefined &&\n                  item.operation.WORK_ORDER_CONFIDENCE !== null ? (\n                    <span className=\"timeline-node__meta-item\">\n                      <strong>신뢰도:</strong> {Math.round(item.operation.WORK_ORDER_CONFIDENCE * 100)}%\n                      {Math.round(item.operation.WORK_ORDER_CONFIDENCE * 100) >= 80 && <span style={{ color: '#10b981', marginLeft: '2px' }} title=\"고신뢰도\">✓</span>}\n                    </span>\n                  ) : null}\n                  {item.operation.TRIM_MEAN !== undefined && item.operation.TRIM_MEAN !== null ? (\n                    <span className=\"timeline-node__meta-item\" title=\"Trim-평균 (이상치 제거)\">\n                      <strong>Trim:</strong> {item.operation.TRIM_MEAN.toFixed(2)}분\n                    </span>\n                  ) : null}\n                </div>\n                <div className=\"candidate-node__footer\">\n                  <div className=\"candidate-node__actions\">\n                    {item.source === \"custom\" && item.entryId ? (\n                      <button\n                        type=\"button\"\n                    className=\"candidate-node__action btn-responsive\"\n                    onClick={(event) => {\n                      event.stopPropagation();\n                      if (item.entryId) {\n                        handleEditCustom(item.entryId);\n                      }\n                    }}\n                    aria-label=\"사용자 정의 공정 편집\"\n                  >\n                        <Edit3 size={14} /> 편집\n                      </button>\n                    ) : null}\n                    <button\n                      type=\"button\"\n                      className=\"candidate-node__action btn-responsive\"\n                      onClick={handleRemoveOperation(item)}\n                      aria-label={item.source === \"custom\" ? \"사용자 정의 공정 삭제\" : \"추천 공정 숨기기\"}\n                    >\n                      <Trash2 size={14} /> {item.source === \"custom\" ? \"삭제\" : \"숨기기\"}\n                    </button>\n                  </div>\n                  <p className=\"candidate-node__hint\">드래그 또는 더블 클릭으로 추가</p>\n                </div>\n              </div>\n            </AnimatedCandidateCard>\n          ))}\n        </div>\n      )}\n\n      <CandidateSettingsModal\n        open={settingsOpen}\n        onClose={handleCloseSettings}\n        bucket={bucket ? { itemCode: bucket.itemCode, candidateId: bucketCandidateId } : null}\n        customEntries={customRecommendations}\n        hiddenOperations={hiddenOperations}\n        recommendationOperations={bucket?.operations ?? []}\n        addCustomRecommendation={addCustomRecommendation}\n        updateCustomRecommendation={updateCustomRecommendation}\n        removeCustomRecommendation={removeCustomRecommendation}\n        hideRecommendation={hideRecommendation}\n        restoreRecommendation={restoreRecommendation}\n        restoreAllRecommendations={restoreAllRecommendations}\n        initialEditId={pendingEditId}\n      />\n    </section>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\syyun\\Documents\\GitHub\\Routing_ML_251014\\frontend-prediction\\src\\components\\CandidateSettingsModal.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\syyun\\Documents\\GitHub\\Routing_ML_251014\\frontend-prediction\\src\\components\\DarkModeToggle.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\syyun\\Documents\\GitHub\\Routing_ML_251014\\frontend-prediction\\src\\components\\DatabaseSettings.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":17,"column":32,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":17,"endColumn":35,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[427,430],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[427,430],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":136,"column":95,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":136,"endColumn":98,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3773,3776],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3773,3776],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { AlertCircle, CheckCircle, Database, RefreshCw, X,XCircle } from 'lucide-react';\nimport React, { useEffect,useState } from 'react';\n\ninterface DatabaseConfig {\n  server: string;\n  database: string;\n  user: string;\n  encrypt: boolean;\n  trust_certificate: boolean;\n}\n\ninterface DatabaseInfo {\n  connection_status: string;\n  server: string;\n  database: string;\n  database_size_mb?: number;\n  tables_info?: Record<string, any>;\n}\n\ninterface ConnectionTestPayload extends DatabaseConfig {\n  password: string;\n}\n\ninterface ModalProps {\n  isOpen: boolean;\n  onClose: () => void;\n  title: string;\n  message: string;\n  type: 'alert' | 'confirm';\n  onConfirm?: () => void;\n}\n\nfunction Modal({ isOpen, onClose, title, message, type, onConfirm }: ModalProps) {\n  if (!isOpen) return null;\n\n  return (\n    <div\n      style={{\n        position: 'fixed',\n        top: 0,\n        left: 0,\n        right: 0,\n        bottom: 0,\n        backgroundColor: 'rgba(0, 0, 0, 0.7)',\n        display: 'flex',\n        alignItems: 'center',\n        justifyContent: 'center',\n        zIndex: 1000,\n      }}\n      onClick={onClose}\n    >\n      <div\n        style={{\n          backgroundColor: '#1e293b',\n          borderRadius: '12px',\n          padding: '24px',\n          maxWidth: '500px',\n          width: '90%',\n          boxShadow: '0 20px 25px -5px rgba(0, 0, 0, 0.3)',\n          border: '1px solid #475569',\n        }}\n        onClick={(e) => e.stopPropagation()}\n      >\n        <div style={{ display: 'flex', alignItems: 'start', justifyContent: 'space-between', marginBottom: '16px' }}>\n          <h3 style={{ fontSize: '18px', fontWeight: '600', color: '#f1f5f9', margin: 0 }}>{title}</h3>\n          <button\n            onClick={onClose}\n            style={{\n              background: 'transparent',\n              border: 'none',\n              cursor: 'pointer',\n              padding: '4px',\n              color: '#94a3b8',\n            }}\n          >\n            <X size={20} />\n          </button>\n        </div>\n        <p style={{ color: '#cbd5e1', fontSize: '14px', marginBottom: '24px', lineHeight: '1.6' }}>{message}</p>\n        <div style={{ display: 'flex', gap: '12px', justifyContent: 'flex-end' }}>\n          {type === 'confirm' && (\n            <button\n              onClick={onClose}\n              style={{\n                padding: '10px 20px',\n                backgroundColor: '#475569',\n                border: 'none',\n                borderRadius: '6px',\n                color: '#ffffff',\n                fontSize: '14px',\n                fontWeight: '500',\n                cursor: 'pointer',\n              }}\n            >\n              취소\n            </button>\n          )}\n          <button\n            onClick={() => {\n              if (type === 'confirm' && onConfirm) {\n                onConfirm();\n              }\n              onClose();\n            }}\n            style={{\n              padding: '10px 20px',\n              backgroundColor: type === 'confirm' ? '#3b82f6' : '#10b981',\n              border: 'none',\n              borderRadius: '6px',\n              color: '#ffffff',\n              fontSize: '14px',\n              fontWeight: '500',\n              cursor: 'pointer',\n            }}\n          >\n            {type === 'confirm' ? '확인' : '닫기'}\n          </button>\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport function DatabaseSettings() {\n  const [config, setConfig] = useState<DatabaseConfig>({\n    server: '',\n    database: '',\n    user: '',\n    encrypt: false,\n    trust_certificate: true,\n  });\n\n  const [password, setPassword] = useState('');\n  const [loading, setLoading] = useState(false);\n  const [testing, setTesting] = useState(false);\n  const [testResult, setTestResult] = useState<{ success: boolean; message: string; details?: any } | null>(null);\n  const [dbInfo, setDbInfo] = useState<DatabaseInfo | null>(null);\n\n  // Modal state\n  const [modalState, setModalState] = useState<{\n    isOpen: boolean;\n    title: string;\n    message: string;\n    type: 'alert' | 'confirm';\n    onConfirm?: () => void;\n  }>({\n    isOpen: false,\n    title: '',\n    message: '',\n    type: 'alert',\n  });\n\n  const showAlert = (title: string, message: string) => {\n    setModalState({\n      isOpen: true,\n      title,\n      message,\n      type: 'alert',\n    });\n  };\n\n  const showConfirm = (title: string, message: string, onConfirm: () => void) => {\n    setModalState({\n      isOpen: true,\n      title,\n      message,\n      type: 'confirm',\n      onConfirm,\n    });\n  };\n\n  const closeModal = () => {\n    setModalState((prev) => ({ ...prev, isOpen: false }));\n  };\n\n  useEffect(() => {\n    loadCurrentConfig();\n    loadDatabaseInfo();\n  }, []);\n\n  const loadCurrentConfig = async () => {\n    try {\n      const response = await fetch('/api/database/config');\n      if (response.ok) {\n        const data = await response.json();\n        setConfig(data);\n      }\n    } catch (error) {\n      console.error('Failed to load database config:', error);\n    }\n  };\n\n  const loadDatabaseInfo = async () => {\n    try {\n      const response = await fetch('/api/database/info');\n      if (response.ok) {\n        const data = await response.json();\n        setDbInfo(data);\n      }\n    } catch (error) {\n      console.error('Failed to load database info:', error);\n    }\n  };\n\n  const handleTestConnection = async () => {\n    if (!password) {\n      showAlert('입력 오류', '비밀번호를 입력해주세요');\n      return false;\n    }\n\n    setTesting(true);\n    setTestResult(null);\n\n    try {\n      const payload: ConnectionTestPayload = {\n        ...config,\n        password,\n      };\n\n      const response = await fetch('/api/database/test-connection', {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify(payload),\n      });\n\n      const data = await response.json();\n\n      if (response.ok) {\n        setTestResult({\n          success: data.success,\n          message: data.message,\n          details: data.details,\n        });\n        return data.success;\n      } else {\n        setTestResult({\n          success: false,\n          message: data.detail || '연결 테스트 실패',\n        });\n        return false;\n      }\n    } catch (error) {\n      setTestResult({\n        success: false,\n        message: `연결 테스트 중 오류 발생: ${error}`,\n      });\n      return false;\n    } finally {\n      setTesting(false);\n    }\n  };\n\n  const handleSaveConfig = async () => {\n    if (!password) {\n      showAlert('입력 오류', '비밀번호를 입력해주세요');\n      return;\n    }\n\n    // 먼저 연결 테스트 실행\n    setTesting(true);\n    const testSuccess = await handleTestConnection();\n    setTesting(false);\n\n    // 테스트 실패 시 확인\n    if (!testSuccess) {\n      showConfirm(\n        '연결 테스트 실패',\n        '연결 테스트가 실패했습니다. 그래도 저장하시겠습니까?',\n        async () => {\n          await performSave();\n        }\n      );\n      return;\n    }\n\n    await performSave();\n  };\n\n  const performSave = async () => {\n    setLoading(true);\n\n    try {\n      const response = await fetch('/api/database/config', {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify(config),\n      });\n\n      if (response.ok) {\n        const data = await response.json();\n        showAlert('저장 완료', data.message || '설정이 저장되었습니다. 애플리케이션을 재시작해주세요.');\n        loadDatabaseInfo();\n      } else {\n        const error = await response.json();\n        showAlert('저장 실패', `저장 실패: ${error.detail}`);\n      }\n    } catch (error) {\n      showAlert('오류 발생', `저장 중 오류 발생: ${error}`);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  return (\n    <div style={{ padding: '24px', maxWidth: '800px', margin: '0 auto' }}>\n      <Modal\n        isOpen={modalState.isOpen}\n        onClose={closeModal}\n        title={modalState.title}\n        message={modalState.message}\n        type={modalState.type}\n        onConfirm={modalState.onConfirm}\n      />\n\n      <div style={{ marginBottom: '24px' }}>\n        <div style={{ display: 'flex', alignItems: 'center', gap: '12px', marginBottom: '16px' }}>\n          <Database size={28} color=\"#3b82f6\" />\n          <h2 style={{ fontSize: '24px', fontWeight: '600', margin: 0, color: '#f1f5f9' }}>\n            데이터베이스 설정\n          </h2>\n        </div>\n        <p style={{ color: '#94a3b8', fontSize: '14px', margin: 0 }}>\n          MSSQL 데이터베이스 연결 정보를 설정합니다.\n        </p>\n      </div>\n\n      {/* 현재 연결 상태 */}\n      {dbInfo && (\n        <div\n          style={{\n            backgroundColor: dbInfo.connection_status === '정상' ? '#10b981' : '#ef4444',\n            padding: '12px 16px',\n            borderRadius: '8px',\n            marginBottom: '24px',\n            display: 'flex',\n            alignItems: 'center',\n            gap: '12px',\n          }}\n        >\n          {dbInfo.connection_status === '정상' ? (\n            <CheckCircle size={20} color=\"#ffffff\" />\n          ) : (\n            <XCircle size={20} color=\"#ffffff\" />\n          )}\n          <div style={{ flex: 1 }}>\n            <div style={{ color: '#ffffff', fontWeight: '500' }}>\n              {dbInfo.connection_status === '정상' ? '연결됨' : '연결 끊김'}\n            </div>\n            <div style={{ color: '#ffffff', fontSize: '12px', marginTop: '4px' }}>\n              {dbInfo.server} / {dbInfo.database}\n              {dbInfo.database_size_mb && ` (${dbInfo.database_size_mb.toFixed(2)} MB)`}\n            </div>\n          </div>\n          <button\n            onClick={loadDatabaseInfo}\n            style={{\n              background: 'rgba(255, 255, 255, 0.2)',\n              border: 'none',\n              borderRadius: '4px',\n              padding: '6px 12px',\n              color: '#ffffff',\n              cursor: 'pointer',\n              display: 'flex',\n              alignItems: 'center',\n              gap: '4px',\n            }}\n          >\n            <RefreshCw size={14} />\n            새로고침\n          </button>\n        </div>\n      )}\n\n      {/* 설정 폼 */}\n      <div style={{ backgroundColor: '#1e293b', borderRadius: '12px', padding: '24px', marginBottom: '24px' }}>\n        <div style={{ display: 'grid', gap: '16px' }}>\n          <div>\n            <label style={{ display: 'block', color: '#cbd5e1', fontSize: '14px', marginBottom: '6px' }}>\n              서버 주소 <span style={{ color: '#ef4444' }}>*</span>\n            </label>\n            <input\n              type=\"text\"\n              value={config.server}\n              onChange={(e) => setConfig({ ...config, server: e.target.value })}\n              placeholder=\"예: server.com,1433\"\n              style={{\n                width: '100%',\n                padding: '10px 12px',\n                backgroundColor: '#0f172a',\n                border: '1px solid #475569',\n                borderRadius: '6px',\n                color: '#f1f5f9',\n                fontSize: '14px',\n              }}\n            />\n          </div>\n\n          <div>\n            <label style={{ display: 'block', color: '#cbd5e1', fontSize: '14px', marginBottom: '6px' }}>\n              데이터베이스명 <span style={{ color: '#ef4444' }}>*</span>\n            </label>\n            <input\n              type=\"text\"\n              value={config.database}\n              onChange={(e) => setConfig({ ...config, database: e.target.value })}\n              placeholder=\"데이터베이스명\"\n              style={{\n                width: '100%',\n                padding: '10px 12px',\n                backgroundColor: '#0f172a',\n                border: '1px solid #475569',\n                borderRadius: '6px',\n                color: '#f1f5f9',\n                fontSize: '14px',\n              }}\n            />\n          </div>\n\n          <div>\n            <label style={{ display: 'block', color: '#cbd5e1', fontSize: '14px', marginBottom: '6px' }}>\n              사용자명 <span style={{ color: '#ef4444' }}>*</span>\n            </label>\n            <input\n              type=\"text\"\n              value={config.user}\n              onChange={(e) => setConfig({ ...config, user: e.target.value })}\n              placeholder=\"사용자명\"\n              style={{\n                width: '100%',\n                padding: '10px 12px',\n                backgroundColor: '#0f172a',\n                border: '1px solid #475569',\n                borderRadius: '6px',\n                color: '#f1f5f9',\n                fontSize: '14px',\n              }}\n            />\n          </div>\n\n          <div>\n            <label style={{ display: 'block', color: '#cbd5e1', fontSize: '14px', marginBottom: '6px' }}>\n              비밀번호 <span style={{ color: '#ef4444' }}>*</span>\n            </label>\n            <input\n              type=\"password\"\n              value={password}\n              onChange={(e) => setPassword(e.target.value)}\n              placeholder=\"비밀번호 (테스트 및 저장 시 필요)\"\n              style={{\n                width: '100%',\n                padding: '10px 12px',\n                backgroundColor: '#0f172a',\n                border: '1px solid #475569',\n                borderRadius: '6px',\n                color: '#f1f5f9',\n                fontSize: '14px',\n              }}\n            />\n            <p style={{ color: '#64748b', fontSize: '12px', marginTop: '4px', marginBottom: 0 }}>\n              주의: 비밀번호는 .env 파일에 저장되지 않습니다. 환경 변수 MSSQL_PASSWORD로 별도 설정하세요.\n            </p>\n          </div>\n\n          <div style={{ display: 'grid', gridTemplateColumns: '1fr 1fr', gap: '16px' }}>\n            <label style={{ display: 'flex', alignItems: 'center', gap: '8px', color: '#cbd5e1' }}>\n              <input\n                type=\"checkbox\"\n                checked={config.encrypt}\n                onChange={(e) => setConfig({ ...config, encrypt: e.target.checked })}\n                style={{ width: '16px', height: '16px' }}\n              />\n              암호화 사용 (Encrypt)\n            </label>\n\n            <label style={{ display: 'flex', alignItems: 'center', gap: '8px', color: '#cbd5e1' }}>\n              <input\n                type=\"checkbox\"\n                checked={config.trust_certificate}\n                onChange={(e) => setConfig({ ...config, trust_certificate: e.target.checked })}\n                style={{ width: '16px', height: '16px' }}\n              />\n              인증서 신뢰 (TrustServerCertificate)\n            </label>\n          </div>\n        </div>\n      </div>\n\n      {/* 테스트 결과 */}\n      {testResult && (\n        <div\n          style={{\n            backgroundColor: testResult.success ? '#064e3b' : '#7f1d1d',\n            border: `1px solid ${testResult.success ? '#10b981' : '#ef4444'}`,\n            borderRadius: '8px',\n            padding: '12px 16px',\n            marginBottom: '16px',\n            display: 'flex',\n            alignItems: 'start',\n            gap: '12px',\n          }}\n        >\n          {testResult.success ? (\n            <CheckCircle size={20} color=\"#10b981\" />\n          ) : (\n            <AlertCircle size={20} color=\"#ef4444\" />\n          )}\n          <div style={{ flex: 1 }}>\n            <div style={{ color: '#f1f5f9', fontWeight: '500', marginBottom: '4px' }}>\n              {testResult.message}\n            </div>\n            {testResult.details && (\n              <div style={{ color: '#cbd5e1', fontSize: '12px' }}>\n                <div>서버: {testResult.details.server}</div>\n                <div>데이터베이스: {testResult.details.database}</div>\n              </div>\n            )}\n          </div>\n        </div>\n      )}\n\n      {/* 액션 버튼 */}\n      <div style={{ display: 'flex', gap: '12px' }}>\n        <button\n          onClick={handleTestConnection}\n          disabled={testing || !config.server || !config.database || !config.user || !password}\n          style={{\n            flex: 1,\n            padding: '12px 24px',\n            backgroundColor: testing ? '#475569' : '#3b82f6',\n            border: 'none',\n            borderRadius: '6px',\n            color: '#ffffff',\n            fontSize: '14px',\n            fontWeight: '500',\n            cursor: testing ? 'not-allowed' : 'pointer',\n            opacity: testing || !config.server || !config.database || !config.user || !password ? 0.6 : 1,\n          }}\n        >\n          {testing ? '테스트 중...' : '연결 테스트'}\n        </button>\n\n        <button\n          onClick={handleSaveConfig}\n          disabled={loading || !config.server || !config.database || !config.user}\n          style={{\n            flex: 1,\n            padding: '12px 24px',\n            backgroundColor: loading ? '#475569' : '#10b981',\n            border: 'none',\n            borderRadius: '6px',\n            color: '#ffffff',\n            fontSize: '14px',\n            fontWeight: '500',\n            cursor: loading ? 'not-allowed' : 'pointer',\n            opacity: loading || !config.server || !config.database || !config.user ? 0.6 : 1,\n          }}\n        >\n          {loading ? '저장 중...' : '설정 저장'}\n        </button>\n      </div>\n    </div>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\syyun\\Documents\\GitHub\\Routing_ML_251014\\frontend-prediction\\src\\components\\ErrorBoundary.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'error' is defined but never used.","line":28,"column":35,"nodeType":"Identifier","messageId":"unusedVar","endLine":28,"endColumn":47}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { Component, ErrorInfo, ReactNode } from 'react';\n\ninterface Props {\n  children: ReactNode;\n  fallback?: ReactNode;\n}\n\ninterface State {\n  hasError: boolean;\n  error: Error | null;\n  errorInfo: ErrorInfo | null;\n}\n\n/**\n * React Error Boundary 컴포넌트\n * 하위 컴포넌트에서 발생한 에러를 catch하여 fallback UI를 표시\n */\nclass ErrorBoundary extends Component<Props, State> {\n  constructor(props: Props) {\n    super(props);\n    this.state = {\n      hasError: false,\n      error: null,\n      errorInfo: null,\n    };\n  }\n\n  static getDerivedStateFromError(error: Error): Partial<State> {\n    return { hasError: true };\n  }\n\n  componentDidCatch(error: Error, errorInfo: ErrorInfo): void {\n    console.error('ErrorBoundary caught an error:', error, errorInfo);\n    this.setState({\n      error,\n      errorInfo,\n    });\n\n    // 프로덕션 환경에서는 에러 로깅 서비스로 전송\n    // 예: Sentry, LogRocket 등\n  }\n\n  handleReset = (): void => {\n    this.setState({\n      hasError: false,\n      error: null,\n      errorInfo: null,\n    });\n  };\n\n  render(): ReactNode {\n    if (this.state.hasError) {\n      // 사용자 정의 fallback UI가 제공된 경우\n      if (this.props.fallback) {\n        return this.props.fallback;\n      }\n\n      // 기본 fallback UI\n      return (\n        <div\n          style={{\n            display: 'flex',\n            flexDirection: 'column',\n            alignItems: 'center',\n            justifyContent: 'center',\n            minHeight: '400px',\n            padding: '2rem',\n            textAlign: 'center',\n          }}\n        >\n          <div\n            style={{\n              maxWidth: '600px',\n              padding: '2rem',\n              borderRadius: '8px',\n              backgroundColor: 'var(--surface-card, #1e293b)',\n              border: '1px solid var(--border, #334155)',\n            }}\n          >\n            <h2\n              style={{\n                fontSize: '1.5rem',\n                fontWeight: '600',\n                marginBottom: '1rem',\n                color: 'var(--text-heading, #f1f5f9)',\n              }}\n            >\n              ⚠️ 오류가 발생했습니다\n            </h2>\n            <p\n              style={{\n                fontSize: '1rem',\n                marginBottom: '1.5rem',\n                color: 'var(--text-body, #cbd5e1)',\n              }}\n            >\n              애플리케이션에서 예상치 못한 오류가 발생했습니다.\n              <br />\n              페이지를 새로고침하거나 잠시 후 다시 시도해주세요.\n            </p>\n\n            {this.state.error && (\n              <details\n                style={{\n                  marginTop: '1rem',\n                  padding: '1rem',\n                  backgroundColor: 'var(--surface, #0f172a)',\n                  borderRadius: '4px',\n                  textAlign: 'left',\n                  fontSize: '0.875rem',\n                  color: 'var(--text-muted, #94a3b8)',\n                }}\n              >\n                <summary style={{ cursor: 'pointer', marginBottom: '0.5rem' }}>\n                  에러 상세 정보 (개발자용)\n                </summary>\n                <pre style={{ whiteSpace: 'pre-wrap', wordBreak: 'break-word' }}>\n                  <strong>에러 메시지:</strong> {this.state.error.message}\n                  {'\\n\\n'}\n                  <strong>스택 트레이스:</strong>\n                  {'\\n'}\n                  {this.state.error.stack}\n                  {this.state.errorInfo && (\n                    <>\n                      {'\\n\\n'}\n                      <strong>컴포넌트 스택:</strong>\n                      {'\\n'}\n                      {this.state.errorInfo.componentStack}\n                    </>\n                  )}\n                </pre>\n              </details>\n            )}\n\n            <div style={{ marginTop: '1.5rem', display: 'flex', gap: '1rem', justifyContent: 'center' }}>\n              <button\n                onClick={this.handleReset}\n                style={{\n                  padding: '0.75rem 1.5rem',\n                  borderRadius: '6px',\n                  border: '1px solid var(--border, #334155)',\n                  backgroundColor: 'var(--surface-card, #1e293b)',\n                  color: 'var(--text-heading, #f1f5f9)',\n                  fontSize: '1rem',\n                  cursor: 'pointer',\n                  transition: 'all 0.2s',\n                }}\n                onMouseOver={(e) => {\n                  e.currentTarget.style.backgroundColor = 'var(--surface-hover, #2d3748)';\n                }}\n                onMouseOut={(e) => {\n                  e.currentTarget.style.backgroundColor = 'var(--surface-card, #1e293b)';\n                }}\n              >\n                다시 시도\n              </button>\n              <button\n                onClick={() => window.location.reload()}\n                style={{\n                  padding: '0.75rem 1.5rem',\n                  borderRadius: '6px',\n                  border: '1px solid var(--accent, #0ea5e9)',\n                  backgroundColor: 'var(--accent, #0ea5e9)',\n                  color: '#ffffff',\n                  fontSize: '1rem',\n                  cursor: 'pointer',\n                  transition: 'all 0.2s',\n                }}\n                onMouseOver={(e) => {\n                  e.currentTarget.style.backgroundColor = 'var(--accent-hover, #0284c7)';\n                }}\n                onMouseOut={(e) => {\n                  e.currentTarget.style.backgroundColor = 'var(--accent, #0ea5e9)';\n                }}\n              >\n                페이지 새로고침\n              </button>\n            </div>\n          </div>\n        </div>\n      );\n    }\n\n    return this.props.children;\n  }\n}\n\nexport default ErrorBoundary;\n","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\syyun\\Documents\\GitHub\\Routing_ML_251014\\frontend-prediction\\src\\components\\FeatureWeightPanel.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\syyun\\Documents\\GitHub\\Routing_ML_251014\\frontend-prediction\\src\\components\\Header.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\syyun\\Documents\\GitHub\\Routing_ML_251014\\frontend-prediction\\src\\components\\HeroBanner.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\syyun\\Documents\\GitHub\\Routing_ML_251014\\frontend-prediction\\src\\components\\LiquidEtherBackground.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\syyun\\Documents\\GitHub\\Routing_ML_251014\\frontend-prediction\\src\\components\\MainNavigation.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\syyun\\Documents\\GitHub\\Routing_ML_251014\\frontend-prediction\\src\\components\\MappingRuleEditor.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":27,"column":67,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":27,"endColumn":70,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1085,1088],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1085,1088],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { ChevronDown, ChevronRight } from 'lucide-react';\nimport { useState } from 'react';\n\nimport type { DataMappingRule, DataMappingSourceType } from '../types';\n\ninterface MappingRuleEditorProps {\n  mapping: DataMappingRule;\n  onUpdate: (updated: DataMappingRule) => void;\n}\n\nexport function MappingRuleEditor({ mapping, onUpdate }: MappingRuleEditorProps) {\n  const [isExpanded, setIsExpanded] = useState(false);\n\n  const sourceTypeColors: Record<DataMappingSourceType, { bg: string; border: string; text: string }> = {\n    ml_prediction: { bg: 'bg-blue-50', border: 'border-blue-200', text: 'text-blue-700' },\n    admin_input: { bg: 'bg-green-50', border: 'border-green-200', text: 'text-green-700' },\n    external_source: {\n      bg: 'bg-purple-50',\n      border: 'border-purple-200',\n      text: 'text-purple-700',\n    },\n    constant: { bg: 'bg-yellow-50', border: 'border-yellow-200', text: 'text-yellow-700' },\n  };\n\n  const colors = sourceTypeColors[mapping.source_type] ?? sourceTypeColors.ml_prediction;\n\n  const handleFieldChange = (field: keyof DataMappingRule, value: any) => {\n    onUpdate({\n      ...mapping,\n      [field]: value,\n    });\n  };\n\n  return (\n    <div\n      className={`\n        border rounded-lg transition-all\n        ${colors.border} ${isExpanded ? colors.bg : 'bg-white hover:bg-gray-50'}\n      `}\n    >\n      {/* Header */}\n      <div\n        className=\"p-3 cursor-pointer flex items-center justify-between\"\n        onClick={() => setIsExpanded(!isExpanded)}\n      >\n        <div className=\"flex items-center gap-3 flex-1\">\n          <button className=\"text-gray-400 hover:text-gray-600\">\n            {isExpanded ? <ChevronDown size={20} /> : <ChevronRight size={20} />}\n          </button>\n          <div className=\"flex-1\">\n            <div className=\"flex items-center gap-3\">\n              <span className=\"font-mono text-sm font-medium text-gray-900\">\n                {mapping.db_column}\n              </span>\n              <span\n                className={`\n                  px-2 py-0.5 text-xs font-medium rounded\n                  ${colors.bg} ${colors.text}\n                `}\n              >\n                {mapping.source_type.replace('_', ' ')}\n              </span>\n              {mapping.is_required && (\n                <span className=\"px-2 py-0.5 text-xs font-medium rounded bg-red-100 text-red-700\">\n                  Required\n                </span>\n              )}\n            </div>\n            {!isExpanded && mapping.display_name && (\n              <div className=\"text-xs text-gray-500 mt-1\">{mapping.display_name}</div>\n            )}\n          </div>\n          {!isExpanded && mapping.default_value && (\n            <div className=\"text-xs text-gray-600\">\n              Default: <span className=\"font-mono\">{mapping.default_value}</span>\n            </div>\n          )}\n        </div>\n      </div>\n\n      {/* Expanded Details */}\n      {isExpanded && (\n        <div className=\"px-3 pb-3 space-y-4 border-t border-gray-200\">\n          <div className=\"grid grid-cols-2 gap-4 mt-4\">\n            {/* Column 1 */}\n            <div className=\"space-y-4\">\n              <div>\n                <label className=\"block text-xs font-medium text-gray-700 mb-1\">\n                  DB Column Name\n                </label>\n                <input\n                  type=\"text\"\n                  value={mapping.db_column}\n                  onChange={(e) => handleFieldChange('db_column', e.target.value)}\n                  className=\"w-full px-2 py-1.5 text-sm border border-gray-300 rounded focus:ring-2 focus:ring-blue-500 focus:border-blue-500\"\n                />\n              </div>\n\n              <div>\n                <label className=\"block text-xs font-medium text-gray-700 mb-1\">\n                  Routing Field\n                </label>\n                <input\n                  type=\"text\"\n                  value={mapping.routing_field}\n                  onChange={(e) => handleFieldChange('routing_field', e.target.value)}\n                  className=\"w-full px-2 py-1.5 text-sm border border-gray-300 rounded focus:ring-2 focus:ring-blue-500 focus:border-blue-500\"\n                />\n              </div>\n\n              <div>\n                <label className=\"block text-xs font-medium text-gray-700 mb-1\">\n                  Display Name\n                </label>\n                <input\n                  type=\"text\"\n                  value={mapping.display_name || ''}\n                  onChange={(e) => handleFieldChange('display_name', e.target.value || undefined)}\n                  placeholder=\"Optional\"\n                  className=\"w-full px-2 py-1.5 text-sm border border-gray-300 rounded focus:ring-2 focus:ring-blue-500 focus:border-blue-500\"\n                />\n              </div>\n\n              <div>\n                <label className=\"block text-xs font-medium text-gray-700 mb-1\">Data Type</label>\n                <select\n                  value={mapping.data_type}\n                  onChange={(e) =>\n                    handleFieldChange(\n                      'data_type',\n                      e.target.value as 'string' | 'number' | 'boolean' | 'date'\n                    )\n                  }\n                  className=\"w-full px-2 py-1.5 text-sm border border-gray-300 rounded focus:ring-2 focus:ring-blue-500 focus:border-blue-500\"\n                >\n                  <option value=\"string\">String</option>\n                  <option value=\"number\">Number</option>\n                  <option value=\"boolean\">Boolean</option>\n                  <option value=\"date\">Date</option>\n                </select>\n              </div>\n            </div>\n\n            {/* Column 2 */}\n            <div className=\"space-y-4\">\n              <div>\n                <label className=\"block text-xs font-medium text-gray-700 mb-1\">\n                  Source Type\n                </label>\n                <select\n                  value={mapping.source_type}\n                  onChange={(e) =>\n                    handleFieldChange(\n                      'source_type',\n                      e.target.value as\n                        | 'ml_prediction'\n                        | 'admin_input'\n                        | 'external_source'\n                        | 'constant'\n                    )\n                  }\n                  className=\"w-full px-2 py-1.5 text-sm border border-gray-300 rounded focus:ring-2 focus:ring-blue-500 focus:border-blue-500\"\n                >\n                  <option value=\"ml_prediction\">ML Prediction</option>\n                  <option value=\"admin_input\">Admin Input</option>\n                  <option value=\"external_source\">External Source</option>\n                  <option value=\"constant\">Constant</option>\n                </select>\n              </div>\n\n              <div>\n                <label className=\"block text-xs font-medium text-gray-700 mb-1\">\n                  Default Value\n                </label>\n                <input\n                  type=\"text\"\n                  value={mapping.default_value || ''}\n                  onChange={(e) => handleFieldChange('default_value', e.target.value || undefined)}\n                  placeholder={\n                    mapping.source_type === 'ml_prediction'\n                      ? 'From ML predictions'\n                      : 'Enter default value'\n                  }\n                  disabled={mapping.source_type === 'ml_prediction'}\n                  className=\"w-full px-2 py-1.5 text-sm border border-gray-300 rounded focus:ring-2 focus:ring-blue-500 focus:border-blue-500 disabled:bg-gray-100 disabled:cursor-not-allowed\"\n                />\n              </div>\n\n              <div>\n                <label className=\"block text-xs font-medium text-gray-700 mb-1\">\n                  Transform Rule\n                </label>\n                <select\n                  value={mapping.transform_rule || ''}\n                  onChange={(e) => handleFieldChange('transform_rule', e.target.value || undefined)}\n                  className=\"w-full px-2 py-1.5 text-sm border border-gray-300 rounded focus:ring-2 focus:ring-blue-500 focus:border-blue-500\"\n                >\n                  <option value=\"\">None</option>\n                  <option value=\"uppercase\">Uppercase</option>\n                  <option value=\"lowercase\">Lowercase</option>\n                  <option value=\"trim\">Trim</option>\n                </select>\n              </div>\n\n              <div className=\"flex items-center\">\n                <input\n                  type=\"checkbox\"\n                  id={`required-${mapping.db_column}`}\n                  checked={mapping.is_required}\n                  onChange={(e) => handleFieldChange('is_required', e.target.checked)}\n                  className=\"w-4 h-4 text-blue-600 border-gray-300 rounded focus:ring-blue-500\"\n                />\n                <label\n                  htmlFor={`required-${mapping.db_column}`}\n                  className=\"ml-2 text-xs font-medium text-gray-700\"\n                >\n                  Required Field\n                </label>\n              </div>\n            </div>\n          </div>\n\n          {/* External Source Config */}\n          {mapping.source_type === 'external_source' && (\n            <div className=\"pt-4 border-t border-gray-200\">\n              <label className=\"block text-xs font-medium text-gray-700 mb-2\">\n                External Source Configuration\n              </label>\n              <div className=\"grid grid-cols-2 gap-4\">\n                <div>\n                  <label className=\"block text-xs text-gray-600 mb-1\">Source Type</label>\n                  <input\n                    type=\"text\"\n                    value={mapping.source_config?.type || ''}\n                    onChange={(e) =>\n                      handleFieldChange('source_config', {\n                        ...(mapping.source_config || {}),\n                        type: e.target.value,\n                      })\n                    }\n                    placeholder=\"e.g., process_group\"\n                    className=\"w-full px-2 py-1.5 text-sm border border-gray-300 rounded focus:ring-2 focus:ring-blue-500 focus:border-blue-500\"\n                  />\n                </div>\n                <div>\n                  <label className=\"block text-xs text-gray-600 mb-1\">Field</label>\n                  <input\n                    type=\"text\"\n                    value={mapping.source_config?.field || ''}\n                    onChange={(e) =>\n                      handleFieldChange('source_config', {\n                        ...(mapping.source_config || {}),\n                        field: e.target.value,\n                      })\n                    }\n                    placeholder=\"e.g., resource_code\"\n                    className=\"w-full px-2 py-1.5 text-sm border border-gray-300 rounded focus:ring-2 focus:ring-blue-500 focus:border-blue-500\"\n                  />\n                </div>\n              </div>\n            </div>\n          )}\n\n          {/* Description */}\n          <div>\n            <label className=\"block text-xs font-medium text-gray-700 mb-1\">Description</label>\n            <textarea\n              value={mapping.description || ''}\n              onChange={(e) => handleFieldChange('description', e.target.value || undefined)}\n              placeholder=\"Optional description...\"\n              rows={2}\n              className=\"w-full px-2 py-1.5 text-sm border border-gray-300 rounded focus:ring-2 focus:ring-blue-500 focus:border-blue-500\"\n            />\n          </div>\n        </div>\n      )}\n    </div>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\syyun\\Documents\\GitHub\\Routing_ML_251014\\frontend-prediction\\src\\components\\MetricsPanel.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\syyun\\Documents\\GitHub\\Routing_ML_251014\\frontend-prediction\\src\\components\\ModelViewer.tsx","messages":[{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'camera.position'. Either include it or remove the dependency array.","line":325,"column":6,"nodeType":"ArrayExpression","endLine":325,"endColumn":68,"suggestions":[{"desc":"Update the dependencies array to be: [gl, enableManualRotation, enableManualZoom, minZoom, maxZoom, camera.position]","fix":{"range":[9637,9699],"text":"[gl, enableManualRotation, enableManualZoom, minZoom, maxZoom, camera.position]"}}]}],"suppressedMessages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":72,"column":22,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":72,"endColumn":25,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2192,2195],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2192,2195],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}],"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"react-hooks/rules-of-hooks","severity":2,"message":"React Hook \"useGLTF\" cannot be called inside a callback. React Hooks must be called in a React function component or a custom React Hook function.","line":138,"column":49,"nodeType":"Identifier","endLine":138,"endColumn":56,"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"react-hooks/rules-of-hooks","severity":2,"message":"React Hook \"useFBX\" cannot be called inside a callback. React Hooks must be called in a React function component or a custom React Hook function.","line":139,"column":31,"nodeType":"Identifier","endLine":139,"endColumn":37,"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"react-hooks/rules-of-hooks","severity":2,"message":"React Hook \"useLoader\" cannot be called inside a callback. React Hooks must be called in a React function component or a custom React Hook function.","line":140,"column":31,"nodeType":"Identifier","endLine":140,"endColumn":40,"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":156,"column":20,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":156,"endColumn":23,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4327,4330],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4327,4330],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}],"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":186,"column":24,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":186,"endColumn":27,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[5215,5218],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[5215,5218],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}],"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useLayoutEffect has missing dependencies: 'autoFrame', 'camera', 'fadeIn', 'initPitch', 'initYaw', 'onLoaded', and 'pivot'. Either include them or remove the dependency array. If 'onLoaded' changes too often, find the parent component that defines it and wrap that definition in useCallback.","line":200,"column":6,"nodeType":"ArrayExpression","endLine":200,"endColumn":15,"suggestions":[{"desc":"Update the dependencies array to be: [autoFrame, camera, content, fadeIn, initPitch, initYaw, onLoaded, pivot]","fix":{"range":[5549,5558],"text":"[autoFrame, camera, content, fadeIn, initPitch, initYaw, onLoaded, pivot]"}}],"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":428,"column":29,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":428,"endColumn":32,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[12737,12740],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[12737,12740],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}],"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":443,"column":27,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":443,"endColumn":30,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[13314,13317],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[13314,13317],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}],"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":444,"column":20,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":444,"endColumn":23,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[13361,13364],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[13361,13364],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}],"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":509,"column":84,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":509,"endColumn":87,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[15200,15203],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[15200,15203],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}],"suppressions":[{"kind":"directive","justification":""}]}],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/* eslint-disable react-hooks/rules-of-hooks */\n/* eslint-disable react/no-unknown-property */\n/* eslint-disable @typescript-eslint/no-explicit-any */\nimport {\n  ContactShadows,\n  Environment,\n  Html,\n  OrbitControls,\n  useFBX,\n  useGLTF,\n  useProgress,\n} from \"@react-three/drei\";\nimport { Canvas, invalidate,useFrame, useLoader, useThree } from \"@react-three/fiber\";\nimport { Suspense, useEffect, useLayoutEffect, useMemo, useRef } from \"react\";\nimport * as THREE from \"three\";\nimport { OBJLoader } from \"three/examples/jsm/loaders/OBJLoader.js\";\n\ntype ModelViewerProps = {\n  url: string;\n  width?: number;\n  height?: number;\n  modelXOffset?: number;\n  modelYOffset?: number;\n  defaultRotationX?: number;\n  defaultRotationY?: number;\n  defaultZoom?: number;\n  minZoomDistance?: number;\n  maxZoomDistance?: number;\n  enableMouseParallax?: boolean;\n  enableManualRotation?: boolean;\n  enableHoverRotation?: boolean;\n  enableManualZoom?: boolean;\n  ambientIntensity?: number;\n  keyLightIntensity?: number;\n  fillLightIntensity?: number;\n  rimLightIntensity?: number;\n  environmentPreset?: string;\n  autoFrame?: boolean;\n  placeholderSrc?: string;\n  showScreenshotButton?: boolean;\n  fadeIn?: boolean;\n  autoRotate?: boolean;\n  autoRotateSpeed?: number;\n  onModelLoaded?: () => void;\n};\n\nconst isTouch = typeof window !== \"undefined\" && (\"ontouchstart\" in window || navigator.maxTouchPoints > 0);\nconst deg2rad = (d: number) => (d * Math.PI) / 180;\nconst DECIDE = 8;\nconst ROTATE_SPEED = 0.005;\nconst INERTIA = 0.925;\nconst PARALLAX_MAG = 0.05;\nconst PARALLAX_EASE = 0.12;\nconst HOVER_MAG = deg2rad(6);\nconst HOVER_EASE = 0.15;\n\nconst Loader = ({ placeholderSrc }: { placeholderSrc?: string }) => {\n  const { progress, active } = useProgress();\n  if (!active && placeholderSrc) return null;\n  return (\n    <Html center>\n      {placeholderSrc ? (\n        <img src={placeholderSrc} width={128} height={128} style={{ filter: \"blur(8px)\", borderRadius: 8 }} />\n      ) : (\n        `${Math.round(progress)} %`\n      )}\n    </Html>\n  );\n};\n\nconst DesktopControls = ({ pivot, min, max, zoomEnabled }: { pivot: THREE.Vector3; min: number; max: number; zoomEnabled: boolean }) => {\n  const ref = useRef<any>(null);\n  useFrame(() => ref.current?.target.copy(pivot));\n  return (\n    <OrbitControls\n      ref={ref}\n      makeDefault\n      enablePan={false}\n      enableRotate={false}\n      enableZoom={zoomEnabled}\n      minDistance={min}\n      maxDistance={max}\n    />\n  );\n};\n\ntype ModelInnerProps = {\n  url: string;\n  xOff: number;\n  yOff: number;\n  pivot: THREE.Vector3;\n  initYaw: number;\n  initPitch: number;\n  minZoom: number;\n  maxZoom: number;\n  enableMouseParallax: boolean;\n  enableManualRotation: boolean;\n  enableHoverRotation: boolean;\n  enableManualZoom: boolean;\n  autoFrame: boolean;\n  fadeIn: boolean;\n  autoRotate: boolean;\n  autoRotateSpeed: number;\n  onLoaded?: () => void;\n};\n\nconst ModelInner = ({\n  url,\n  xOff,\n  yOff,\n  pivot,\n  initYaw,\n  initPitch,\n  minZoom,\n  maxZoom,\n  enableMouseParallax,\n  enableManualRotation,\n  enableHoverRotation,\n  enableManualZoom,\n  autoFrame,\n  fadeIn,\n  autoRotate,\n  autoRotateSpeed,\n  onLoaded,\n}: ModelInnerProps) => {\n  const outer = useRef<THREE.Group>(null);\n  const inner = useRef<THREE.Group>(null);\n  const { camera, gl } = useThree();\n\n  const vel = useRef({ x: 0, y: 0 });\n  const tPar = useRef({ x: 0, y: 0 });\n  const cPar = useRef({ x: 0, y: 0 });\n  const tHov = useRef({ x: 0, y: 0 });\n  const cHov = useRef({ x: 0, y: 0 });\n\n  const ext = useMemo(() => url.split(\".\").pop()?.toLowerCase() ?? \"\", [url]);\n  const content = useMemo(() => {\n    if (ext === \"glb\" || ext === \"gltf\") return useGLTF(url).scene.clone();\n    if (ext === \"fbx\") return useFBX(url).clone();\n    if (ext === \"obj\") return useLoader(OBJLoader, url).clone();\n    console.error(\"Unsupported format:\", ext);\n    return null;\n  }, [url, ext]);\n\n  const pivotW = useRef(new THREE.Vector3());\n  useLayoutEffect(() => {\n    if (!content || !outer.current || !inner.current) return;\n    const g = inner.current;\n    g.updateWorldMatrix(true, true);\n\n    const sphere = new THREE.Box3().setFromObject(g).getBoundingSphere(new THREE.Sphere());\n    const s = 1 / (sphere.radius * 2);\n    g.position.set(-sphere.center.x, -sphere.center.y, -sphere.center.z);\n    g.scale.setScalar(s);\n\n    g.traverse((o: any) => {\n      if (o.isMesh) {\n        o.castShadow = true;\n        o.receiveShadow = true;\n        if (fadeIn) {\n          o.material.transparent = true;\n          o.material.opacity = 0;\n        }\n      }\n    });\n\n    g.getWorldPosition(pivotW.current);\n    pivot.copy(pivotW.current);\n    outer.current.rotation.set(initPitch, initYaw, 0);\n\n    if (autoFrame && camera instanceof THREE.PerspectiveCamera) {\n      const persp = camera;\n      const fitR = sphere.radius * s;\n      const d = (fitR * 1.2) / Math.sin((persp.fov * Math.PI) / 180 / 2);\n      persp.position.set(pivotW.current.x, pivotW.current.y, pivotW.current.z + d);\n      persp.near = d / 10;\n      persp.far = d * 10;\n      persp.updateProjectionMatrix();\n    }\n\n    if (fadeIn) {\n      let t = 0;\n      const id = window.setInterval(() => {\n        t += 0.05;\n        const v = Math.min(t, 1);\n        g.traverse((o: any) => {\n          if (o.isMesh) o.material.opacity = v;\n        });\n        invalidate();\n        if (v === 1) {\n          window.clearInterval(id);\n          onLoaded?.();\n        }\n      }, 16);\n      return () => window.clearInterval(id);\n    }\n\n    onLoaded?.();\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [content]);\n\n  useEffect(() => {\n    if (!enableManualRotation || isTouch || !outer.current) return;\n    const el = gl.domElement;\n    let drag = false;\n    let lx = 0;\n    let ly = 0;\n    const down = (e: PointerEvent) => {\n      if (e.pointerType !== \"mouse\" && e.pointerType !== \"pen\") return;\n      drag = true;\n      lx = e.clientX;\n      ly = e.clientY;\n      window.addEventListener(\"pointerup\", up);\n    };\n    const move = (e: PointerEvent) => {\n      if (!drag || !outer.current) return;\n      const dx = e.clientX - lx;\n      const dy = e.clientY - ly;\n      lx = e.clientX;\n      ly = e.clientY;\n      outer.current.rotation.y += dx * ROTATE_SPEED;\n      outer.current.rotation.x += dy * ROTATE_SPEED;\n      vel.current = { x: dx * ROTATE_SPEED, y: dy * ROTATE_SPEED };\n      invalidate();\n    };\n    const up = () => {\n      drag = false;\n      window.removeEventListener(\"pointerup\", up);\n    };\n    el.addEventListener(\"pointerdown\", down);\n    el.addEventListener(\"pointermove\", move);\n    return () => {\n      el.removeEventListener(\"pointerdown\", down);\n      el.removeEventListener(\"pointermove\", move);\n      window.removeEventListener(\"pointerup\", up);\n    };\n  }, [gl, enableManualRotation]);\n\n  useEffect(() => {\n    if (!enableManualRotation || !enableManualZoom || !outer.current || isTouch) return;\n    const el = gl.domElement;\n    const pts = new Map<number, { x: number; y: number }>();\n\n    let mode: \"idle\" | \"decide\" | \"rotate\" | \"pinch\" = \"idle\";\n    let sx = 0;\n    let sy = 0;\n    let lx = 0;\n    let ly = 0;\n    let startDist = 0;\n    let startZ = 0;\n\n    const down = (e: PointerEvent) => {\n      if (e.pointerType !== \"touch\") return;\n      pts.set(e.pointerId, { x: e.clientX, y: e.clientY });\n      if (pts.size === 1) {\n        mode = \"decide\";\n        sx = lx = e.clientX;\n        sy = ly = e.clientY;\n      } else if (pts.size === 2) {\n        mode = \"pinch\";\n        const [p1, p2] = [...pts.values()];\n        startDist = Math.hypot(p1.x - p2.x, p1.y - p2.y);\n        startZ = camera.position.z;\n        e.preventDefault();\n      }\n      invalidate();\n    };\n\n    const move = (e: PointerEvent) => {\n      const p = pts.get(e.pointerId);\n      if (!p || !outer.current) return;\n      p.x = e.clientX;\n      p.y = e.clientY;\n\n      if (mode === \"decide\") {\n        const dx = e.clientX - sx;\n        const dy = e.clientY - sy;\n        if (Math.abs(dx) > DECIDE || Math.abs(dy) > DECIDE) {\n          if (Math.abs(dx) > Math.abs(dy)) {\n            mode = \"rotate\";\n            el.setPointerCapture(e.pointerId);\n          } else {\n            mode = \"idle\";\n            pts.clear();\n          }\n        }\n      }\n\n      if (mode === \"rotate\") {\n        e.preventDefault();\n        const dx = e.clientX - lx;\n        const dy = e.clientY - ly;\n        lx = e.clientX;\n        ly = e.clientY;\n        outer.current.rotation.y += dx * ROTATE_SPEED;\n        outer.current.rotation.x += dy * ROTATE_SPEED;\n        vel.current = { x: dx * ROTATE_SPEED, y: dy * ROTATE_SPEED };\n        invalidate();\n      } else if (mode === \"pinch\" && pts.size === 2) {\n        e.preventDefault();\n        const [p1, p2] = [...pts.values()];\n        const d = Math.hypot(p1.x - p2.x, p1.y - p2.y);\n        const ratio = startDist / d;\n        camera.position.z = THREE.MathUtils.clamp(startZ * ratio, minZoom, maxZoom);\n        invalidate();\n      }\n    };\n\n    const up = (e: PointerEvent) => {\n      pts.delete(e.pointerId);\n      if (mode === \"rotate\" && pts.size === 0) mode = \"idle\";\n      if (mode === \"pinch\" && pts.size < 2) mode = \"idle\";\n    };\n\n    el.addEventListener(\"pointerdown\", down, { passive: true });\n    window.addEventListener(\"pointermove\", move, { passive: false });\n    window.addEventListener(\"pointerup\", up, { passive: true });\n    window.addEventListener(\"pointercancel\", up, { passive: true });\n    return () => {\n      el.removeEventListener(\"pointerdown\", down);\n      window.removeEventListener(\"pointermove\", move);\n      window.removeEventListener(\"pointerup\", up);\n      window.removeEventListener(\"pointercancel\", up);\n    };\n  }, [gl, enableManualRotation, enableManualZoom, minZoom, maxZoom]);\n\n  useEffect(() => {\n    if (isTouch) return;\n    const mm = (e: PointerEvent) => {\n      if (e.pointerType !== \"mouse\") return;\n      const nx = (e.clientX / window.innerWidth) * 2 - 1;\n      const ny = (e.clientY / window.innerHeight) * 2 - 1;\n      if (enableMouseParallax) tPar.current = { x: -nx * PARALLAX_MAG, y: -ny * PARALLAX_MAG };\n      if (enableHoverRotation) tHov.current = { x: ny * HOVER_MAG, y: nx * HOVER_MAG };\n      invalidate();\n    };\n    window.addEventListener(\"pointermove\", mm);\n    return () => window.removeEventListener(\"pointermove\", mm);\n  }, [enableMouseParallax, enableHoverRotation]);\n\n  useFrame((_, dt) => {\n    if (!outer.current) return;\n    let need = false;\n    cPar.current.x += (tPar.current.x - cPar.current.x) * PARALLAX_EASE;\n    cPar.current.y += (tPar.current.y - cPar.current.y) * PARALLAX_EASE;\n    const phx = cHov.current.x;\n    const phy = cHov.current.y;\n    cHov.current.x += (tHov.current.x - cHov.current.x) * HOVER_EASE;\n    cHov.current.y += (tHov.current.y - cHov.current.y) * HOVER_EASE;\n\n    const ndc = pivotW.current.clone().project(camera);\n    ndc.x += xOff + cPar.current.x;\n    ndc.y += yOff + cPar.current.y;\n    outer.current.position.copy(ndc.unproject(camera));\n\n    outer.current.rotation.x += cHov.current.x - phx;\n    outer.current.rotation.y += cHov.current.y - phy;\n\n    if (autoRotate) {\n      outer.current.rotation.y += autoRotateSpeed * dt;\n      need = true;\n    }\n\n    outer.current.rotation.y += vel.current.x;\n    outer.current.rotation.x += vel.current.y;\n    vel.current.x *= INERTIA;\n    vel.current.y *= INERTIA;\n    if (Math.abs(vel.current.x) > 1e-4 || Math.abs(vel.current.y) > 1e-4) need = true;\n\n    if (\n      Math.abs(cPar.current.x - tPar.current.x) > 1e-4 ||\n      Math.abs(cPar.current.y - tPar.current.y) > 1e-4 ||\n      Math.abs(cHov.current.x - tHov.current.x) > 1e-4 ||\n      Math.abs(cHov.current.y - tHov.current.y) > 1e-4\n    ) {\n      need = true;\n    }\n\n    if (need) invalidate();\n  });\n\n  if (!content) return null;\n  return (\n    <group ref={outer}>\n      <group ref={inner}>\n        <primitive object={content} />\n      </group>\n    </group>\n  );\n};\n\nconst ModelViewer = ({\n  url,\n  width = 400,\n  height = 400,\n  modelXOffset = 0,\n  modelYOffset = 0,\n  defaultRotationX = -50,\n  defaultRotationY = 20,\n  defaultZoom = 0.5,\n  minZoomDistance = 0.5,\n  maxZoomDistance = 10,\n  enableMouseParallax = true,\n  enableManualRotation = true,\n  enableHoverRotation = true,\n  enableManualZoom = true,\n  ambientIntensity = 0.3,\n  keyLightIntensity = 1,\n  fillLightIntensity = 0.5,\n  rimLightIntensity = 0.8,\n  environmentPreset = \"forest\",\n  autoFrame = false,\n  placeholderSrc,\n  showScreenshotButton = true,\n  fadeIn = false,\n  autoRotate = false,\n  autoRotateSpeed = 0.35,\n  onModelLoaded,\n}: ModelViewerProps) => {\n  useEffect(() => {\n    useGLTF.clear(url);\n    useGLTF.preload(url);\n    return () => {\n      useGLTF.clear(url);\n    };\n  }, [url]);\n  const pivot = useRef(new THREE.Vector3()).current;\n  const contactRef = useRef<any>(null);\n  const rendererRef = useRef<THREE.WebGLRenderer | null>(null);\n  const sceneRef = useRef<THREE.Scene | null>(null);\n  const cameraRef = useRef<THREE.Camera | null>(null);\n\n  const initYaw = deg2rad(defaultRotationX);\n  const initPitch = deg2rad(defaultRotationY);\n  const camZ = Math.min(Math.max(defaultZoom, minZoomDistance), maxZoomDistance);\n\n  const capture = () => {\n    const g = rendererRef.current;\n    const s = sceneRef.current;\n    const c = cameraRef.current;\n    if (!g || !s || !c) return;\n    g.shadowMap.enabled = false;\n    const tmp: Array<{ l: any; cast: boolean }> = [];\n    s.traverse((o: any) => {\n      if (o.isLight && \"castShadow\" in o) {\n        tmp.push({ l: o, cast: o.castShadow });\n        o.castShadow = false;\n      }\n    });\n    if (contactRef.current) contactRef.current.visible = false;\n    g.render(s, c);\n    const urlPNG = g.domElement.toDataURL(\"image/png\");\n    const a = document.createElement(\"a\");\n    a.download = \"model.png\";\n    a.href = urlPNG;\n    a.click();\n    g.shadowMap.enabled = true;\n    tmp.forEach(({ l, cast }) => {\n      l.castShadow = cast;\n    });\n    if (contactRef.current) contactRef.current.visible = true;\n    invalidate();\n  };\n\n  return (\n    <div\n      style={{\n        width,\n        height,\n        touchAction: \"pan-y pinch-zoom\",\n        position: \"relative\",\n      }}\n    >\n      {showScreenshotButton && (\n        <button\n          type=\"button\"\n          onClick={capture}\n          style={{\n            position: \"absolute\",\n            border: \"1px solid #fff\",\n            right: 16,\n            top: 16,\n            zIndex: 10,\n            cursor: \"pointer\",\n            padding: \"8px 16px\",\n            borderRadius: 10,\n            background: \"rgba(0,0,0,0.4)\",\n            color: \"white\",\n          }}\n        >\n          Take Screenshot\n        </button>\n      )}\n\n      <Canvas\n        shadows\n        frameloop=\"demand\"\n        gl={{ preserveDrawingBuffer: true }}\n        onCreated={({ gl, scene, camera }) => {\n          rendererRef.current = gl;\n          sceneRef.current = scene;\n          cameraRef.current = camera;\n          gl.toneMapping = THREE.ACESFilmicToneMapping;\n          gl.outputColorSpace = THREE.SRGBColorSpace;\n        }}\n        camera={{ fov: 50, position: [0, 0, camZ], near: 0.01, far: 100 }}\n        style={{ touchAction: \"pan-y pinch-zoom\" }}\n      >\n        {environmentPreset !== \"none\" && <Environment preset={environmentPreset as any} background={false} />}\n\n        <ambientLight intensity={ambientIntensity} />\n        <directionalLight position={[5, 5, 5]} intensity={keyLightIntensity} castShadow />\n        <directionalLight position={[-5, 2, 5]} intensity={fillLightIntensity} />\n        <directionalLight position={[0, 4, -5]} intensity={rimLightIntensity} />\n\n        <ContactShadows ref={contactRef} position={[0, -0.5, 0]} opacity={0.35} scale={10} blur={2} />\n\n        <Suspense fallback={<Loader placeholderSrc={placeholderSrc} />}>\n          <ModelInner\n            url={url}\n            xOff={modelXOffset}\n            yOff={modelYOffset}\n            pivot={pivot}\n            initYaw={initYaw}\n            initPitch={initPitch}\n            minZoom={minZoomDistance}\n            maxZoom={maxZoomDistance}\n            enableMouseParallax={enableMouseParallax}\n            enableManualRotation={enableManualRotation}\n            enableHoverRotation={enableHoverRotation}\n            enableManualZoom={enableManualZoom}\n            autoFrame={autoFrame}\n            fadeIn={fadeIn}\n            autoRotate={autoRotate}\n            autoRotateSpeed={autoRotateSpeed}\n            onLoaded={onModelLoaded}\n          />\n        </Suspense>\n\n        {!isTouch && (\n          <DesktopControls pivot={pivot} min={minZoomDistance} max={maxZoomDistance} zoomEnabled={enableManualZoom} />\n        )}\n      </Canvas>\n    </div>\n  );\n};\n\nexport default ModelViewer;\n","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\syyun\\Documents\\GitHub\\Routing_ML_251014\\frontend-prediction\\src\\components\\ParticleBackground.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\syyun\\Documents\\GitHub\\Routing_ML_251014\\frontend-prediction\\src\\components\\PredictionControls.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\syyun\\Documents\\GitHub\\Routing_ML_251014\\frontend-prediction\\src\\components\\ProfileEditor.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'useEffect' is defined but never used.","line":2,"column":10,"nodeType":"Identifier","messageId":"unusedVar","endLine":2,"endColumn":19},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":44,"column":19,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":44,"endColumn":22,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1581,1584],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1581,1584],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { Filter,Save, Search, X } from 'lucide-react';\nimport { useEffect,useState } from 'react';\n\nimport apiClient from '../lib/apiClient';\nimport type { DataMappingProfile, DataMappingRule } from '../types';\nimport { MappingRuleEditor } from './MappingRuleEditor';\n\ninterface ProfileEditorProps {\n  profile: DataMappingProfile;\n  onSave: (updatedProfile: DataMappingProfile) => void;\n  onCancel: () => void;\n}\n\nexport function ProfileEditor({ profile, onSave, onCancel }: ProfileEditorProps) {\n  const [mappings, setMappings] = useState<DataMappingRule[]>(profile.mappings || []);\n  const [searchTerm, setSearchTerm] = useState('');\n  const [sourceTypeFilter, setSourceTypeFilter] = useState<string>('all');\n  const [saving, setSaving] = useState(false);\n  const [error, setError] = useState<string | null>(null);\n\n  const filteredMappings = mappings.filter((mapping) => {\n    const matchesSearch =\n      searchTerm === '' ||\n      mapping.db_column.toLowerCase().includes(searchTerm.toLowerCase()) ||\n      mapping.routing_field.toLowerCase().includes(searchTerm.toLowerCase()) ||\n      (mapping.display_name?.toLowerCase() || '').includes(searchTerm.toLowerCase());\n\n    const matchesFilter =\n      sourceTypeFilter === 'all' || mapping.source_type === sourceTypeFilter;\n\n    return matchesSearch && matchesFilter;\n  });\n\n  const handleSave = async () => {\n    try {\n      setSaving(true);\n      setError(null);\n\n      const response = await apiClient.patch(`/data-mapping/profiles/${profile.id}`, {\n        mappings,\n      });\n\n      onSave(response.data);\n    } catch (err: any) {\n      console.error('Failed to save profile:', err);\n      setError(err.response?.data?.detail || 'Failed to save profile');\n    } finally {\n      setSaving(false);\n    }\n  };\n\n  const handleUpdateMapping = (index: number, updatedMapping: DataMappingRule) => {\n    const newMappings = [...mappings];\n    newMappings[index] = updatedMapping;\n    setMappings(newMappings);\n  };\n\n  const sourceTypeCounts = {\n    all: mappings.length,\n    ml_prediction: mappings.filter((m) => m.source_type === 'ml_prediction').length,\n    admin_input: mappings.filter((m) => m.source_type === 'admin_input').length,\n    external_source: mappings.filter((m) => m.source_type === 'external_source').length,\n    constant: mappings.filter((m) => m.source_type === 'constant').length,\n  };\n\n  return (\n    <div className=\"bg-white rounded-lg shadow-sm border border-gray-200 p-6\">\n      {/* Header */}\n      <div className=\"flex items-center justify-between mb-6\">\n        <div>\n          <h2 className=\"text-xl font-semibold text-gray-900\">{profile.name}</h2>\n          {profile.description && (\n            <p className=\"text-sm text-gray-600 mt-1\">{profile.description}</p>\n          )}\n        </div>\n        <div className=\"flex gap-2\">\n          <button\n            onClick={handleSave}\n            disabled={saving}\n            className=\"flex items-center gap-2 px-4 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700 transition-colors disabled:opacity-50 disabled:cursor-not-allowed\"\n          >\n            <Save size={18} />\n            {saving ? 'Saving...' : 'Save Changes'}\n          </button>\n          <button\n            onClick={onCancel}\n            className=\"flex items-center gap-2 px-4 py-2 bg-gray-200 text-gray-700 rounded-lg hover:bg-gray-300 transition-colors\"\n          >\n            <X size={18} />\n            Cancel\n          </button>\n        </div>\n      </div>\n\n      {error && (\n        <div className=\"mb-4 p-3 bg-red-50 border border-red-200 rounded-lg text-red-700 text-sm\">\n          {error}\n        </div>\n      )}\n\n      {/* Filters */}\n      <div className=\"mb-6 space-y-4\">\n        {/* Search */}\n        <div className=\"relative\">\n          <Search\n            size={20}\n            className=\"absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400\"\n          />\n          <input\n            type=\"text\"\n            value={searchTerm}\n            onChange={(e) => setSearchTerm(e.target.value)}\n            placeholder=\"Search by field name, db column, or display name...\"\n            className=\"w-full pl-10 pr-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500\"\n          />\n        </div>\n\n        {/* Source Type Filter */}\n        <div className=\"flex items-center gap-2\">\n          <Filter size={18} className=\"text-gray-500\" />\n          <span className=\"text-sm font-medium text-gray-700\">Filter by source:</span>\n          <div className=\"flex gap-2\">\n            {[\n              { value: 'all', label: 'All', color: 'gray' },\n              { value: 'ml_prediction', label: 'ML Prediction', color: 'blue' },\n              { value: 'admin_input', label: 'Admin Input', color: 'green' },\n              { value: 'external_source', label: 'External Source', color: 'purple' },\n              { value: 'constant', label: 'Constant', color: 'yellow' },\n            ].map((filter) => (\n              <button\n                key={filter.value}\n                onClick={() => setSourceTypeFilter(filter.value)}\n                className={`\n                  px-3 py-1 rounded-lg text-sm font-medium transition-colors\n                  ${\n                    sourceTypeFilter === filter.value\n                      ? `bg-${filter.color}-100 text-${filter.color}-700 border-${filter.color}-300 border`\n                      : 'bg-gray-100 text-gray-600 hover:bg-gray-200'\n                  }\n                `}\n              >\n                {filter.label} ({sourceTypeCounts[filter.value as keyof typeof sourceTypeCounts]})\n              </button>\n            ))}\n          </div>\n        </div>\n      </div>\n\n      {/* Summary Stats */}\n      <div className=\"mb-4 p-4 bg-gray-50 rounded-lg\">\n        <div className=\"grid grid-cols-5 gap-4 text-sm\">\n          <div>\n            <span className=\"text-gray-600\">Total Fields:</span>\n            <span className=\"ml-2 font-semibold text-gray-900\">{mappings.length}</span>\n          </div>\n          <div>\n            <span className=\"text-gray-600\">ML Prediction:</span>\n            <span className=\"ml-2 font-semibold text-blue-600\">\n              {sourceTypeCounts.ml_prediction}\n            </span>\n          </div>\n          <div>\n            <span className=\"text-gray-600\">Admin Input:</span>\n            <span className=\"ml-2 font-semibold text-green-600\">\n              {sourceTypeCounts.admin_input}\n            </span>\n          </div>\n          <div>\n            <span className=\"text-gray-600\">External Source:</span>\n            <span className=\"ml-2 font-semibold text-purple-600\">\n              {sourceTypeCounts.external_source}\n            </span>\n          </div>\n          <div>\n            <span className=\"text-gray-600\">Constant:</span>\n            <span className=\"ml-2 font-semibold text-yellow-600\">\n              {sourceTypeCounts.constant}\n            </span>\n          </div>\n        </div>\n      </div>\n\n      {/* Mapping Rules List */}\n      <div className=\"space-y-2 max-h-[600px] overflow-y-auto\">\n        {filteredMappings.length === 0 ? (\n          <div className=\"text-center py-8 text-gray-500\">\n            No fields match your search criteria.\n          </div>\n        ) : (\n          filteredMappings.map((mapping, index) => {\n            const originalIndex = mappings.findIndex(\n              (m) => m.db_column === mapping.db_column && m.routing_field === mapping.routing_field\n            );\n            return (\n              <MappingRuleEditor\n                key={`${mapping.db_column}-${mapping.routing_field}-${index}`}\n                mapping={mapping}\n                onUpdate={(updated) => handleUpdateMapping(originalIndex, updated)}\n              />\n            );\n          })\n        )}\n      </div>\n\n      {/* Footer Info */}\n      <div className=\"mt-6 pt-4 border-t border-gray-200 text-sm text-gray-600\">\n        <p>\n          Showing {filteredMappings.length} of {mappings.length} fields\n        </p>\n      </div>\n    </div>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\syyun\\Documents\\GitHub\\Routing_ML_251014\\frontend-prediction\\src\\components\\ProfileManagement.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":61,"column":19,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":61,"endColumn":22,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1915,1918],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1915,1918],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":75,"column":19,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":75,"endColumn":22,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2374,2377],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2374,2377],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { Edit2, Plus, Save, Trash2, X } from 'lucide-react';\nimport { useEffect,useState } from 'react';\n\nimport apiClient from '../lib/apiClient';\nimport type { DataMappingProfile } from '../types';\n\ninterface ProfileManagementProps {\n  onSelectProfile?: (profile: DataMappingProfile) => void;\n  selectedProfileId?: string;\n}\n\nexport function ProfileManagement({ onSelectProfile, selectedProfileId }: ProfileManagementProps) {\n  const [profiles, setProfiles] = useState<DataMappingProfile[]>([]);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState<string | null>(null);\n  const [isCreating, setIsCreating] = useState(false);\n  const [newProfileName, setNewProfileName] = useState('');\n  const [newProfileDesc, setNewProfileDesc] = useState('');\n\n  useEffect(() => {\n    loadProfiles();\n  }, []);\n\n  const loadProfiles = async () => {\n    try {\n      setLoading(true);\n      setError(null);\n      const response = await apiClient.get('/data-mapping/profiles');\n      setProfiles(response.data.profiles || []);\n    } catch (err) {\n      console.error('Failed to load profiles:', err);\n      setError('Failed to load profiles');\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const handleCreateProfile = async () => {\n    if (!newProfileName.trim()) {\n      setError('Profile name is required');\n      return;\n    }\n\n    try {\n      setError(null);\n      const response = await apiClient.post('/data-mapping/profiles', {\n        name: newProfileName.trim(),\n        description: newProfileDesc.trim() || undefined,\n        mappings: [], // Empty mappings, will be edited later\n      });\n\n      setProfiles([response.data, ...profiles]);\n      setIsCreating(false);\n      setNewProfileName('');\n      setNewProfileDesc('');\n\n      // Automatically select the newly created profile\n      if (onSelectProfile) {\n        onSelectProfile(response.data);\n      }\n    } catch (err: any) {\n      console.error('Failed to create profile:', err);\n      setError(err.response?.data?.detail || 'Failed to create profile');\n    }\n  };\n\n  const handleDeleteProfile = async (profileId: string) => {\n    if (!confirm('Are you sure you want to delete this profile?')) {\n      return;\n    }\n\n    try {\n      await apiClient.delete(`/data-mapping/profiles/${profileId}`);\n      setProfiles(profiles.filter((p) => p.id !== profileId));\n    } catch (err: any) {\n      console.error('Failed to delete profile:', err);\n      setError(err.response?.data?.detail || 'Failed to delete profile');\n    }\n  };\n\n  if (loading) {\n    return (\n      <div className=\"flex items-center justify-center p-8\">\n        <div className=\"text-gray-500\">Loading profiles...</div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"bg-white rounded-lg shadow-sm border border-gray-200 p-6\">\n      <div className=\"flex items-center justify-between mb-6\">\n        <h2 className=\"text-xl font-semibold text-gray-900\">Data Mapping Profiles</h2>\n        {!isCreating && (\n          <button\n            onClick={() => setIsCreating(true)}\n            className=\"flex items-center gap-2 px-4 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700 transition-colors\"\n          >\n            <Plus size={20} />\n            New Profile\n          </button>\n        )}\n      </div>\n\n      {error && (\n        <div className=\"mb-4 p-3 bg-red-50 border border-red-200 rounded-lg text-red-700 text-sm\">\n          {error}\n        </div>\n      )}\n\n      {/* Create Profile Form */}\n      {isCreating && (\n        <div className=\"mb-6 p-4 bg-gray-50 border border-gray-200 rounded-lg\">\n          <h3 className=\"text-lg font-medium text-gray-900 mb-4\">Create New Profile</h3>\n          <div className=\"space-y-4\">\n            <div>\n              <label className=\"block text-sm font-medium text-gray-700 mb-1\">\n                Profile Name *\n              </label>\n              <input\n                type=\"text\"\n                value={newProfileName}\n                onChange={(e) => setNewProfileName(e.target.value)}\n                placeholder=\"e.g., FKSM Production Profile\"\n                className=\"w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500\"\n              />\n            </div>\n            <div>\n              <label className=\"block text-sm font-medium text-gray-700 mb-1\">\n                Description\n              </label>\n              <textarea\n                value={newProfileDesc}\n                onChange={(e) => setNewProfileDesc(e.target.value)}\n                placeholder=\"Optional description...\"\n                rows={3}\n                className=\"w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500\"\n              />\n            </div>\n            <div className=\"flex gap-2\">\n              <button\n                onClick={handleCreateProfile}\n                className=\"flex items-center gap-2 px-4 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700 transition-colors\"\n              >\n                <Save size={18} />\n                Create\n              </button>\n              <button\n                onClick={() => {\n                  setIsCreating(false);\n                  setNewProfileName('');\n                  setNewProfileDesc('');\n                  setError(null);\n                }}\n                className=\"flex items-center gap-2 px-4 py-2 bg-gray-200 text-gray-700 rounded-lg hover:bg-gray-300 transition-colors\"\n              >\n                <X size={18} />\n                Cancel\n              </button>\n            </div>\n          </div>\n        </div>\n      )}\n\n      {/* Profile List */}\n      <div className=\"space-y-3\">\n        {profiles.length === 0 ? (\n          <div className=\"text-center py-8 text-gray-500\">\n            No profiles found. Create one to get started.\n          </div>\n        ) : (\n          profiles.map((profile) => (\n            <div\n              key={profile.id}\n              className={`\n                p-4 border rounded-lg transition-all cursor-pointer\n                ${\n                  selectedProfileId === profile.id\n                    ? 'border-blue-500 bg-blue-50'\n                    : 'border-gray-200 hover:border-gray-300 hover:bg-gray-50'\n                }\n              `}\n              onClick={() => onSelectProfile?.(profile)}\n            >\n              <div className=\"flex items-start justify-between\">\n                <div className=\"flex-1\">\n                  <h3 className=\"font-medium text-gray-900\">{profile.name}</h3>\n                  {profile.description && (\n                    <p className=\"text-sm text-gray-600 mt-1\">{profile.description}</p>\n                  )}\n                  <div className=\"flex items-center gap-4 mt-2 text-xs text-gray-500\">\n                    <span>{profile.mappings.length} fields</span>\n                    <span>Created: {new Date(profile.created_at).toLocaleDateString()}</span>\n                    {!profile.is_active && (\n                      <span className=\"px-2 py-1 bg-gray-200 text-gray-700 rounded\">\n                        Inactive\n                      </span>\n                    )}\n                  </div>\n                </div>\n                <div className=\"flex items-center gap-2 ml-4\">\n                  <button\n                    onClick={(e) => {\n                      e.stopPropagation();\n                      onSelectProfile?.(profile);\n                    }}\n                    className=\"p-2 text-blue-600 hover:bg-blue-100 rounded-lg transition-colors\"\n                    title=\"Edit profile\"\n                  >\n                    <Edit2 size={18} />\n                  </button>\n                  <button\n                    onClick={(e) => {\n                      e.stopPropagation();\n                      handleDeleteProfile(profile.id);\n                    }}\n                    className=\"p-2 text-red-600 hover:bg-red-100 rounded-lg transition-colors\"\n                    title=\"Delete profile\"\n                  >\n                    <Trash2 size={18} />\n                  </button>\n                </div>\n              </div>\n            </div>\n          ))\n        )}\n      </div>\n    </div>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\syyun\\Documents\\GitHub\\Routing_ML_251014\\frontend-prediction\\src\\components\\ResponsiveNavigationDrawer.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\syyun\\Documents\\GitHub\\Routing_ML_251014\\frontend-prediction\\src\\components\\RoutingGroupControls.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'Save' is defined but never used.","line":8,"column":26,"nodeType":"Identifier","messageId":"unusedVar","endLine":8,"endColumn":30},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":750,"column":24,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":750,"endColumn":27,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[25512,25515],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[25512,25515],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":757,"column":27,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":757,"endColumn":30,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[25791,25794],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[25791,25794],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":914,"column":46,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":914,"endColumn":49,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[33069,33072],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[33069,33072],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":933,"column":42,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":933,"endColumn":45,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[33627,33630],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[33627,33630],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useCallback has an unnecessary dependency: 'triggerRoutingInterface'. Either exclude it or remove the dependency array. Outer scope values like 'triggerRoutingInterface' aren't valid dependencies because mutating them doesn't re-render the component.","line":1169,"column":5,"nodeType":"ArrayExpression","endLine":1180,"endColumn":6,"suggestions":[{"desc":"Update the dependencies array to be: [buildExportDataset, format, groupName, refreshGroups, saveGroup, timelineLength, erpRequired, setGroupName, setStatus]","fix":{"range":[41973,42184],"text":"[buildExportDataset, format, groupName, refreshGroups, saveGroup, timelineLength, erpRequired, setGroupName, setStatus]"}}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'handleSave' is assigned a value but never used.","line":1427,"column":9,"nodeType":"Identifier","messageId":"unusedVar","endLine":1427,"endColumn":19},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":1670,"column":40,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":1670,"endColumn":43,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[57694,57697],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[57694,57697],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":7,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import type { RoutingGroupSummary, TimelineStepMetadata } from \"@app-types/routing\";\nimport { useRoutingGroups } from \"@hooks/useRoutingGroups\";\nimport { useWorkflowConfig } from \"@hooks/useWorkflowConfig\";\nimport { fetchWorkspaceSettings, postUiAudit, triggerRoutingInterface } from \"@lib/apiClient\";\nimport { type TimelineStep,useRoutingStore } from \"@store/routingStore\";\nimport { type OutputMappingRow, useWorkspaceStore } from \"@store/workspaceStore\";\nimport axios from \"axios\";\nimport { Download, Play, Save, Settings, Upload } from \"lucide-react\";\nimport type { ChangeEvent, CSSProperties } from \"react\";\nimport { useCallback, useEffect, useId, useMemo, useState } from \"react\";\n\nimport { SaveButtonDropdown } from \"./SaveButtonDropdown\";\n\ninterface ConfirmationModalProps {\n  open: boolean;\n  title: string;\n  description: string;\n  confirmLabel: string;\n  cancelLabel?: string;\n  busy?: boolean;\n  onConfirm: () => void;\n  onCancel: () => void;\n}\n\nconst modalOverlayStyle: CSSProperties = {\n  position: \"fixed\",\n  inset: 0,\n  background: \"var(--surface-overlay)\",\n  display: \"flex\",\n  alignItems: \"center\",\n  justifyContent: \"center\",\n  backdropFilter: \"blur(6px)\",\n  zIndex: 1000,\n};\n\nconst modalCardStyle: CSSProperties = {\n  width: \"min(420px, 90vw)\",\n  borderRadius: \"var(--layout-radius)\",\n  background: \"var(--surface-card)\",\n  boxShadow: \"var(--shadow-focus)\",\n  border: \"1px solid var(--border-strong)\",\n  padding: \"1.5rem\",\n  color: \"var(--text-primary)\",\n  display: \"flex\",\n  flexDirection: \"column\",\n  gap: \"1rem\",\n};\n\nconst modalHeadingStyle: CSSProperties = {\n  fontFamily: \"var(--font-family)\",\n  color: \"var(--text-heading)\",\n  fontSize: \"1.1rem\",\n  fontWeight: 600,\n  margin: 0,\n};\n\nconst modalBodyStyle: CSSProperties = {\n  color: \"var(--text-muted)\",\n  fontSize: \"0.95rem\",\n  lineHeight: 1.5,\n};\n\nconst modalActionsStyle: CSSProperties = {\n  display: \"flex\",\n  justifyContent: \"flex-end\",\n  gap: \"0.75rem\",\n};\n\nfunction ConfirmationModal({\n  open,\n  title,\n  description,\n  confirmLabel,\n  cancelLabel = \"취소\",\n  busy = false,\n  onConfirm,\n  onCancel,\n}: ConfirmationModalProps) {\n  const headingId = useId();\n  useEffect(() => {\n    if (!open) {\n      return;\n    }\n    if (typeof window === \"undefined\") {\n      return;\n    }\n    const handleKeyDown = (event: KeyboardEvent) => {\n      if (event.key === \"Escape\") {\n        event.preventDefault();\n        onCancel();\n      }\n    };\n    window.addEventListener(\"keydown\", handleKeyDown);\n    return () => {\n      window.removeEventListener(\"keydown\", handleKeyDown);\n    };\n  }, [open, onCancel]);\n\n  if (!open) {\n    return null;\n  }\n\n  return (\n    <div style={modalOverlayStyle} role=\"presentation\" onClick={() => onCancel()}>\n      <div\n        style={modalCardStyle}\n        role=\"dialog\"\n        aria-modal=\"true\"\n        aria-labelledby={headingId}\n        aria-live=\"assertive\"\n        onClick={(event) => event.stopPropagation()}\n      >\n        <h3 id={headingId} style={modalHeadingStyle}>\n          {title}\n        </h3>\n        <p style={modalBodyStyle}>{description}</p>\n        <div style={modalActionsStyle}>\n          <button\n            type=\"button\"\n            className=\"secondary-button\"\n            onClick={onCancel}\n            disabled={busy}\n          >\n            {cancelLabel}\n          </button>\n          <button\n            type=\"button\"\n            className=\"primary-button\"\n            onClick={onConfirm}\n            disabled={busy}\n          >\n            {busy ? \"처리 중...\" : confirmLabel}\n          </button>\n        </div>\n      </div>\n    </div>\n  );\n}\n\nconst FILE_FORMATS = [\"CSV\", \"XML\", \"JSON\", \"Excel\", \"ACCESS\"] as const;\ntype FileFormat = (typeof FILE_FORMATS)[number];\ntype Destination = \"local\" | \"clipboard\" | \"server\";\n\nexport const ROUTING_SAVE_CONTROL_IDS = {\n  primary: \"routing-save-primary\",\n  localShortcut: \"routing-save-local\",\n  clipboardShortcut: \"routing-save-clipboard\",\n  interface: \"routing-trigger-interface\",\n} as const;\n\ninterface RoutingGroupControlsProps {\n  variant?: \"panel\" | \"embedded\";\n}\n\nconst DESTINATION_OPTIONS: Array<{ value: Destination; label: string }> = [\n  { value: \"server\", label: \"Server\" },\n  { value: \"local\", label: \"Local\" },\n  { value: \"clipboard\", label: \"Clipboard\" },\n];\n\nconst COLUMN_TYPE_OPTIONS: Array<{ value: string; label: string }> = [\n  { value: \"string\", label: \"Text\" },\n  { value: \"number\", label: \"Number\" },\n  { value: \"boolean\", label: \"Boolean\" },\n  { value: \"date\", label: \"Date/Time\" },\n];\n\nconst FORMAT_CAPABILITIES: Record<FileFormat, { local: boolean; clipboard: boolean; extension: string; mime: string }> = {\n  CSV: { local: true, clipboard: true, extension: \"csv\", mime: \"text/csv;charset=utf-8\" },\n  XML: { local: true, clipboard: true, extension: \"xml\", mime: \"application/xml;charset=utf-8\" },\n  JSON: { local: true, clipboard: true, extension: \"json\", mime: \"application/json\" },\n  Excel: { local: true, clipboard: false, extension: \"xls\", mime: \"application/vnd.ms-excel\" },\n  ACCESS: { local: false, clipboard: false, extension: \"accdb\", mime: \"application/octet-stream\" },\n};\n\nconst NEWLINE = \"\\n\";\nconst CSV_BOM = String.fromCharCode(0xfeff);\n\nconst sanitizeFileName = (value: string) => {\n  const fallback = \"routing-group\";\n  const trimmed = value.trim();\n  const cleaned = trimmed.replace(/[^a-zA-Z0-9_.-]+/g, \"_\");\n  return cleaned.length > 0 ? cleaned.slice(0, 80) : fallback;\n};\n\nconst csvEscape = (value: unknown) => {\n  const text = value === null || value === undefined ? \"\" : String(value);\n  if (/[\",\\n]/.test(text)) {\n    return `\"${text.replace(/\"/g, '\"\"')}\"`;\n  }\n  return text;\n};\n\nconst xmlEscape = (value: unknown) => {\n  const text = value === null || value === undefined ? \"\" : String(value);\n  return text\n    .replace(/&/g, \"&amp;\")\n    .replace(/</g, \"&lt;\")\n    .replace(/>/g, \"&gt;\")\n    .replace(/\"/g, \"&quot;\")\n    .replace(/'/g, \"&apos;\");\n};\n\nconst cloneTimelineMetadata = (metadata?: TimelineStepMetadata | null): TimelineStepMetadata | null => {\n  if (!metadata) {\n    return null;\n  }\n  const sqlValues = metadata.sqlValues ? { ...metadata.sqlValues } : undefined;\n  const extra = metadata.extra ? { ...metadata.extra } : undefined;\n  return {\n    ...metadata,\n    sqlValues,\n    extra,\n  };\n};\n\nconst createLocalMappingRow = (initial?: Partial<OutputMappingRow>): OutputMappingRow => ({\n  id: initial?.id ?? \"\",\n  source: initial?.source ?? \"\",\n  mapped: initial?.mapped ?? initial?.source ?? \"\",\n  type: initial?.type ?? \"string\",\n  required: initial?.required ?? false,\n  defaultValue: initial?.defaultValue ?? \"\",\n});\n\nexport function RoutingGroupControls({ variant = \"panel\" }: RoutingGroupControlsProps = {}) {\n  const [groupName, setGroupName] = useState(\"\");\n  const [groups, setGroups] = useState<RoutingGroupSummary[]>([]);\n  const [listing, setListing] = useState(false);\n  const [status, setStatus] = useState<{ variant: \"success\" | \"error\" | \"info\"; text: string } | null>(null);\n  const [format, setFormat] = useState<FileFormat>(\"CSV\");\n  const [destination, setDestination] = useState<Destination>(\"server\");\n  const [loadId, setLoadId] = useState(\"\");\n  const [exporting, setExporting] = useState(false);\n  const [pendingAction, setPendingAction] = useState<null | \"server\" | \"interface\">(null);\n  const [confirmBusy, setConfirmBusy] = useState(false);\n\n  const { data: workflowConfig } = useWorkflowConfig();\n  const mappingRows = useWorkspaceStore((state) => state.outputMappings);\n  const setOutputMappings = useWorkspaceStore((state) => state.setOutputMappings);\n  const updateOutputMappings = useWorkspaceStore((state) => state.updateOutputMappings);\n  const reorderOutputMappings = useWorkspaceStore((state) => state.reorderOutputMappings);\n  const [selectedProfile, setSelectedProfile] = useState<string | null>(null);\n  const [selectedColumns, setSelectedColumns] = useState<string[]>([]);\n  const [selectedRoutingSet, setSelectedRoutingSet] = useState<string>(\"\");\n  const [selectedVariantCode, setSelectedVariantCode] = useState<string>(\"\");\n  const [selectedPrimaryRouting, setSelectedPrimaryRouting] = useState<string>(\"\");\n  const [selectedSecondaryRouting, setSelectedSecondaryRouting] = useState<string>(\"\");\n\n  const saving = useRoutingStore((state) => state.saving);\n  const timeline = useRoutingStore((state) => state.timeline);\n  const timelineLength = timeline.length;\n  const erpRequired = useRoutingStore((state) => state.erpRequired);\n  const setERPRequired = useRoutingStore((state) => state.setERPRequired);\n  const sourceItemCodes = useRoutingStore((state) => state.sourceItemCodes);\n  const activeGroupName = useRoutingStore((state) => state.activeGroupName);\n  const routingMatrixDefinitions = useRoutingStore((state) => state.routingMatrixDefinitions);\n  const processGroups = useRoutingStore((state) => state.processGroups);\n  const activeProcessGroupId = useRoutingStore((state) => state.activeProcessGroupId);\n  const setActiveProcessGroup = useRoutingStore((state) => state.setActiveProcessGroup);\n\n  const { saveGroup, loadGroup, fetchGroups } = useRoutingGroups();\n\n  const resolveRoutingSetCode = useCallback(\n    (step: TimelineStep): string | null => step.routingSetCode ?? step.metadata?.routingSetCode ?? null,\n    [],\n  );\n  const resolveVariantCode = useCallback(\n    (step: TimelineStep): string | null => step.variantCode ?? step.metadata?.variantCode ?? null,\n    [],\n  );\n  const resolvePrimaryRoutingCode = useCallback(\n    (step: TimelineStep): string | null =>\n      step.primaryRoutingCode ?? step.metadata?.primaryRoutingCode ?? null,\n    [],\n  );\n  const resolveSecondaryRoutingCode = useCallback(\n    (step: TimelineStep): string | null =>\n      step.secondaryRoutingCode ?? step.metadata?.secondaryRoutingCode ?? null,\n    [],\n  );\n\n  const refreshGroups = useCallback(async () => {\n    setListing(true);\n    try {\n      const response = await fetchGroups({ limit: 20, offset: 0 });\n      setGroups(response.items);\n    } catch (error) {\n      console.error(\"Failed to fetch routing groups\", error);\n      setStatus({ variant: \"error\", text: \"그룹 목록을 불러오는 데 실패했습니다.\" });\n    } finally {\n      setListing(false);\n    }\n  }, [fetchGroups]);\n\n  useEffect(() => {\n    void refreshGroups();\n  }, [refreshGroups]);\n\n  useEffect(() => {\n    let cancelled = false;\n    async function syncErpOption() {\n      try {\n        const settings = await fetchWorkspaceSettings();\n        if (cancelled) return;\n        const erpEnabled = Boolean(\n          (settings.options?.erp_interface as boolean | undefined) ??\n            (settings.export?.erp_interface_enabled as boolean | undefined),\n        );\n        setERPRequired(erpEnabled);\n      } catch (error) {\n        console.warn(\"Failed to load ERP interface option\", error);\n      }\n    }\n    void syncErpOption();\n    return () => {\n      cancelled = true;\n    };\n  }, [setERPRequired]);\n\n  useEffect(() => {\n    if (!workflowConfig?.sql) {\n      return;\n    }\n    const profiles = workflowConfig.sql.profiles ?? [];\n    const activeName = workflowConfig.sql.active_profile || profiles[0]?.name || null;\n    setSelectedProfile((prev) => prev ?? activeName);\n  }, [workflowConfig?.sql]);\n\n  useEffect(() => {\n    if (!selectedProfile || !workflowConfig?.sql) {\n      return;\n    }\n    if (mappingRows.length > 0) {\n      return;\n    }\n    const profile = workflowConfig.sql.profiles.find((item) => item.name === selectedProfile);\n    if (!profile) {\n      return;\n    }\n    const rows = Object.entries(profile.mapping ?? {}).map(([source, target]) =>\n      createLocalMappingRow({ source, mapped: target }),\n    );\n    if (rows.length > 0) {\n      setOutputMappings(rows);\n    }\n  }, [selectedProfile, workflowConfig?.sql, mappingRows.length, setOutputMappings]);\n\n  const collectItemCodes = useCallback(\n    (steps?: TimelineStep[]): string[] => {\n      const codes = new Set<string>();\n      (steps ?? timeline).forEach((step) => {\n        if (step.itemCode) {\n          codes.add(step.itemCode);\n        }\n      });\n      sourceItemCodes.forEach((code) => codes.add(code));\n      return Array.from(codes);\n    },\n    [timeline, sourceItemCodes],\n  );\n\n  const handleProfileSelect = useCallback(\n    (profileName: string) => {\n      const normalized = profileName || null;\n      setSelectedProfile(normalized);\n      if (!workflowConfig?.sql || !normalized) {\n        return;\n      }\n      const profile = workflowConfig.sql.profiles.find((item) => item.name === normalized);\n      if (!profile) {\n        return;\n      }\n    const rows = Object.entries(profile.mapping ?? {}).map(([source, target]) =>\n      createLocalMappingRow({ source, mapped: target }),\n    );\n      setOutputMappings(rows);\n    },\n    [setOutputMappings, workflowConfig?.sql],\n  );\n\n  const handleAppendProfile = useCallback(() => {\n    if (!selectedProfile || !workflowConfig?.sql) {\n      return;\n    }\n    const profile = workflowConfig.sql.profiles.find((item) => item.name === selectedProfile);\n    if (!profile) {\n      return;\n    }\n    const entries = Object.entries(profile.mapping ?? {});\n    if (entries.length === 0) {\n      return;\n    }\n    updateOutputMappings((rows) => {\n      const existing = new Set(rows.map((row) => row.source));\n      const additions = entries\n        .filter(([source]) => !existing.has(source))\n        .map(([source, target]) => createLocalMappingRow({ source, mapped: target }));\n      if (additions.length === 0) {\n        return rows;\n      }\n      return [...rows, ...additions];\n    });\n  }, [selectedProfile, updateOutputMappings, workflowConfig?.sql]);\n\n  const handleMappingRowChange = useCallback(\n    (id: string, patch: Partial<OutputMappingRow>) => {\n      updateOutputMappings((rows) => rows.map((row) => (row.id === id ? { ...row, ...patch } : row)));\n    },\n    [updateOutputMappings],\n  );\n\n  const handleRemoveMappingRow = useCallback(\n    (id: string) => {\n      updateOutputMappings((rows) => rows.filter((row) => row.id !== id));\n    },\n    [updateOutputMappings],\n  );\n\n  const handleAddMappingRow = useCallback(() => {\n    const defaultSource =\n      workflowConfig?.sql?.available_columns?.[0] ?? workflowConfig?.sql?.output_columns?.[0] ?? \"\";\n    updateOutputMappings((rows) => [\n      ...rows,\n      createLocalMappingRow({ source: defaultSource, mapped: defaultSource }),\n    ]);\n  }, [updateOutputMappings, workflowConfig?.sql]);\n\n  const handleAddSelectedColumns = useCallback(() => {\n    if (selectedColumns.length === 0) {\n      return;\n    }\n    updateOutputMappings((rows) => {\n      const existing = new Set(rows.map((row) => row.source));\n      const additions = selectedColumns\n        .map((column) => column.trim())\n        .filter((column) => column !== \"\" && !existing.has(column))\n        .map((column) => createLocalMappingRow({ source: column, mapped: column }));\n      if (additions.length === 0) {\n        return rows;\n      }\n      return [...rows, ...additions];\n    });\n    setSelectedColumns([]);\n  }, [selectedColumns, updateOutputMappings]);\n\n  const handleMoveMappingRow = useCallback(\n    (fromIndex: number, delta: number) => {\n      const toIndex = fromIndex + delta;\n      reorderOutputMappings(fromIndex, toIndex);\n    },\n    [reorderOutputMappings],\n  );\n\n  const handleColumnBatchChange = useCallback((event: ChangeEvent<HTMLSelectElement>) => {\n    const options = Array.from(event.target.selectedOptions).map((option) => option.value);\n    setSelectedColumns(options);\n  }, []);\n\n  const availableColumns = useMemo(() => {\n    const candidates = workflowConfig?.sql?.available_columns ?? workflowConfig?.sql?.output_columns ?? [];\n    return candidates;\n  }, [workflowConfig?.sql]);\n\n  const profileOptions = useMemo(() => {\n    return (workflowConfig?.sql?.profiles ?? []).map((profile) => ({\n      value: profile.name,\n      label: profile.description ? `${profile.name} · ${profile.description}` : profile.name,\n    }));\n  }, [workflowConfig?.sql]);\n\n  type RoutingMatrixCombo = {\n    key: string;\n    routingSetCode: string | null;\n    variantCode: string | null;\n    primaryRoutingCode: string | null;\n    secondaryRoutingCode: string | null;\n    count: number;\n  };\n\n  const timelineMatrixCombos = useMemo<RoutingMatrixCombo[]>(() => {\n    const combos = new Map<string, RoutingMatrixCombo>();\n    timeline.forEach((step) => {\n      const routingSet = resolveRoutingSetCode(step);\n      const variant = resolveVariantCode(step);\n      const primary = resolvePrimaryRoutingCode(step);\n      const secondary = resolveSecondaryRoutingCode(step);\n      const key = [routingSet ?? \"\", variant ?? \"\", primary ?? \"\", secondary ?? \"\"].join(\"::\");\n      const existing = combos.get(key);\n      if (existing) {\n        existing.count += 1;\n      } else {\n        combos.set(key, {\n          key,\n          routingSetCode: routingSet,\n          variantCode: variant,\n          primaryRoutingCode: primary,\n          secondaryRoutingCode: secondary,\n          count: 1,\n        });\n      }\n    });\n    return Array.from(combos.values()).sort((a, b) => b.count - a.count || a.key.localeCompare(b.key));\n  }, [\n    resolvePrimaryRoutingCode,\n    resolveRoutingSetCode,\n    resolveSecondaryRoutingCode,\n    resolveVariantCode,\n    timeline,\n  ]);\n\n  const configuredMatrixCombos = useMemo<RoutingMatrixCombo[]>(() => {\n    if (routingMatrixDefinitions.length === 0) {\n      return [];\n    }\n    const combos = routingMatrixDefinitions.map((definition) => {\n      let count = 0;\n      timeline.forEach((step) => {\n        const routingSet = resolveRoutingSetCode(step);\n        const variant = resolveVariantCode(step);\n        const primary = resolvePrimaryRoutingCode(step);\n        const secondary = resolveSecondaryRoutingCode(step);\n        if ((definition.routingSetCode ?? null) !== (routingSet ?? null)) {\n          return;\n        }\n        if ((definition.variantCode ?? null) !== (variant ?? null)) {\n          return;\n        }\n        if ((definition.primaryRoutingCode ?? null) !== (primary ?? null)) {\n          return;\n        }\n        if ((definition.secondaryRoutingCode ?? null) !== (secondary ?? null)) {\n          return;\n        }\n        count += 1;\n      });\n      return {\n        key: definition.id,\n        routingSetCode: definition.routingSetCode,\n        variantCode: definition.variantCode,\n        primaryRoutingCode: definition.primaryRoutingCode,\n        secondaryRoutingCode: definition.secondaryRoutingCode,\n        count,\n      } satisfies RoutingMatrixCombo;\n    });\n    return combos.sort((a, b) => b.count - a.count || a.key.localeCompare(b.key));\n  }, [\n    resolvePrimaryRoutingCode,\n    resolveRoutingSetCode,\n    resolveSecondaryRoutingCode,\n    resolveVariantCode,\n    routingMatrixDefinitions,\n    timeline,\n  ]);\n\n  const usingConfiguredMatrix = routingMatrixDefinitions.length > 0;\n\n  const effectiveMatrixCombos = useMemo<RoutingMatrixCombo[]>(\n    () => (usingConfiguredMatrix ? configuredMatrixCombos : timelineMatrixCombos),\n    [configuredMatrixCombos, timelineMatrixCombos, usingConfiguredMatrix],\n  );\n\n  const routingSetOptions = useMemo(() => {\n    const values = new Set<string>();\n    effectiveMatrixCombos.forEach((combo) => {\n      if (combo.routingSetCode) {\n        values.add(combo.routingSetCode);\n      }\n    });\n    return Array.from(values).sort();\n  }, [effectiveMatrixCombos]);\n\n  const variantOptions = useMemo(() => {\n    const values = new Set<string>();\n    effectiveMatrixCombos.forEach((combo) => {\n      if (selectedRoutingSet && combo.routingSetCode !== selectedRoutingSet) {\n        return;\n      }\n      if (combo.variantCode) {\n        values.add(combo.variantCode);\n      }\n    });\n    return Array.from(values).sort();\n  }, [effectiveMatrixCombos, selectedRoutingSet]);\n\n  const primaryRoutingOptions = useMemo(() => {\n    const values = new Set<string>();\n    effectiveMatrixCombos.forEach((combo) => {\n      if (selectedRoutingSet && combo.routingSetCode !== selectedRoutingSet) {\n        return;\n      }\n      if (selectedVariantCode && combo.variantCode !== selectedVariantCode) {\n        return;\n      }\n      if (combo.primaryRoutingCode) {\n        values.add(combo.primaryRoutingCode);\n      }\n    });\n    return Array.from(values).sort();\n  }, [effectiveMatrixCombos, selectedRoutingSet, selectedVariantCode]);\n\n  const secondaryRoutingOptions = useMemo(() => {\n    const values = new Set<string>();\n    effectiveMatrixCombos.forEach((combo) => {\n      if (selectedRoutingSet && combo.routingSetCode !== selectedRoutingSet) {\n        return;\n      }\n      if (selectedVariantCode && combo.variantCode !== selectedVariantCode) {\n        return;\n      }\n      if (selectedPrimaryRouting && combo.primaryRoutingCode !== selectedPrimaryRouting) {\n        return;\n      }\n      if (combo.secondaryRoutingCode) {\n        values.add(combo.secondaryRoutingCode);\n      }\n    });\n    return Array.from(values).sort();\n  }, [effectiveMatrixCombos, selectedPrimaryRouting, selectedRoutingSet, selectedVariantCode]);\n\n  const routingMatrixOptions = effectiveMatrixCombos;\n  const matrixSourceDescription = usingConfiguredMatrix\n    ? \"설정한 라우팅 행렬을 사용합니다.\"\n    : \"타임라인에서 자동 감지한 라우팅 행렬입니다.\";\n  const matrixEmptyMessage = usingConfiguredMatrix\n    ? \"구성된 라우팅 조합이 없습니다. 행을 추가해 주세요.\"\n    : \"타임라인에 라우팅 조합 정보가 없습니다.\";\n\n  useEffect(() => {\n    setSelectedVariantCode(\"\");\n    setSelectedPrimaryRouting(\"\");\n    setSelectedSecondaryRouting(\"\");\n  }, [selectedRoutingSet]);\n\n  useEffect(() => {\n    setSelectedPrimaryRouting(\"\");\n    setSelectedSecondaryRouting(\"\");\n  }, [selectedVariantCode]);\n\n  useEffect(() => {\n    setSelectedSecondaryRouting(\"\");\n  }, [selectedPrimaryRouting]);\n\n  const activeProcessGroup = useMemo(\n    () => processGroups.find((group) => group.id === activeProcessGroupId) ?? null,\n    [activeProcessGroupId, processGroups],\n  );\n\n  const processGroupColumnSummary = useMemo(\n    () =>\n      activeProcessGroup\n        ? activeProcessGroup.defaultColumns.map((column) => column.key).join(\", \")\n        : \"\",\n    [activeProcessGroup],\n  );\n\n  const processGroupFixedValueEntries = useMemo(\n    () => (activeProcessGroup ? Object.entries(activeProcessGroup.fixedValues) : []),\n    [activeProcessGroup],\n  );\n\n  useEffect(() => {\n    if (!activeProcessGroup) {\n      return;\n    }\n    setGroupName((previous) => {\n      if (previous.trim().length > 0) {\n        return previous;\n      }\n      return activeProcessGroup.name;\n    });\n  }, [activeProcessGroup]);\n\n  const matrixFilter = useMemo(() => {\n    const filter: {\n      routingSetCode?: string | null;\n      variantCode?: string | null;\n      primaryRoutingCode?: string | null;\n      secondaryRoutingCode?: string | null;\n    } = {};\n    if (selectedRoutingSet) {\n      filter.routingSetCode = selectedRoutingSet;\n    }\n    if (selectedVariantCode) {\n      filter.variantCode = selectedVariantCode;\n    }\n    if (selectedPrimaryRouting) {\n      filter.primaryRoutingCode = selectedPrimaryRouting;\n    }\n    if (selectedSecondaryRouting) {\n      filter.secondaryRoutingCode = selectedSecondaryRouting;\n    }\n    return Object.keys(filter).length > 0 ? filter : undefined;\n  }, [selectedPrimaryRouting, selectedRoutingSet, selectedSecondaryRouting, selectedVariantCode]);\n\n  const buildExportDataset = useCallback(\n    (\n      options?: {\n        filter?: {\n          routingSetCode?: string | null;\n          variantCode?: string | null;\n          primaryRoutingCode?: string | null;\n          secondaryRoutingCode?: string | null;\n        };\n      },\n    ) => {\n      const normalizedName = groupName.trim() || activeGroupName || \"routing-group\";\n      const generatedAt = new Date().toISOString();\n      const aliasMap = workflowConfig?.sql?.column_aliases ?? {};\n      const defaultColumns = workflowConfig?.sql?.output_columns ?? [];\n      const matrixSource = usingConfiguredMatrix ? \"configured\" : \"timeline\";\n      const matrixSummary = effectiveMatrixCombos.map((combo) => ({\n        routing_set_code: combo.routingSetCode ?? null,\n        variant_code: combo.variantCode ?? null,\n        primary_routing_code: combo.primaryRoutingCode ?? null,\n        secondary_routing_code: combo.secondaryRoutingCode ?? null,\n        step_count: combo.count,\n      }));\n      const processGroupSnapshot = activeProcessGroup\n        ? {\n            id: activeProcessGroup.id,\n            name: activeProcessGroup.name,\n            type: activeProcessGroup.type,\n            description: activeProcessGroup.description ?? null,\n            defaultColumns: activeProcessGroup.defaultColumns.map((column) => ({ ...column })),\n            fixedValues: { ...activeProcessGroup.fixedValues },\n          }\n        : null;\n      const processGroupColumnKeys = processGroupSnapshot\n        ? processGroupSnapshot.defaultColumns.map((column) => column.key).filter((key) => key.trim().length > 0)\n        : [];\n      const processGroupFixedValueLookup = new Map<string, unknown>();\n      if (processGroupSnapshot) {\n        Object.entries(processGroupSnapshot.fixedValues).forEach(([key, value]) => {\n          if (!key) {\n            return;\n          }\n          processGroupFixedValueLookup.set(key, value);\n          processGroupFixedValueLookup.set(key.toUpperCase(), value);\n          processGroupFixedValueLookup.set(key.toLowerCase(), value);\n        });\n      }\n      const effectiveMappings =\n        mappingRows.length > 0\n          ? mappingRows\n          : defaultColumns.map((column) =>\n              createLocalMappingRow({ source: column, mapped: column }),\n            );\n      const normalizedMappings = effectiveMappings\n        .map((mapping: any) => ({\n          source: mapping.source.trim(),\n          target: (mapping.mapped ?? mapping.source).trim(),\n          type: mapping.type,\n          required: mapping.required,\n          defaultValue: mapping.defaultValue?.trim() ?? \"\",\n        }))\n        .filter((mapping: any) => mapping.target !== \"\" && (mapping.source !== \"\" || mapping.defaultValue !== \"\"));\n      const fallbackColumns = [\n        \"ITEM_CD\",\n        \"CANDIDATE_ID\",\n        \"PROC_SEQ\",\n        \"PROC_CD\",\n        \"JOB_NM\",\n        \"SETUP_TIME\",\n        \"RUN_TIME\",\n        \"WAIT_TIME\",\n        \"ROUTING_SET_CODE\",\n        \"ROUTING_VARIANT\",\n        \"PRIMARY_ROUTING_CODE\",\n        \"SECONDARY_ROUTING_CODE\",\n        \"BRANCH_CODE\",\n        \"BRANCH_LABEL\",\n        \"BRANCH_PATH\",\n        \"QUEUE_TIME\",\n        \"MOVE_TIME\",\n      ];\n\n      const filter = options?.filter;\n      const matchesFilter = (step: TimelineStep): boolean => {\n        if (!filter) {\n          return true;\n        }\n        const metadata = step.metadata;\n        const routingSet = step.routingSetCode ?? metadata?.routingSetCode ?? null;\n        if (filter.routingSetCode && routingSet !== filter.routingSetCode) {\n          return false;\n        }\n        const variant = step.variantCode ?? metadata?.variantCode ?? null;\n        if (filter.variantCode && variant !== filter.variantCode) {\n          return false;\n        }\n        const primary = step.primaryRoutingCode ?? metadata?.primaryRoutingCode ?? null;\n        if (filter.primaryRoutingCode && primary !== filter.primaryRoutingCode) {\n          return false;\n        }\n        const secondary = step.secondaryRoutingCode ?? metadata?.secondaryRoutingCode ?? null;\n        if (filter.secondaryRoutingCode && secondary !== filter.secondaryRoutingCode) {\n          return false;\n        }\n        return true;\n      };\n\n      const activeTimeline = filter ? timeline.filter(matchesFilter) : timeline;\n      const columnAccumulator = new Set<string>();\n      const stepEntries: Array<{\n        sources: Record<string, unknown>;\n        summary: { [key: string]: unknown };\n      }> = [];\n\n      activeTimeline.forEach((step, index) => {\n        const metadata = cloneTimelineMetadata(step.metadata);\n        const seq = index + 1;\n        const routingSet = step.routingSetCode ?? metadata?.routingSetCode ?? null;\n        const variant = step.variantCode ?? metadata?.variantCode ?? null;\n        const primaryRouting = step.primaryRoutingCode ?? metadata?.primaryRoutingCode ?? null;\n        const secondaryRouting = step.secondaryRoutingCode ?? metadata?.secondaryRoutingCode ?? null;\n        const branchCode = step.branchCode ?? metadata?.branchCode ?? null;\n        const branchLabel = step.branchLabel ?? metadata?.branchLabel ?? null;\n        const branchPath = step.branchPath ?? metadata?.branchPath ?? null;\n        const sqlValues = step.sqlValues ?? metadata?.sqlValues ?? null;\n        if (metadata) {\n          metadata.routingSetCode = routingSet ?? null;\n          metadata.variantCode = variant ?? null;\n          metadata.primaryRoutingCode = primaryRouting ?? null;\n          metadata.secondaryRoutingCode = secondaryRouting ?? null;\n          metadata.branchCode = branchCode ?? null;\n          metadata.branchLabel = branchLabel ?? null;\n          metadata.branchPath = branchPath ?? null;\n          metadata.sqlValues = sqlValues ? { ...sqlValues } : metadata.sqlValues ?? null;\n        }\n        const resolvedSqlValues = sqlValues ? { ...sqlValues } : null;\n        const summary = {\n          seq,\n          process_code: step.processCode,\n          description: step.description ?? null,\n          duration_min: step.runTime ?? metadata?.actualRunTime ?? metadata?.machineHours ?? null,\n          setup_time: step.setupTime ?? metadata?.actualSetupTime ?? null,\n          wait_time: step.waitTime ?? metadata?.queueTime ?? null,\n          run_time: step.runTime ?? metadata?.actualRunTime ?? metadata?.machineHours ?? null,\n          queue_time: metadata?.queueTime ?? null,\n          move_time: metadata?.moveTime ?? null,\n          item_code: step.itemCode ?? null,\n          candidate_id: step.candidateId ?? null,\n          routing_set_code: routingSet ?? null,\n          variant_code: variant ?? null,\n          primary_routing_code: primaryRouting ?? null,\n          secondary_routing_code: secondaryRouting ?? null,\n          branch_code: branchCode ?? null,\n          branch_label: branchLabel ?? null,\n          branch_path: branchPath ?? null,\n          sql_values: resolvedSqlValues,\n          metadata,\n        };\n        const sources: Record<string, unknown> = {};\n        const register = (key: string, value: unknown) => {\n          const normalizedKey = key.trim();\n          if (!normalizedKey) {\n            return;\n          }\n          columnAccumulator.add(normalizedKey);\n          if (value === undefined || value === null || value === \"\") {\n            return;\n          }\n          if (!(normalizedKey in sources)) {\n            sources[normalizedKey] = value;\n          }\n        };\n        register(\"SEQ\", seq);\n        register(\"PROC_SEQ\", seq);\n        register(\"PROC_CD\", step.processCode);\n        register(\"PROC_DESC\", step.description ?? null);\n        register(\"ITEM_CD\", step.itemCode ?? null);\n        register(\"CANDIDATE_ID\", step.candidateId ?? null);\n        if (step.setupTime != null) register(\"SETUP_TIME\", step.setupTime);\n        if (step.runTime != null) register(\"RUN_TIME\", step.runTime);\n        if (step.waitTime != null) register(\"WAIT_TIME\", step.waitTime);\n        if (routingSet) register(\"ROUTING_SET_CODE\", routingSet);\n        if (variant) register(\"ROUTING_VARIANT\", variant);\n        if (primaryRouting) register(\"PRIMARY_ROUTING_CODE\", primaryRouting);\n        if (secondaryRouting) register(\"SECONDARY_ROUTING_CODE\", secondaryRouting);\n        if (branchCode) register(\"BRANCH_CODE\", branchCode);\n        if (branchLabel) register(\"BRANCH_LABEL\", branchLabel);\n        if (branchPath) register(\"BRANCH_PATH\", branchPath);\n        if (metadata) {\n          register(\"QUEUE_TIME\", metadata.queueTime ?? null);\n          register(\"MOVE_TIME\", metadata.moveTime ?? null);\n          register(\"MACH_WORKED_HOURS\", metadata.machineHours ?? null);\n          register(\"ACT_SETUP_TIME\", metadata.actualSetupTime ?? null);\n          register(\"ACT_RUN_TIME\", metadata.actualRunTime ?? null);\n          register(\"MFG_LT\", metadata.leadTime ?? null);\n          register(\"RUN_TIME_QTY\", metadata.runTimeQuantity ?? null);\n          register(\"RUN_TIME_UNIT\", metadata.runTimeUnit ?? null);\n          register(\"INSIDE_FLAG\", metadata.insideFlag ?? null);\n          register(\"RES_CD\", metadata.resourceCode ?? null);\n          register(\"RES_DIS\", metadata.resourceName ?? null);\n          register(\"TIME_UNIT\", metadata.timeUnit ?? null);\n          register(\"MILESTONE_FLG\", metadata.milestoneFlag ?? null);\n          register(\"INSP_FLG\", metadata.inspectionFlag ?? null);\n          if (metadata.sqlValues) {\n            Object.entries(metadata.sqlValues).forEach(([key, value]) => register(key, value));\n          }\n          if (metadata.extra) {\n            Object.entries(metadata.extra).forEach(([key, value]) => register(key, value));\n          }\n        }\n        if (resolvedSqlValues) {\n          Object.entries(resolvedSqlValues).forEach(([key, value]) => register(key, value));\n        }\n        stepEntries.push({ sources, summary });\n      });\n\n      const targetColumnCandidates =\n        normalizedMappings.length > 0\n          ? normalizedMappings.map((mapping: any) => mapping.target)\n          : defaultColumns;\n      const targetColumns = Array.from(\n        new Set(\n          [\n            ...targetColumnCandidates,\n            ...fallbackColumns,\n            ...Array.from(columnAccumulator),\n            ...processGroupColumnKeys,\n          ]\n            .map((column) => column.trim())\n            .filter(Boolean),\n        ),\n      );\n      if (targetColumns.length === 0) {\n        targetColumns.push(...fallbackColumns);\n      }\n\n      const mappingLookup = new Map(\n        normalizedMappings.map((mapping: any) => [mapping.target, mapping] as const),\n      );\n\n      const resolveValue = (column: string, sources: Record<string, unknown>): unknown => {\n        const direct =\n          sources[column] ?? sources[column.toUpperCase()] ?? sources[column.toLowerCase()];\n        if (direct !== undefined && direct !== null) {\n          return direct;\n        }\n        const aliasKey =\n          aliasMap[column] ?? aliasMap[column.toUpperCase()] ?? aliasMap[column.toLowerCase()];\n        if (aliasKey) {\n          const aliasValue =\n            sources[aliasKey] ??\n            sources[aliasKey.toUpperCase()] ??\n            sources[aliasKey.toLowerCase()] ??\n            null;\n          if (aliasValue !== undefined && aliasValue !== null) {\n            return aliasValue;\n          }\n        }\n        const mapping =\n          mappingLookup.get(column) ??\n          mappingLookup.get(column.toUpperCase()) ??\n          mappingLookup.get(column.toLowerCase());\n        if (mapping && mapping.defaultValue !== \"\") {\n          return mapping.defaultValue;\n        }\n        return null;\n      };\n\n      const rows = stepEntries.map(({ sources }) => {\n        const row: Record<string, unknown> = {};\n        targetColumns.forEach((column) => {\n          let resolved = resolveValue(column, sources);\n          if ((resolved === null || resolved === undefined) && processGroupSnapshot) {\n            const fallbackValue = processGroupFixedValueLookup.get(column);\n            if (fallbackValue !== undefined) {\n              resolved = fallbackValue;\n            }\n          }\n          row[column] = resolved ?? null;\n        });\n        return row;\n      });\n      const steps = stepEntries.map(({ summary }) => summary);\n\n      return {\n        groupName: normalizedName,\n        generatedAt,\n        steps,\n        itemCodes: collectItemCodes(activeTimeline),\n        erpRequired,\n        rows,\n        columns: targetColumns,\n        profile: selectedProfile,\n        mappings: normalizedMappings,\n        matrix: matrixSummary,\n        matrixSource,\n        processGroup: processGroupSnapshot,\n      };\n    }, [\n      groupName,\n      activeGroupName,\n      workflowConfig?.sql,\n      mappingRows,\n      timeline,\n      collectItemCodes,\n      erpRequired,\n      selectedProfile,\n      effectiveMatrixCombos,\n      usingConfiguredMatrix,\n      activeProcessGroup,\n    ]);\n\n  const datasetPreview = useMemo(\n    () => buildExportDataset(matrixFilter ? { filter: matrixFilter } : undefined),\n    [buildExportDataset, matrixFilter],\n  );\n  const previewRowLimit = 8;\n  const previewRows = useMemo(\n    () => datasetPreview.rows.slice(0, previewRowLimit),\n    [datasetPreview.rows],\n  );\n  const buildExportContent = useCallback(\n    (targetFormat: FileFormat, dataset: ReturnType<typeof buildExportDataset>) => {\n      const columns = dataset.columns ?? [];\n      switch (targetFormat) {\n        case \"CSV\": {\n          const header = columns.join(\",\");\n          const lines = dataset.rows.map((row) =>\n            columns.map((column) => csvEscape(row[column])).join(\",\"),\n          );\n          const content = CSV_BOM + [header, ...lines].join(NEWLINE);\n          return { content, extension: FORMAT_CAPABILITIES.CSV.extension, mime: FORMAT_CAPABILITIES.CSV.mime };\n        }\n        case \"JSON\": {\n          const content = JSON.stringify(\n            {\n              group: dataset.groupName,\n              generated_at: dataset.generatedAt,\n              erp_required: dataset.erpRequired,\n              item_codes: dataset.itemCodes,\n              columns,\n              rows: dataset.rows,\n              steps: dataset.steps,\n              profile: dataset.profile,\n              mappings: dataset.mappings,\n              routing_matrix: dataset.matrix,\n              matrix_source: dataset.matrixSource,\n              process_group: dataset.processGroup,\n            },\n            null,\n            2,\n          );\n          return { content, extension: FORMAT_CAPABILITIES.JSON.extension, mime: FORMAT_CAPABILITIES.JSON.mime };\n        }\n        case \"XML\": {\n          const rows = dataset.rows\n            .map((row, index) => {\n              const cells = columns\n                .map((column) => `    <${column}>${xmlEscape(row[column])}</${column}>`)\n                .join(NEWLINE);\n              return [`  <row index=\"${index + 1}\">`, cells, \"  </row>\"].join(NEWLINE);\n            })\n            .join(NEWLINE);\n          const content =\n            `<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n` +\n            `<routingGroup name=\"${xmlEscape(dataset.groupName)}\" generated=\"${dataset.generatedAt}\" erpRequired=\"${dataset.erpRequired}\">\n` +\n            `${rows}${NEWLINE}</routingGroup>`;\n          return { content, extension: FORMAT_CAPABILITIES.XML.extension, mime: FORMAT_CAPABILITIES.XML.mime };\n        }\n        case \"Excel\": {\n          const header = `<tr>${columns.map((column) => `<th>${xmlEscape(column)}</th>`).join(\"\")}</tr>`;\n          const rows = dataset.rows\n            .map(\n              (row) =>\n                `<tr>${columns.map((column) => `<td>${xmlEscape(row[column])}</td>`).join(\"\")}</tr>`,\n            )\n            .join(\"\");\n          const content =\n            '<!DOCTYPE html><html><head><meta charset=\"UTF-8\" /></head><body>' +\n            `<table border=\"1\">${header}${rows}</table>` +\n            '</body></html>';\n          return { content, extension: FORMAT_CAPABILITIES.Excel.extension, mime: FORMAT_CAPABILITIES.Excel.mime };\n        }\n        case \"ACCESS\":\n        default:\n          throw new Error(\"Unsupported export format for direct download.\");\n      }\n    },\n    [],\n  );\n\n  const executeServerSave = useCallback(\n    async ({\n      groupNameOverride,\n      metadata,\n      reason,\n    }: {\n      groupNameOverride?: string;\n      metadata?: Record<string, unknown>;\n      reason?: string;\n    }): Promise<boolean> => {\n      const targetName = (groupNameOverride ?? groupName).trim();\n      if (!targetName) {\n        setStatus({ variant: \"error\", text: \"그룹 이름을 입력해 주세요.\" });\n        return false;\n      }\n      if (timelineLength === 0) {\n        setStatus({ variant: \"error\", text: \"타임라인에 단계를 추가해 주세요.\" });\n        return false;\n      }\n\n      const dataset = buildExportDataset();\n      const metadataPayload = {\n        format,\n        destination: \"server\" as const,\n        item_codes: dataset.itemCodes,\n        step_count: dataset.steps.length,\n        routing_matrix: dataset.matrix,\n        matrix_source: dataset.matrixSource,\n        process_group: dataset.processGroup,\n        ...metadata,\n      };\n\n      setStatus(null);\n      const result = await saveGroup({ groupName: targetName, metadata: metadataPayload });\n      if (!result.ok) {\n        setStatus({ variant: \"error\", text: result.message });\n        return false;\n      }\n\n      setGroupName(targetName);\n      void refreshGroups();\n\n      if (!erpRequired || !result.response) {\n        setStatus({ variant: \"success\", text: result.message });\n        return true;\n      }\n\n      try {\n        const interfaceResponse = await triggerRoutingInterface({\n          groupId: result.response.group_id,\n          reason: reason ?? \"save\",\n        });\n        const parts: string[] = [];\n        if (interfaceResponse.message) {\n          parts.push(interfaceResponse.message);\n        }\n        if (interfaceResponse.erp_path) {\n          parts.push(`ERP 파일: ${interfaceResponse.erp_path}`);\n        }\n        const interfaceStatus = parts.length > 0 ? parts.join(\" · \") : \"ERP 인터페이스가 완료되었습니다.\";\n        setStatus({ variant: \"success\", text: `${result.message} ${interfaceStatus}`.trim() });\n        return true;\n      } catch (error) {\n        let message = \"ERP 인터페이스 요청에 실패했습니다.\";\n        if (axios.isAxiosError(error)) {\n          const detail = error.response?.data?.detail;\n          if (typeof detail === \"string\") {\n            message = `ERP 인터페이스 요청에 실패했습니다: ${detail}`;\n          } else if (detail) {\n            message = `ERP 인터페이스 요청에 실패했습니다: ${JSON.stringify(detail)}`;\n          } else if (error.message) {\n            message = `ERP 인터페이스 요청에 실패했습니다: ${error.message}`;\n          }\n        } else if (error instanceof Error) {\n          message = `ERP 인터페이스 요청에 실패했습니다: ${error.message}`;\n        }\n        setStatus({ variant: \"error\", text: message });\n        return false;\n      }\n    },\n    [\n      buildExportDataset,\n      format,\n      groupName,\n      refreshGroups,\n      saveGroup,\n      timelineLength,\n      erpRequired,\n      setGroupName,\n      setStatus,\n      triggerRoutingInterface,\n    ],\n  );\n\n  const handleServerSave = useCallback(\n    async (overrides?: { groupName?: string; metadata?: Record<string, unknown> }) => {\n      const triggerReason =\n        overrides?.metadata && typeof overrides.metadata.trigger === \"string\"\n          ? String(overrides.metadata.trigger)\n          : \"save\";\n      return executeServerSave({\n        groupNameOverride: overrides?.groupName,\n        metadata: overrides?.metadata ?? undefined,\n        reason: triggerReason,\n      });\n    },\n    [executeServerSave],\n  );\n\n  const performInterface = useCallback(async () => {\n    if (!erpRequired) {\n      setStatus({ variant: \"info\", text: \"옵션 메뉴에서 ERP 인터페이스를 활성화해 주세요.\" });\n      return false;\n    }\n    const ok = await executeServerSave({ metadata: { trigger: \"interface\" }, reason: \"interface\" });\n    if (ok) {\n      postUiAudit({\n        action: \"ui.routing.interface\",\n        username: \"codex\",\n        payload: {\n          format,\n          step_count: timelineLength,\n        },\n      }).catch(() => undefined);\n    }\n    return ok;\n  }, [erpRequired, executeServerSave, format, timelineLength]);\n\n  const capability = FORMAT_CAPABILITIES[format];\n  const localSupported = capability.local;\n  const clipboardSupported = capability.clipboard;\n  const disabledSave = saving || exporting || timelineLength === 0;\n\n  const formatLabel = useMemo(() => `${format} × ${destination.toUpperCase()}`, [format, destination]);\n\n  const confirmationContent = useMemo(() => {\n    if (pendingAction === \"server\") {\n      return {\n        title: \"ERP 저장을 진행할까요?\",\n        description: `선택한 설정(${formatLabel})으로 서버에 저장하면 ERP 인터페이스용 데이터가 갱신됩니다. 계속 진행하시겠습니까?`,\n        confirmLabel: \"ERP로 저장\",\n      } as const;\n    }\n    if (pendingAction === \"interface\") {\n      return {\n        title: \"ERP 인터페이스 전송\",\n        description: \"ERP 인터페이스로 즉시 전송합니다. 최근 저장 내용을 기준으로 라우팅이 배포됩니다.\",\n        confirmLabel: \"인터페이스 실행\",\n      } as const;\n    }\n    return null;\n  }, [formatLabel, pendingAction]);\n\n  const dismissConfirmation = useCallback(() => {\n    if (confirmBusy) {\n      return;\n    }\n    setPendingAction(null);\n  }, [confirmBusy]);\n\n  const confirmPendingAction = useCallback(async () => {\n    if (!pendingAction) {\n      return;\n    }\n    setConfirmBusy(true);\n    try {\n      if (pendingAction === \"server\") {\n        await handleServerSave();\n      } else {\n        await performInterface();\n      }\n    } finally {\n      setConfirmBusy(false);\n      setPendingAction(null);\n    }\n  }, [handleServerSave, pendingAction, performInterface]);\n\n  const handleLoad = async (groupId: string) => {\n    const result = await loadGroup(groupId);\n    setStatus({ variant: result.ok ? \"success\" : \"error\", text: result.message });\n    if (result.ok) {\n      setGroupName(result.detail?.group_name ?? groupName);\n    }\n  };\n\n  const handleManualLoad = async () => {\n    const trimmed = loadId.trim();\n    if (!trimmed) {\n      setStatus({ variant: \"error\", text: \"불러올 그룹 ID를 입력해 주세요.\" });\n      return;\n    }\n    await handleLoad(trimmed);\n  };\n\n  const handleFormatSelect = (next: FileFormat) => {\n    setFormat(next);\n    if (next === \"ACCESS\") {\n      setDestination(\"server\");\n      return;\n    }\n    if (!FORMAT_CAPABILITIES[next].local && destination === \"local\") {\n      setDestination(\"server\");\n    }\n    if (!FORMAT_CAPABILITIES[next].clipboard && destination === \"clipboard\") {\n      setDestination(\"server\");\n    }\n  };\n\n  const isDestinationDisabled = (value: Destination) => {\n    if (format === \"ACCESS\" && value !== \"server\") {\n      return true;\n    }\n    if (value === \"local\" && !localSupported) {\n      return true;\n    }\n    if (value === \"clipboard\" && !clipboardSupported) {\n      return true;\n    }\n    return false;\n  };\n\n  const handleLocalExport = async (): Promise<boolean> => {\n    if (!localSupported) {\n      setStatus({ variant: \"info\", text: `${format} 형식은 로컬 저장을 지원하지 않습니다.` });\n      return false;\n    }\n    if (timelineLength === 0) {\n      setStatus({ variant: \"error\", text: \"타임라인에 단계를 추가해 주세요.\" });\n      return false;\n    }\n    try {\n      setExporting(true);\n      setStatus(null);\n      const dataset = buildExportDataset();\n      const { content, extension, mime } = buildExportContent(format === \"ACCESS\" ? \"CSV\" : format, dataset);\n      const fileBase = sanitizeFileName(dataset.groupName);\n      const stamp = dataset.generatedAt.replace(/[:.]/g, \"-\");\n      const fileName = `${fileBase}-${stamp}.${extension}`;\n      const blob = new Blob([content], { type: mime });\n      const url = URL.createObjectURL(blob);\n      const link = document.createElement(\"a\");\n      link.href = url;\n      link.download = fileName;\n      document.body.appendChild(link);\n      link.click();\n      document.body.removeChild(link);\n      URL.revokeObjectURL(url);\n      setStatus({ variant: \"success\", text: `${fileName} 로 저장했습니다.` });\n      postUiAudit({\n        action: \"ui.routing.export.local\",\n        username: \"codex\",\n        payload: {\n          format,\n          destination: \"local\",\n          file_name: fileName,\n          step_count: dataset.steps.length,\n        },\n      }).catch(() => undefined);\n      return true;\n    } catch (error) {\n      console.error(\"Local export failed\", error);\n      setStatus({ variant: \"error\", text: \"로컬 저장에 실패했습니다.\" });\n      return false;\n    } finally {\n      setExporting(false);\n    }\n  };\n\n  const handleClipboardExport = async (): Promise<boolean> => {\n    if (!clipboardSupported) {\n      setStatus({ variant: \"info\", text: `${format} 형식은 클립보드 복사를 지원하지 않습니다.` });\n      return false;\n    }\n    if (typeof navigator === \"undefined\" || !navigator.clipboard?.writeText) {\n      setStatus({ variant: \"error\", text: \"이 브라우저에서는 클립보드 복사를 지원하지 않습니다.\" });\n      return false;\n    }\n    if (timelineLength === 0) {\n      setStatus({ variant: \"error\", text: \"타임라인에 단계를 추가해 주세요.\" });\n      return false;\n    }\n    try {\n      setExporting(true);\n      setStatus(null);\n      const dataset = buildExportDataset();\n      const targetFormat = format === \"Excel\" ? \"CSV\" : format;\n      const { content } = buildExportContent(targetFormat, dataset);\n      await navigator.clipboard.writeText(content);\n      setStatus({ variant: \"success\", text: `${format} 데이터를 클립보드에 복사했습니다.` });\n      postUiAudit({\n        action: \"ui.routing.export.clipboard\",\n        username: \"codex\",\n        payload: {\n          format,\n          step_count: dataset.steps.length,\n        },\n      }).catch(() => undefined);\n      return true;\n    } catch (error) {\n      console.error(\"Clipboard export failed\", error);\n      setStatus({ variant: \"error\", text: \"클립보드 복사에 실패했습니다.\" });\n      return false;\n    } finally {\n      setExporting(false);\n    }\n  };\n\n  // SaveButtonDropdown 통합 콜백\n  const handleSaveFromDropdown = async (\n    selectedFormat: FileFormat,\n    selectedDestination: \"local\" | \"clipboard\"\n  ) => {\n    // 임시로 format과 destination 상태 업데이트\n    const prevFormat = format;\n    const prevDestination = destination;\n\n    setFormat(selectedFormat);\n    setDestination(selectedDestination);\n\n    try {\n      if (selectedDestination === \"local\") {\n        const success = await handleLocalExport();\n        if (!success) {\n          throw new Error(\"로컬 저장 실패\");\n        }\n      } else if (selectedDestination === \"clipboard\") {\n        const success = await handleClipboardExport();\n        if (!success) {\n          throw new Error(\"클립보드 복사 실패\");\n        }\n      }\n    } finally {\n      // 원래 상태로 복원\n      setFormat(prevFormat);\n      setDestination(prevDestination);\n    }\n  };\n\n  const handleSave = async () => {\n    if (destination === \"local\") {\n      await handleLocalExport();\n      return;\n    }\n    if (destination === \"clipboard\") {\n      await handleClipboardExport();\n      return;\n    }\n    if (format === \"ACCESS\" && !erpRequired) {\n      setStatus({ variant: \"info\", text: \"ACCESS 저장은 ERP 인터페이스 옵션을 ON 해야 합니다.\" });\n      return;\n    }\n    if (destination === \"server\" && (erpRequired || format === \"ACCESS\")) {\n      setPendingAction(\"server\");\n      return;\n    }\n    await handleServerSave();\n  };\n\n  const handleInterface = () => {\n    if (!erpRequired) {\n      setStatus({ variant: \"info\", text: \"옵션 메뉴에서 ERP 인터페이스를 활성화해 주세요.\" });\n      return;\n    }\n    setPendingAction(\"interface\");\n  };\n\n  const content = (\n    <div className=\"routing-save-panel__content\">\n      <div className=\"form-field\">\n        <label htmlFor=\"routing-process-group\">공정 그룹 정의</label>\n        <select\n          id=\"routing-process-group\"\n          value={activeProcessGroupId ?? \"\"}\n          onChange={(event) =>\n            setActiveProcessGroup(event.target.value ? event.target.value : null)\n          }\n        >\n          <option value=\"\">선택하지 않음</option>\n          {processGroups.map((group) => (\n            <option key={group.id} value={group.id}>\n              {group.name} · {group.type === \"machining\" ? \"가공\" : \"후처리\"}\n            </option>\n          ))}\n        </select>\n        {activeProcessGroup ? (\n          <div style={{ marginTop: \"0.5rem\", fontSize: \"0.85rem\", color: \"var(--text-muted)\" }}>\n            <div>기본 컬럼: {processGroupColumnSummary || \"없음\"}</div>\n            {processGroupFixedValueEntries.length > 0 ? (\n              <ul style={{ margin: \"0.35rem 0 0\", paddingLeft: \"1.1rem\" }}>\n                {processGroupFixedValueEntries.map(([key, value]) => (\n                  <li key={key} style={{ lineHeight: 1.4 }}>\n                    {key}: {\n                      value === null\n                        ? \"(null)\"\n                        : typeof value === \"object\"\n                        ? JSON.stringify(value)\n                        : String(value)\n                    }\n                  </li>\n                ))}\n              </ul>\n            ) : (\n              <div style={{ marginTop: \"0.35rem\" }}>고정값 없음</div>\n            )}\n          </div>\n        ) : (\n          <p className=\"empty-hint\" style={{ marginTop: \"0.35rem\" }}>\n            공정 그룹 워크스페이스에서 그룹을 생성하고 선택하세요.\n          </p>\n        )}\n      </div>\n      <div className=\"form-field\">\n        <label htmlFor=\"routing-group-name\">그룹 이름</label>\n        <input\n          id=\"routing-group-name\"\n          type=\"text\"\n          value={groupName}\n          onChange={(event) => setGroupName(event.target.value)}\n          placeholder=\"예: PRECISION-LINE-A\"\n        />\n      </div>\n\n      <SaveButtonDropdown\n        onSave={handleSaveFromDropdown}\n        disabled={disabledSave}\n        saving={exporting}\n        defaultFormat={format}\n        defaultDestination={destination === \"local\" || destination === \"clipboard\" ? destination : \"local\"}\n      />\n\n      <p\n        style={{\n          marginTop: \"0.25rem\",\n          fontSize: \"0.85rem\",\n          color: \"var(--text-muted)\",\n        }}\n      >\n        선택한 형식·위치: {formatLabel}\n      </p>\n\n      <div className=\"form-field\">\n        <label>저장 형식</label>\n        <div className=\"save-options\">\n          {FILE_FORMATS.map((value) => (\n            <button\n              key={value}\n              type=\"button\"\n              onClick={() => handleFormatSelect(value)}\n              className={`save-options__chip${format === value ? \" is-active\" : \"\"}`}\n            >\n              {value}\n            </button>\n          ))}\n        </div>\n      </div>\n\n      <div className=\"form-field\">\n        <label>저장 위치</label>\n        <div className=\"destination-toggle\">\n          {DESTINATION_OPTIONS.map((option) => (\n            <button\n              key={option.value}\n              type=\"button\"\n              onClick={() => {\n                if (isDestinationDisabled(option.value)) {\n                  setStatus({ variant: \"info\", text: `${format} 형식은 ${option.label} 저장을 지원하지 않습니다.` });\n                  return;\n                }\n                setDestination(option.value);\n              }}\n              className={`destination-toggle__chip${destination === option.value ? \" is-active\" : \"\"}`}\n              disabled={isDestinationDisabled(option.value)}\n            >\n              {option.label}\n            </button>\n          ))}\n        </div>\n      </div>\n\n  <div className=\"form-field\">\n    <label htmlFor=\"routing-sql-profile\">SQL 출력 프로파일</label>\n    <div className=\"profile-select\" style={{ display: \"flex\", flexDirection: \"column\", gap: \"0.5rem\" }}>\n      <select\n        id=\"routing-sql-profile\"\n        value={selectedProfile ?? \"\"}\n        onChange={(event) => handleProfileSelect(event.target.value)}\n        disabled={profileOptions.length === 0}\n      >\n        <option value=\"\">프로파일 선택</option>\n        {profileOptions.map((option) => (\n          <option key={option.value} value={option.value}>\n            {option.label}\n          </option>\n        ))}\n      </select>\n      <div style={{ display: \"flex\", gap: \"0.5rem\", flexWrap: \"wrap\" }}>\n        <button type=\"button\" className=\"secondary-button\" onClick={() => handleAddMappingRow()}>\n          단일 행 추가\n        </button>\n        <button\n          type=\"button\"\n          className=\"secondary-button\"\n          onClick={() => handleAppendProfile()}\n          disabled={!selectedProfile || profileOptions.length === 0}\n        >\n          템플릿 추가\n        </button>\n      </div>\n    </div>\n    {profileOptions.length === 0 ? (\n      <p className=\"empty-hint\" style={{ marginTop: \"0.35rem\" }}>\n        저장된 프로파일이 없습니다. 매핑 추가 버튼으로 직접 구성하세요.\n      </p>\n    ) : null}\n      </div>\n\n  <div className=\"form-field\">\n    <label>컬럼 매핑</label>\n    <div\n      style={{\n        display: \"flex\",\n        gap: \"1rem\",\n        alignItems: \"flex-start\",\n        flexWrap: \"wrap\",\n        marginBottom: \"0.75rem\",\n      }}\n    >\n      <div style={{ minWidth: \"220px\", flexGrow: 1 }}>\n        <label\n          htmlFor=\"mapping-column-selector\"\n          style={{ display: \"block\", fontSize: \"0.85rem\", color: \"var(--text-muted)\", marginBottom: \"0.25rem\" }}\n        >\n          선택하여 행으로 추가할 SQL 컬럼\n        </label>\n        <select\n          id=\"mapping-column-selector\"\n          multiple\n          size={Math.min(Math.max(availableColumns.length, 4), 12)}\n          value={selectedColumns}\n          onChange={handleColumnBatchChange}\n          style={{ width: \"100%\", minHeight: \"8rem\" }}\n        >\n          {availableColumns.map((column) => (\n            <option key={column} value={column}>\n              {column}\n            </option>\n          ))}\n        </select>\n      </div>\n      <div style={{ display: \"flex\", flexDirection: \"column\", gap: \"0.5rem\" }}>\n        <button\n          type=\"button\"\n          className=\"secondary-button\"\n          onClick={() => handleAddSelectedColumns()}\n          disabled={selectedColumns.length === 0}\n        >\n          선택 열 추가\n        </button>\n        <button type=\"button\" className=\"secondary-button\" onClick={() => handleAddMappingRow()}>\n          빈 행 추가\n        </button>\n      </div>\n    </div>\n    {mappingRows.length === 0 ? (\n      <p className=\"empty-hint\">\n        출력할 컬럼을 설정해 주세요. 프로파일을 선택하거나 “매핑 추가” 버튼으로 직접 구성할 수 있습니다.\n      </p>\n    ) : (\n          <div className=\"mapping-table\">\n            <table>\n              <thead>\n                <tr>\n                  <th style={{ width: \"26%\" }}>소스 컬럼</th>\n                  <th style={{ width: \"26%\" }}>대상 컬럼</th>\n                  <th style={{ width: \"18%\" }}>기본값</th>\n                  <th style={{ width: \"12%\" }}>타입</th>\n                  <th style={{ width: \"8%\" }}>필수</th>\n                  <th style={{ width: \"10%\" }} aria-label=\"행 작업\">&nbsp;</th>\n                </tr>\n              </thead>\n              <tbody>\n                {mappingRows.map((row: any, index: number) => {\n                  const sourceValue = row.source ?? \"\";\n                  const sourceOptions = availableColumns.includes(sourceValue)\n                    ? availableColumns\n                    : [sourceValue, ...availableColumns];\n                  return (\n                    <tr key={row.id}>\n                      <td>\n                        <select\n                          value={sourceValue}\n                          onChange={(event) => handleMappingRowChange(row.id, { source: event.target.value })}\n                        >\n                          {sourceOptions.map((column) => (\n                            <option key={column} value={column}>\n                              {column}\n                            </option>\n                          ))}\n                        </select>\n                      </td>\n                      <td>\n                        <input\n                          type=\"text\"\n                          value={row.mapped ?? \"\"}\n                          onChange={(event) => handleMappingRowChange(row.id, { mapped: event.target.value })}\n                          placeholder={sourceValue}\n                        />\n                      </td>\n                      <td>\n                        <input\n                          type=\"text\"\n                          value={row.defaultValue ?? \"\"}\n                          onChange={(event) =>\n                            handleMappingRowChange(row.id, { defaultValue: event.target.value })\n                          }\n                          placeholder=\"고정값\"\n                        />\n                      </td>\n                      <td>\n                        <select\n                          value={row.type || \"string\"}\n                          onChange={(event) => handleMappingRowChange(row.id, { type: event.target.value })}\n                        >\n                          {COLUMN_TYPE_OPTIONS.map((option) => (\n                            <option key={option.value} value={option.value}>\n                              {option.label}\n                            </option>\n                          ))}\n                        </select>\n                      </td>\n                      <td style={{ textAlign: \"center\" }}>\n                        <input\n                          type=\"checkbox\"\n                          checked={Boolean(row.required)}\n                          onChange={(event) => handleMappingRowChange(row.id, { required: event.target.checked })}\n                        />\n                      </td>\n                      <td className=\"mapping-actions\">\n                        <button\n                          type=\"button\"\n                          className=\"icon-button\"\n                          onClick={() => handleMoveMappingRow(index, -1)}\n                          disabled={index === 0}\n                          aria-label=\"위로 이동\"\n                        >\n                          ↑\n                        </button>\n                        <button\n                          type=\"button\"\n                          className=\"icon-button\"\n                          onClick={() => handleMoveMappingRow(index, 1)}\n                          disabled={index === mappingRows.length - 1}\n                          aria-label=\"아래로 이동\"\n                        >\n                          ↓\n                        </button>\n                        <button\n                          type=\"button\"\n                          className=\"icon-button icon-button--danger\"\n                          onClick={() => handleRemoveMappingRow(row.id)}\n                          aria-label=\"행 삭제\"\n                        >\n                          ✕\n                        </button>\n                      </td>\n                    </tr>\n                  );\n                })}\n              </tbody>\n            </table>\n          </div>\n    )}\n  </div>\n\n  <div className=\"form-field\">\n    <label>주/부라우팅 조합 선택</label>\n    <div\n      style={{\n        display: \"grid\",\n        gridTemplateColumns: \"repeat(auto-fit, minmax(160px, 1fr))\",\n        gap: \"0.5rem\",\n      }}\n    >\n      <select value={selectedRoutingSet} onChange={(event) => setSelectedRoutingSet(event.target.value)}>\n        <option value=\"\">전체 주라우팅</option>\n        {routingSetOptions.map((value) => (\n          <option key={value} value={value}>\n            {value}\n          </option>\n        ))}\n      </select>\n      <select value={selectedVariantCode} onChange={(event) => setSelectedVariantCode(event.target.value)}>\n        <option value=\"\">전체 Variant</option>\n        {variantOptions.map((value) => (\n          <option key={value} value={value}>\n            {value}\n          </option>\n        ))}\n      </select>\n      <select value={selectedPrimaryRouting} onChange={(event) => setSelectedPrimaryRouting(event.target.value)}>\n        <option value=\"\">전체 주라우팅 코드</option>\n        {primaryRoutingOptions.map((value) => (\n          <option key={value} value={value}>\n            {value}\n          </option>\n        ))}\n      </select>\n      <select value={selectedSecondaryRouting} onChange={(event) => setSelectedSecondaryRouting(event.target.value)}>\n        <option value=\"\">전체 부라우팅 코드</option>\n        {secondaryRoutingOptions.map((value) => (\n          <option key={value} value={value}>\n            {value}\n          </option>\n        ))}\n      </select>\n    </div>\n    <p className=\"empty-hint\" style={{ marginTop: \"0.5rem\" }}>\n      {matrixSourceDescription}\n    </p>\n    {routingMatrixOptions.length === 0 ? (\n      <p className=\"empty-hint\" style={{ marginTop: \"0.5rem\" }}>\n        {matrixEmptyMessage}\n      </p>\n    ) : (\n      <ul\n        style={{\n          marginTop: \"0.5rem\",\n          paddingLeft: \"1.25rem\",\n          fontSize: \"0.85rem\",\n          color: \"var(--text-muted)\",\n          maxHeight: \"6.5rem\",\n          overflowY: \"auto\",\n        }}\n      >\n        {routingMatrixOptions.slice(0, 5).map((combo) => (\n          <li key={combo.key}>\n            {(combo.routingSetCode ?? \"기본\")}\n            {\" / \"}\n            {(combo.variantCode ?? \"-\")}\n            {\" / \"}\n            {(combo.primaryRoutingCode ?? \"-\")}\n            {\" / \"}\n            {(combo.secondaryRoutingCode ?? \"-\")}\n            {` · ${combo.count}단계`}\n          </li>\n        ))}\n        {routingMatrixOptions.length > 5 ? (\n          <li>...외 {routingMatrixOptions.length - 5}개 조합</li>\n        ) : null}\n      </ul>\n    )}\n  </div>\n\n  <div className=\"form-field\">\n    <label>SQL 행렬 미리보기</label>\n    {datasetPreview.rows.length === 0 ? (\n      <p className=\"empty-hint\">선택한 조건에 해당하는 데이터가 없습니다.</p>\n    ) : (\n      <div className=\"mapping-table mapping-table--preview\">\n        <table>\n          <thead>\n            <tr>\n              {datasetPreview.columns.map((column) => (\n                <th key={column}>{column}</th>\n              ))}\n            </tr>\n          </thead>\n          <tbody>\n            {previewRows.map((row, rowIndex) => (\n              <tr key={`preview-${rowIndex}`}>\n                {datasetPreview.columns.map((column) => {\n                  const value = row[column];\n                  return <td key={`${column}-${rowIndex}`}>{value == null ? \"\" : String(value)}</td>;\n                })}\n              </tr>\n            ))}\n          </tbody>\n        </table>\n      </div>\n    )}\n    {datasetPreview.rows.length > previewRowLimit ? (\n      <p className=\"empty-hint\" style={{ marginTop: \"0.5rem\" }}>\n        총 {datasetPreview.rows.length}행 중 상위 {previewRowLimit}행을 표시합니다.\n      </p>\n    ) : null}\n  </div>\n\n  <div id={ROUTING_SAVE_CONTROL_IDS.primary}>\n    <SaveButtonDropdown\n      onSave={handleSaveFromDropdown}\n      disabled={disabledSave}\n      saving={exporting}\n      defaultFormat={format}\n      defaultDestination={destination === \"local\" || destination === \"clipboard\" ? destination : \"local\"}\n    />\n  </div>\n\n      <div className=\"save-shortcuts\">\n        <span\n          style={{\n            display: \"block\",\n            marginBottom: \"0.4rem\",\n            fontSize: \"0.85rem\",\n            color: \"var(--text-muted)\",\n          }}\n        >\n          빠른 다운로드 / 업로드\n        </span>\n        <button\n          id={ROUTING_SAVE_CONTROL_IDS.localShortcut}\n          type=\"button\"\n          className=\"save-shortcuts__btn\"\n          onClick={() => void handleLocalExport()}\n          disabled={disabledSave || destination !== \"local\" || !localSupported}\n        >\n          <Download size={14} /> 로컬 저장\n        </button>\n        <button\n          id={ROUTING_SAVE_CONTROL_IDS.clipboardShortcut}\n          type=\"button\"\n          className=\"save-shortcuts__btn\"\n          onClick={() => void handleClipboardExport()}\n          disabled={disabledSave || destination !== \"clipboard\" || !clipboardSupported}\n        >\n          <Upload size={14} /> 클립보드\n        </button>\n      </div>\n\n      <button\n        id={ROUTING_SAVE_CONTROL_IDS.interface}\n        type=\"button\"\n        className=\"interface-button\"\n        onClick={() => void handleInterface()}\n        disabled={!erpRequired || disabledSave}\n      >\n        <Settings size={16} /> INTERFACE\n        {!erpRequired ? <span className=\"interface-button__badge\">옵션 OFF</span> : null}\n      </button>\n\n      <div className=\"form-divider\" aria-hidden />\n\n      <div className=\"form-field\">\n        <label htmlFor=\"routing-load-id\">그룹 ID 불러오기</label>\n        <div className=\"input-with-button\">\n          <input\n            id=\"routing-load-id\"\n            type=\"text\"\n            value={loadId}\n            onChange={(event) => setLoadId(event.target.value)}\n            placeholder=\"UUID 또는 별칭\"\n          />\n          <button type=\"button\" onClick={() => void handleManualLoad()} disabled={saving}>\n            불러오기\n          </button>\n        </div>\n      </div>\n\n      {status ? <div className={`form-status form-status--${status.variant}`}>{status.text}</div> : null}\n\n      <div className=\"group-list\">\n        <div className=\"group-list__header\">\n          <h3>최근 저장 그룹</h3>\n          <button type=\"button\" onClick={() => void refreshGroups()} disabled={listing}>\n            {listing ? \"불러오는 중...\" : \"새로고침\"}\n          </button>\n        </div>\n        {groups.length === 0 ? (\n          <p className=\"group-list__empty\">저장된 그룹이 없습니다.</p>\n        ) : (\n          <ul>\n            {groups.map((group) => (\n              <li key={group.group_id} className=\"group-list__item\">\n                <div className=\"group-list__meta\">\n                  <strong>{group.group_name}</strong>\n                  <span className=\"group-list__id\">ID: {group.group_id}</span>\n                  <span>단계 {group.step_count} · 버전 {group.version}</span>\n                  <span className=\"group-list__time\">{new Date(group.updated_at).toLocaleString()}</span>\n                </div>\n                <button type=\"button\" onClick={() => void handleLoad(group.group_id)} disabled={saving}>\n                  불러오기\n                </button>\n              </li>\n            ))}\n          </ul>\n        )}\n      </div>\n\n      <footer className=\"routing-save-panel__footnote\">\n        <Play size={14} /> ERP 인터페이스는 옵션 메뉴에서 활성화한 후 사용할 수 있습니다.\n      </footer>\n    </div>\n  );\n\n  const confirmationModal = (\n    <ConfirmationModal\n      open={Boolean(confirmationContent)}\n      title={confirmationContent?.title ?? \"\"}\n      description={confirmationContent?.description ?? \"\"}\n      confirmLabel={confirmationContent?.confirmLabel ?? \"확인\"}\n      busy={confirmBusy}\n      onCancel={dismissConfirmation}\n      onConfirm={() => void confirmPendingAction()}\n    />\n  );\n\n  if (variant === \"panel\") {\n    return (\n      <section className=\"panel-card interactive-card routing-save-panel\">\n        <header className=\"panel-header\">\n          <div>\n            <h2 className=\"panel-title\">그룹 저장 및 인터페이스</h2>\n            <p className=\"panel-subtitle\">Recommended routing을 그룹으로 저장하고 ERP 인터페이스 옵션을 관리합니다.</p>\n          </div>\n        </header>\n        {content}\n        {confirmationModal}\n      </section>\n    );\n  }\n\n  return (\n    <div className=\"routing-save-panel routing-save-panel--embedded\">\n      {content}\n      {confirmationModal}\n    </div>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\syyun\\Documents\\GitHub\\Routing_ML_251014\\frontend-prediction\\src\\components\\SaveButtonDropdown.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'SaveOption' is defined but never used.","line":7,"column":11,"nodeType":"Identifier","messageId":"unusedVar","endLine":7,"endColumn":21}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { Check, ChevronDown, Save, X } from \"lucide-react\";\nimport { type MouseEvent,useEffect, useRef, useState } from \"react\";\n\ntype FileFormat = \"CSV\" | \"XML\" | \"JSON\" | \"Excel\" | \"ACCESS\";\ntype Destination = \"local\" | \"clipboard\";\n\ninterface SaveOption {\n  format: FileFormat;\n  destination: Destination;\n  enabled: boolean;\n}\n\ninterface SaveButtonDropdownProps {\n  onSave: (format: FileFormat, destination: Destination) => Promise<void>;\n  disabled?: boolean;\n  saving?: boolean;\n  defaultFormat?: FileFormat;\n  defaultDestination?: Destination;\n}\n\nconst FORMAT_CAPABILITIES: Record<FileFormat, { local: boolean; clipboard: boolean }> = {\n  CSV: { local: true, clipboard: true },\n  XML: { local: true, clipboard: true },\n  JSON: { local: true, clipboard: true },\n  Excel: { local: true, clipboard: false },\n  ACCESS: { local: false, clipboard: false },\n};\n\nconst FORMAT_LABELS: Record<FileFormat, string> = {\n  CSV: \"CSV (쉼표 구분)\",\n  XML: \"XML (구조화)\",\n  JSON: \"JSON (개발용)\",\n  Excel: \"Excel (*.xlsx)\",\n  ACCESS: \"ACCESS DB\",\n};\n\nexport function SaveButtonDropdown({\n  onSave,\n  disabled = false,\n  saving = false,\n  defaultFormat = \"CSV\",\n  defaultDestination = \"local\",\n}: SaveButtonDropdownProps) {\n  const [isOpen, setIsOpen] = useState(false);\n  const [selectedFormat, setSelectedFormat] = useState<FileFormat>(defaultFormat);\n  const [selectedDestination, setSelectedDestination] = useState<Destination>(defaultDestination);\n  const [toast, setToast] = useState<{ message: string; type: \"success\" | \"error\" } | null>(null);\n  const dropdownRef = useRef<HTMLDivElement>(null);\n\n  useEffect(() => {\n    const handleClickOutside = (event: globalThis.MouseEvent) => {\n      if (dropdownRef.current && !dropdownRef.current.contains(event.target as Node)) {\n        setIsOpen(false);\n      }\n    };\n\n    if (isOpen) {\n      document.addEventListener(\"mousedown\", handleClickOutside);\n      return () => document.removeEventListener(\"mousedown\", handleClickOutside);\n    }\n  }, [isOpen]);\n\n  useEffect(() => {\n    if (toast) {\n      const timer = setTimeout(() => setToast(null), 3000);\n      return () => clearTimeout(timer);\n    }\n  }, [toast]);\n\n  const handlePrimarySave = async (event: MouseEvent<HTMLButtonElement>) => {\n    event.preventDefault();\n    try {\n      await onSave(selectedFormat, selectedDestination);\n      setToast({ message: `${selectedFormat} 저장 완료`, type: \"success\" });\n    } catch (error) {\n      setToast({ message: `저장 실패: ${error}`, type: \"error\" });\n    }\n  };\n\n  const handleDropdownToggle = (event: MouseEvent<HTMLButtonElement>) => {\n    event.preventDefault();\n    setIsOpen(!isOpen);\n  };\n\n  const handleFormatSelect = (format: FileFormat) => {\n    setSelectedFormat(format);\n    // Auto-select valid destination\n    const caps = FORMAT_CAPABILITIES[format];\n    if (!caps[selectedDestination]) {\n      setSelectedDestination(caps.local ? \"local\" : \"clipboard\");\n    }\n  };\n\n  const canSave = FORMAT_CAPABILITIES[selectedFormat][selectedDestination];\n\n  return (\n    <div className=\"save-button-group\" ref={dropdownRef}>\n      {/* Primary Save Button */}\n      <button\n        type=\"button\"\n        className=\"primary-button save-button-primary\"\n        onClick={handlePrimarySave}\n        disabled={disabled || saving || !canSave}\n        aria-label={`저장 (${selectedFormat} - ${selectedDestination === \"local\" ? \"로컬\" : \"클립보드\"})`}\n      >\n        <Save size={16} />\n        {saving ? \"저장 중...\" : `저장 (${selectedFormat})`}\n      </button>\n\n      {/* Dropdown Toggle */}\n      <button\n        type=\"button\"\n        className=\"primary-button save-button-dropdown-toggle\"\n        onClick={handleDropdownToggle}\n        disabled={disabled || saving}\n        aria-label=\"저장 옵션 열기\"\n        aria-expanded={isOpen}\n      >\n        <ChevronDown size={16} />\n      </button>\n\n      {/* Dropdown Menu */}\n      {isOpen && (\n        <div className=\"save-dropdown-menu\" role=\"menu\" aria-label=\"저장 옵션\">\n          <div className=\"save-dropdown-section\">\n            <div className=\"save-dropdown-label\">파일 형식</div>\n            <div className=\"format-checkbox-group\" role=\"radiogroup\" aria-label=\"파일 형식 선택\">\n              {(Object.keys(FORMAT_CAPABILITIES) as FileFormat[]).map((format) => (\n                <label key={format} className=\"format-checkbox-label\">\n                  <input\n                    type=\"radio\"\n                    name=\"format\"\n                    value={format}\n                    checked={selectedFormat === format}\n                    onChange={() => handleFormatSelect(format)}\n                    className=\"format-checkbox-input\"\n                  />\n                  <span className=\"format-checkbox-custom\"></span>\n                  <span className=\"format-checkbox-text\">\n                    {FORMAT_LABELS[format]}\n                  </span>\n                </label>\n              ))}\n            </div>\n          </div>\n\n          <div className=\"save-dropdown-section\">\n            <div className=\"save-dropdown-label\">저장 위치</div>\n            <div className=\"destination-checkbox-group\" role=\"radiogroup\" aria-label=\"저장 위치 선택\">\n              <label\n                className={`destination-checkbox-label ${\n                  !FORMAT_CAPABILITIES[selectedFormat].local ? \"disabled\" : \"\"\n                }`}\n              >\n                <input\n                  type=\"radio\"\n                  name=\"destination\"\n                  value=\"local\"\n                  checked={selectedDestination === \"local\"}\n                  onChange={() => setSelectedDestination(\"local\")}\n                  disabled={!FORMAT_CAPABILITIES[selectedFormat].local}\n                  className=\"destination-checkbox-input\"\n                />\n                <span className=\"destination-checkbox-custom\"></span>\n                <span className=\"destination-checkbox-text\">로컬 파일</span>\n              </label>\n\n              <label\n                className={`destination-checkbox-label ${\n                  !FORMAT_CAPABILITIES[selectedFormat].clipboard ? \"disabled\" : \"\"\n                }`}\n              >\n                <input\n                  type=\"radio\"\n                  name=\"destination\"\n                  value=\"clipboard\"\n                  checked={selectedDestination === \"clipboard\"}\n                  onChange={() => setSelectedDestination(\"clipboard\")}\n                  disabled={!FORMAT_CAPABILITIES[selectedFormat].clipboard}\n                  className=\"destination-checkbox-input\"\n                />\n                <span className=\"destination-checkbox-custom\"></span>\n                <span className=\"destination-checkbox-text\">클립보드</span>\n              </label>\n            </div>\n          </div>\n\n          <div className=\"save-dropdown-footer\">\n            <button\n              type=\"button\"\n              className=\"save-dropdown-apply\"\n              onClick={handlePrimarySave}\n              disabled={!canSave || saving}\n            >\n              <Check size={14} />\n              적용 및 저장\n            </button>\n          </div>\n        </div>\n      )}\n\n      {/* Toast Notification */}\n      {toast && (\n        <div\n          className={`save-toast-notification ${toast.type}`}\n          role=\"alert\"\n          aria-live=\"polite\"\n        >\n          {toast.type === \"success\" ? <Check size={16} /> : <X size={16} />}\n          <span>{toast.message}</span>\n        </div>\n      )}\n    </div>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\syyun\\Documents\\GitHub\\Routing_ML_251014\\frontend-prediction\\src\\components\\SaveInterfacePanel.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\syyun\\Documents\\GitHub\\Routing_ML_251014\\frontend-prediction\\src\\components\\TabContainer.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\syyun\\Documents\\GitHub\\Routing_ML_251014\\frontend-prediction\\src\\components\\ThemeToggle.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'theme' is assigned a value but never used.","line":35,"column":11,"nodeType":"Identifier","messageId":"unusedVar","endLine":35,"endColumn":16}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * Theme Toggle Button Component\n * 다크/라이트 테마 전환 버튼\n */\nimport React from 'react';\n\nimport { useTheme } from '../hooks/useTheme';\n\ninterface ThemeToggleProps {\n  /** 버튼 크기 */\n  size?: 'sm' | 'md' | 'lg';\n  /** 버튼 스타일 */\n  variant?: 'icon' | 'text' | 'both';\n  /** 추가 CSS 클래스 */\n  className?: string;\n}\n\n/**\n * 테마 토글 버튼\n *\n * @example\n * ```tsx\n * // 아이콘만\n * <ThemeToggle variant=\"icon\" />\n *\n * // 텍스트 포함\n * <ThemeToggle variant=\"both\" size=\"lg\" />\n * ```\n */\nexport function ThemeToggle({\n  size = 'md',\n  variant = 'icon',\n  className = '',\n}: ThemeToggleProps) {\n  const { theme, toggleTheme, isDark } = useTheme();\n\n  const sizeClasses = {\n    sm: 'w-8 h-8 text-sm',\n    md: 'w-10 h-10 text-base',\n    lg: 'w-12 h-12 text-lg',\n  };\n\n  const icon = isDark ? '☀️' : '🌙';\n  const label = isDark ? '라이트 모드' : '다크 모드';\n\n  return (\n    <button\n      onClick={toggleTheme}\n      className={`\n        theme-toggle\n        inline-flex items-center justify-center\n        rounded-lg\n        transition-all duration-200\n        hover:scale-110 active:scale-95\n        focus:outline-none focus:ring-2 focus:ring-offset-2\n        ${isDark\n          ? 'bg-gray-700 hover:bg-gray-600 text-yellow-300 focus:ring-yellow-500'\n          : 'bg-gray-100 hover:bg-gray-200 text-indigo-600 focus:ring-indigo-500'\n        }\n        ${sizeClasses[size]}\n        ${className}\n      `}\n      title={`${label}로 전환`}\n      aria-label={`${label}로 전환`}\n    >\n      {variant === 'icon' && (\n        <span className=\"text-xl\" role=\"img\" aria-hidden=\"true\">\n          {icon}\n        </span>\n      )}\n\n      {variant === 'text' && (\n        <span className=\"font-medium px-3\">{label}</span>\n      )}\n\n      {variant === 'both' && (\n        <>\n          <span className=\"text-xl mr-2\" role=\"img\" aria-hidden=\"true\">\n            {icon}\n          </span>\n          <span className=\"font-medium\">{label}</span>\n        </>\n      )}\n    </button>\n  );\n}\n\n/**\n * 헤더/네비게이션용 컴팩트 토글 버튼\n */\nexport function CompactThemeToggle({ className = '' }: { className?: string }) {\n  const { isDark, toggleTheme } = useTheme();\n\n  return (\n    <button\n      onClick={toggleTheme}\n      className={`\n        p-2 rounded-md\n        transition-colors duration-200\n        ${isDark\n          ? 'text-gray-300 hover:text-white hover:bg-gray-700'\n          : 'text-gray-600 hover:text-gray-900 hover:bg-gray-100'\n        }\n        focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500\n        ${className}\n      `}\n      title={isDark ? '라이트 모드로 전환' : '다크 모드로 전환'}\n      aria-label={isDark ? '라이트 모드로 전환' : '다크 모드로 전환'}\n    >\n      {isDark ? (\n        <svg className=\"w-5 h-5\" fill=\"currentColor\" viewBox=\"0 0 20 20\">\n          <path\n            fillRule=\"evenodd\"\n            d=\"M10 2a1 1 0 011 1v1a1 1 0 11-2 0V3a1 1 0 011-1zm4 8a4 4 0 11-8 0 4 4 0 018 0zm-.464 4.95l.707.707a1 1 0 001.414-1.414l-.707-.707a1 1 0 00-1.414 1.414zm2.12-10.607a1 1 0 010 1.414l-.706.707a1 1 0 11-1.414-1.414l.707-.707a1 1 0 011.414 0zM17 11a1 1 0 100-2h-1a1 1 0 100 2h1zm-7 4a1 1 0 011 1v1a1 1 0 11-2 0v-1a1 1 0 011-1zM5.05 6.464A1 1 0 106.465 5.05l-.708-.707a1 1 0 00-1.414 1.414l.707.707zm1.414 8.486l-.707.707a1 1 0 01-1.414-1.414l.707-.707a1 1 0 011.414 1.414zM4 11a1 1 0 100-2H3a1 1 0 000 2h1z\"\n            clipRule=\"evenodd\"\n          />\n        </svg>\n      ) : (\n        <svg className=\"w-5 h-5\" fill=\"currentColor\" viewBox=\"0 0 20 20\">\n          <path d=\"M17.293 13.293A8 8 0 016.707 2.707a8.001 8.001 0 1010.586 10.586z\" />\n        </svg>\n      )}\n    </button>\n  );\n}\n\nexport default ThemeToggle;\n","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\syyun\\Documents\\GitHub\\Routing_ML_251014\\frontend-prediction\\src\\components\\TimelinePanel.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\syyun\\Documents\\GitHub\\Routing_ML_251014\\frontend-prediction\\src\\components\\UserApprovalPanel.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":24,"column":19,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":24,"endColumn":22,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[787,790],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[787,790],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":41,"column":19,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":41,"endColumn":22,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1301,1304],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1301,1304],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":53,"column":19,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":53,"endColumn":22,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1653,1656],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1653,1656],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":3,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import apiClient from '@lib/apiClient';\nimport { Check, Clock, Shield,UserCheck, X } from 'lucide-react';\nimport React, { useEffect,useState } from 'react';\n\ninterface PendingUser {\n  username: string;\n  full_name?: string;\n  email?: string;\n  created_at: string;\n  status: 'pending' | 'approved' | 'rejected';\n}\n\nexport const UserApprovalPanel: React.FC = () => {\n  const [pendingUsers, setPendingUsers] = useState<PendingUser[]>([]);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState<string | null>(null);\n\n  const fetchPendingUsers = async () => {\n    try {\n      setLoading(true);\n      const response = await apiClient.get('/api/auth/admin/pending-users');\n      setPendingUsers(response.data.users || []);\n      setError(null);\n    } catch (err: any) {\n      setError(err.response?.data?.detail || '회원 목록을 불러오는데 실패했습니다');\n      console.error('Failed to fetch pending users:', err);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const handleApprove = async (username: string, makeAdmin: boolean = false) => {\n    try {\n      await apiClient.post('/api/auth/admin/approve', {\n        username,\n        make_admin: makeAdmin,\n      });\n\n      alert(`${username}님을 ${makeAdmin ? '관리자로' : '일반 사용자로'} 승인했습니다.`);\n      fetchPendingUsers();\n    } catch (err: any) {\n      alert(err.response?.data?.detail || '승인에 실패했습니다');\n    }\n  };\n\n  const handleReject = async (username: string) => {\n    if (!confirm(`${username}님의 가입을 거부하시겠습니까?`)) return;\n\n    try {\n      await apiClient.post('/api/auth/admin/reject', { username });\n      alert(`${username}님의 가입을 거부했습니다.`);\n      fetchPendingUsers();\n    } catch (err: any) {\n      alert(err.response?.data?.detail || '거부에 실패했습니다');\n    }\n  };\n\n  useEffect(() => {\n    fetchPendingUsers();\n  }, []);\n\n  if (loading) {\n    return (\n      <div className=\"flex items-center justify-center py-12\">\n        <div className=\"text-slate-400\">로딩 중...</div>\n      </div>\n    );\n  }\n\n  if (error) {\n    return (\n      <div className=\"p-6 bg-red-500/10 border border-red-500/30 rounded-lg\">\n        <p className=\"text-red-400\">{error}</p>\n        <button\n          onClick={fetchPendingUsers}\n          className=\"mt-4 px-4 py-2 bg-red-500/20 hover:bg-red-500/30 rounded-lg text-red-300\"\n        >\n          다시 시도\n        </button>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"user-approval-panel space-y-4\">\n      <div className=\"flex items-center justify-between mb-6\">\n        <h3 className=\"text-lg font-semibold text-slate-200 flex items-center gap-2\">\n          <UserCheck className=\"w-5 h-5\" />\n          회원 승인 관리\n        </h3>\n        <button\n          onClick={fetchPendingUsers}\n          className=\"px-3 py-1.5 bg-slate-700/50 hover:bg-slate-600/50 rounded-lg text-sm text-slate-300\"\n        >\n          새로고침\n        </button>\n      </div>\n\n      {pendingUsers.length === 0 ? (\n        <div className=\"text-center py-12 text-slate-500\">\n          <Clock className=\"w-12 h-12 mx-auto mb-3 opacity-30\" />\n          <p>대기 중인 회원이 없습니다</p>\n        </div>\n      ) : (\n        <div className=\"space-y-3\">\n          {pendingUsers.map((user) => (\n            <div\n              key={user.username}\n              className=\"p-4 bg-slate-800/30 border border-slate-700/50 rounded-lg hover:border-slate-600/50 transition-colors\"\n            >\n              <div className=\"flex items-center justify-between\">\n                <div className=\"flex-1\">\n                  <div className=\"flex items-center gap-3 mb-2\">\n                    <h4 className=\"text-base font-medium text-slate-200\">{user.username}</h4>\n                    {user.full_name && (\n                      <span className=\"text-sm text-slate-400\">({user.full_name})</span>\n                    )}\n                    <span className=\"px-2 py-0.5 bg-yellow-500/20 text-yellow-400 text-xs rounded-full\">\n                      대기 중\n                    </span>\n                  </div>\n                  {user.email && (\n                    <p className=\"text-sm text-slate-400\">{user.email}</p>\n                  )}\n                  <p className=\"text-xs text-slate-500 mt-1\">\n                    가입 요청: {new Date(user.created_at).toLocaleString('ko-KR')}\n                  </p>\n                </div>\n\n                <div className=\"flex items-center gap-2\">\n                  <button\n                    onClick={() => handleApprove(user.username, true)}\n                    className=\"px-3 py-1.5 bg-purple-500/20 hover:bg-purple-500/30 border border-purple-500/50 rounded-lg text-purple-300 text-sm flex items-center gap-1.5 transition-colors\"\n                    title=\"관리자로 승인\"\n                  >\n                    <Shield className=\"w-4 h-4\" />\n                    관리자\n                  </button>\n                  <button\n                    onClick={() => handleApprove(user.username, false)}\n                    className=\"px-3 py-1.5 bg-emerald-500/20 hover:bg-emerald-500/30 border border-emerald-500/50 rounded-lg text-emerald-300 text-sm flex items-center gap-1.5 transition-colors\"\n                    title=\"일반 사용자로 승인\"\n                  >\n                    <Check className=\"w-4 h-4\" />\n                    승인\n                  </button>\n                  <button\n                    onClick={() => handleReject(user.username)}\n                    className=\"px-3 py-1.5 bg-red-500/20 hover:bg-red-500/30 border border-red-500/50 rounded-lg text-red-300 text-sm flex items-center gap-1.5 transition-colors\"\n                    title=\"가입 거부\"\n                  >\n                    <X className=\"w-4 h-4\" />\n                    거부\n                  </button>\n                </div>\n              </div>\n            </div>\n          ))}\n        </div>\n      )}\n\n      <div className=\"mt-6 p-4 bg-blue-500/10 border border-blue-500/30 rounded-lg\">\n        <p className=\"text-sm text-blue-300\">\n          💡 <strong>관리자</strong>는 모든 시스템 관리 권한을, <strong>일반 사용자</strong>는 기본 기능만 사용할 수 있습니다.\n        </p>\n      </div>\n    </div>\n  );\n};\n","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\syyun\\Documents\\GitHub\\Routing_ML_251014\\frontend-prediction\\src\\components\\VisualizationSummary.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\syyun\\Documents\\GitHub\\Routing_ML_251014\\frontend-prediction\\src\\components\\WorkflowGraphPanel.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\syyun\\Documents\\GitHub\\Routing_ML_251014\\frontend-prediction\\src\\components\\__tests__\\MainNavigation.test.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'nav' is assigned a value but never used.","line":42,"column":11,"nodeType":"Identifier","messageId":"unusedVar","endLine":42,"endColumn":14}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { MainNavigation, type NavigationItem } from \"@components/MainNavigation\";\nimport { fireEvent, render, screen, within } from \"@testing-library/react\";\nimport userEvent from \"@testing-library/user-event\";\nimport { describe, expect, it, vi } from \"vitest\";\n\nconst ITEMS: NavigationItem[] = [\n  { id: \"one\", label: \"첫번째\", description: \"First\", icon: <span data-testid=\"icon-one\" /> },\n  { id: \"two\", label: \"두번째\", description: \"Second\", icon: <span data-testid=\"icon-two\" /> },\n  { id: \"three\", label: \"세번째\", description: \"Third\", icon: <span data-testid=\"icon-three\" /> },\n];\n\ndescribe(\"MainNavigation\", () => {\n  it(\"renders navigation items with accessible labels\", () => {\n    const onSelect = vi.fn();\n    render(<MainNavigation items={ITEMS} activeId=\"one\" onSelect={onSelect} />);\n\n    expect(screen.getByRole(\"tablist\")).toBeInTheDocument();\n    const buttons = screen.getAllByRole(\"tab\");\n    expect(buttons).toHaveLength(ITEMS.length);\n    expect(buttons[0]).toHaveAttribute(\"aria-selected\", \"true\");\n    expect(buttons[1]).toHaveAttribute(\"aria-label\", \"두번째 - Second\");\n  });\n\n  it(\"invokes onSelect when clicking a navigation item\", async () => {\n    const onSelect = vi.fn();\n    render(<MainNavigation items={ITEMS} activeId=\"one\" onSelect={onSelect} />);\n\n    const navs = screen.getAllByRole(\"tablist\");\n    const nav = navs[navs.length - 1];\n    const target = within(nav).getAllByRole(\"tab\", { name: /두번째/ })[0];\n    fireEvent.click(target);\n\n    expect(onSelect).toHaveBeenCalledWith(\"two\");\n  });\n\n  it(\"supports keyboard focus traversal across tabs\", async () => {\n    const onSelect = vi.fn();\n    render(<MainNavigation items={ITEMS} activeId=\"one\" onSelect={onSelect} />);\n\n    const user = userEvent.setup();\n    const navs = screen.getAllByRole(\"tablist\");\n    const nav = navs[navs.length - 1];\n    await user.tab();\n    expect(document.activeElement).toHaveAttribute(\"aria-label\", \"첫번째 - First\");\n\n    await user.tab();\n    expect(document.activeElement).toHaveAttribute(\"aria-label\", \"두번째 - Second\");\n\n    await user.tab();\n    expect(document.activeElement).toHaveAttribute(\"aria-label\", \"세번째 - Third\");\n  });\n\n  it(\"matches snapshot for desktop layout\", () => {\n    const { container } = render(\n      <div data-layout=\"desktop\">\n        <MainNavigation items={ITEMS} activeId=\"one\" onSelect={vi.fn()} />\n      </div>,\n    );\n\n    expect(container.firstChild).toMatchSnapshot();\n  });\n\n  it(\"matches snapshot for mobile layout\", () => {\n    const { container } = render(\n      <div data-layout=\"mobile\" data-nav-mode=\"drawer\">\n        <MainNavigation items={ITEMS} activeId=\"two\" onSelect={vi.fn()} />\n      </div>,\n    );\n\n    expect(container.firstChild).toMatchSnapshot();\n  });\n});\n","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\syyun\\Documents\\GitHub\\Routing_ML_251014\\frontend-prediction\\src\\components\\admin\\DataRelationshipManager.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":81,"column":19,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":81,"endColumn":22,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2331,2334],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2331,2334],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":94,"column":19,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":94,"endColumn":22,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2706,2709],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2706,2709],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":121,"column":19,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":121,"endColumn":22,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3477,3480],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3477,3480],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":138,"column":19,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":138,"endColumn":22,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3892,3895],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3892,3895],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":157,"column":19,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":157,"endColumn":22,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4440,4443],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4440,4443],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":187,"column":12,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":187,"endColumn":15,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[5130,5133],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[5130,5133],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":6,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"﻿import {\n  createDataMappingProfile,\n  type DataMappingProfile,\n  type DataMappingProfileCreate,\n  type DataRelationshipMapping,\n  deleteDataMappingProfile,\n  fetchDataMappingProfile,\n  fetchDataMappingProfiles,\n  updateDataMappingProfile,\n} from \"@lib/apiClient\";\nimport { AlertCircle, ArrowRight, Plus, Save, Settings, Trash2, X } from \"lucide-react\";\nimport { useEffect, useState } from \"react\";\n\nimport { RoutingGroupControls } from \"../RoutingGroupControls\";\n\nconst DATA_TYPES = [\n  { value: \"string\", label: \"Text\" },\n  { value: \"number\", label: \"Number\" },\n  { value: \"boolean\", label: \"Boolean\" },\n  { value: \"date\", label: \"Date\" },\n] as const;\n\n// 학습 데이터 컬럼 샘플 (실제로는 backend/constants.py의 TRAIN_FEATURES에서 가져와야 함)\nconst TRAINING_COLUMNS = [\n  \"ITEM_CD\",\n  \"PART_TYPE\",\n  \"PartNm\",\n  \"ITEM_SPEC\",\n  \"ITEM_NM\",\n  \"ITEM_MATERIAL\",\n  \"OUTDIAMETER\",\n  \"INDIAMETER\",\n  \"ROTATE_CLOCKWISE\",\n];\n\n// 예측 결과 컬럼 샘플 (실제로는 backend/constants.py의 ROUTING_OUTPUT_COLS에서 가져와야 함)\nconst PREDICTION_COLUMNS = [\n  \"dbo_BI_ROUTING_VIEW_JOB_CD\",\n  \"JOB_NM\",\n  \"RES_CD\",\n  \"RES_DIS\",\n  \"MACH_WORKED_HOURS\",\n  \"SETUP_TIME\",\n  \"RUN_TIME_QTY\",\n  \"BATCH_OPER\",\n];\n\nexport function DataRelationshipManager() {\n  const [profiles, setProfiles] = useState<DataMappingProfile[]>([]);\n  const [selectedProfileId, setSelectedProfileId] = useState<string | null>(null);\n  const [selectedProfile, setSelectedProfile] = useState<DataMappingProfile | null>(null);\n  const [isLoading, setIsLoading] = useState(false);\n  const [error, setError] = useState<string>(\"\");\n  const [successMessage, setSuccessMessage] = useState<string>(\"\");\n\n  // 새 프로파일 생성 모달 상태\n  const [showNewProfileModal, setShowNewProfileModal] = useState(false);\n  const [newProfileName, setNewProfileName] = useState(\"\");\n  const [newProfileDescription, setNewProfileDescription] = useState(\"\");\n\n  // 매핑 편집 상태\n  const [relationships, setRelationships] = useState<DataRelationshipMapping[]>([]);\n\n  // 프로파일 목록 로드\n  useEffect(() => {\n    loadProfiles();\n  }, []);\n\n  // 선택된 프로파일 로드\n  useEffect(() => {\n    if (selectedProfileId) {\n      loadProfileDetail(selectedProfileId);\n    }\n  }, [selectedProfileId]);\n\n  const loadProfiles = async () => {\n    try {\n      setIsLoading(true);\n      const response = await fetchDataMappingProfiles();\n      setProfiles(response.profiles);\n    } catch (err: any) {\n      setError(err.message || \"프로파일 목록 로드 실패\");\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  const loadProfileDetail = async (profileId: string) => {\n    try {\n      setIsLoading(true);\n      const profile = await fetchDataMappingProfile(profileId);\n      setSelectedProfile(profile);\n      setRelationships(profile.relationships || []);\n    } catch (err: any) {\n      setError(err.message || \"프로파일 로드 실패\");\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  const handleCreateProfile = async () => {\n    if (!newProfileName.trim()) {\n      setError(\"프로파일 이름을 입력하세요\");\n      return;\n    }\n\n    try {\n      setIsLoading(true);\n      const payload: DataMappingProfileCreate = {\n        name: newProfileName.trim(),\n        description: newProfileDescription.trim() || undefined,\n        relationships: [],\n      };\n      const created = await createDataMappingProfile(payload);\n      setProfiles([...profiles, created]);\n      setSelectedProfileId(created.id);\n      setShowNewProfileModal(false);\n      setNewProfileName(\"\");\n      setNewProfileDescription(\"\");\n      setSuccessMessage(\"프로파일이 생성되었습니다\");\n    } catch (err: any) {\n      setError(err.message || \"프로파일 생성 실패\");\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  const handleSaveProfile = async () => {\n    if (!selectedProfileId || !selectedProfile) return;\n\n    try {\n      setIsLoading(true);\n      await updateDataMappingProfile(selectedProfileId, {\n        relationships,\n      });\n      setSuccessMessage(\"저장되었습니다\");\n      await loadProfiles();\n    } catch (err: any) {\n      setError(err.message || \"저장 실패\");\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  const handleDeleteProfile = async () => {\n    if (!selectedProfileId) return;\n    if (!confirm(\"이 프로파일을 삭제하시겠습니까?\")) return;\n\n    try {\n      setIsLoading(true);\n      await deleteDataMappingProfile(selectedProfileId);\n      setProfiles(profiles.filter((p) => p.id !== selectedProfileId));\n      setSelectedProfileId(null);\n      setSelectedProfile(null);\n      setRelationships([]);\n      setSuccessMessage(\"프로파일이 삭제되었습니다\");\n    } catch (err: any) {\n      setError(err.message || \"삭제 실패\");\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  const handleAddRelationship = () => {\n    setRelationships([\n      ...relationships,\n      {\n        training_column: \"\",\n        prediction_column: null,\n        output_column: \"\",\n        data_type: \"string\",\n        is_required: false,\n        default_value: null,\n        transform_rule: null,\n        description: null,\n      },\n    ]);\n  };\n\n  const handleRemoveRelationship = (index: number) => {\n    setRelationships(relationships.filter((_, i) => i !== index));\n  };\n\n  const handleUpdateRelationship = (\n    index: number,\n    field: keyof DataRelationshipMapping,\n    value: any\n  ) => {\n    const updated = [...relationships];\n    updated[index] = { ...updated[index], [field]: value };\n    setRelationships(updated);\n  };\n\n  return (\n    <div className=\"min-h-screen p-6 animate-fade-in\">\n      <div className=\"max-w-7xl mx-auto\">\n        <header className=\"mb-8\">\n          <div className=\"flex items-center justify-between\">\n            <div>\n              <h1 className=\"heading-1 flex items-center gap-3\">\n                <Settings className=\"text-primary-400\" size={32} />\n                데이터 관계 설정\n              </h1>\n              <p className=\"body-text-secondary mt-2\">\n                학습 데이터 → 예측 결과 → 출력 컬럼 간의 관계를 설정합니다\n              </p>\n            </div>\n            <button\n              type=\"button\"\n              className=\"btn-primary neon-cyan\"\n              onClick={() => setShowNewProfileModal(true)}\n            >\n              <Plus size={18} />\n              새 프로파일\n            </button>\n          </div>\n        </header>\n\n        {error && (\n          <div className=\"mb-4 p-4 rounded-lg bg-red-500/10 border border-red-500/30 flex items-start gap-3\">\n            <AlertCircle size={20} className=\"text-red-400 flex-shrink-0 mt-0.5\" />\n            <div>\n              <p className=\"text-red-200 font-medium\">오류</p>\n              <p className=\"text-red-300 text-sm mt-1\">{error}</p>\n            </div>\n            <button\n              onClick={() => setError(\"\")}\n              className=\"ml-auto text-red-400 hover:text-red-300\"\n            >\n              <X size={18} />\n            </button>\n          </div>\n        )}\n\n        {successMessage && (\n          <div className=\"mb-4 p-4 rounded-lg bg-green-500/10 border border-green-500/30 flex items-center justify-between\">\n            <p className=\"text-green-200\">{successMessage}</p>\n            <button\n              onClick={() => setSuccessMessage(\"\")}\n              className=\"text-green-400 hover:text-green-300\"\n            >\n              <X size={18} />\n            </button>\n          </div>\n        )}\n\n        <div className=\"grid grid-cols-12 gap-6\">\n          {/* 프로파일 목록 */}\n          <div className=\"col-span-3\">\n            <div className=\"glass-morphism p-6 rounded-xl\">\n              <h2 className=\"heading-3 mb-4\">프로파일 목록</h2>\n              {isLoading && !selectedProfile ? (\n                <p className=\"body-text-secondary text-center py-8\">로딩 중...</p>\n              ) : profiles.length === 0 ? (\n                <p className=\"body-text-secondary text-center py-8\">\n                  프로파일이 없습니다\n                </p>\n              ) : (\n                <div className=\"space-y-2\">\n                  {profiles.map((profile) => (\n                    <button\n                      key={profile.id}\n                      onClick={() => setSelectedProfileId(profile.id)}\n                      className={`\n                        w-full text-left p-3 rounded-lg transition-all\n                        ${\n                          selectedProfileId === profile.id\n                            ? \"bg-primary-500/20 border-2 border-primary-400\"\n                            : \"bg-dark-surface border-2 border-dark-border hover:border-primary-500/50\"\n                        }\n                      `}\n                    >\n                      <p className=\"font-semibold text-sm\">{profile.name}</p>\n                      {profile.description && (\n                        <p className=\"text-xs text-dark-text-secondary mt-1\">\n                          {profile.description}\n                        </p>\n                      )}\n                      <p className=\"text-xs text-dark-text-tertiary mt-2\">\n                        {profile.relationships?.length || 0}개 매핑\n                      </p>\n                    </button>\n                  ))}\n                </div>\n              )}\n            </div>\n          </div>\n\n          {/* 매핑 편집기 */}\n          <div className=\"col-span-9\">\n            {!selectedProfile ? (\n              <div className=\"glass-morphism p-12 rounded-xl text-center\">\n                <Settings size={48} className=\"mx-auto text-dark-text-tertiary mb-4\" />\n                <p className=\"body-text-secondary\">\n                  왼쪽에서 프로파일을 선택하거나 새로 만드세요\n                </p>\n              </div>\n            ) : (\n              <div className=\"glass-morphism p-6 rounded-xl\">\n                <div className=\"flex items-center justify-between mb-6\">\n                  <div>\n                    <h2 className=\"heading-2\">{selectedProfile.name}</h2>\n                    {selectedProfile.description && (\n                      <p className=\"body-text-secondary mt-1\">\n                        {selectedProfile.description}\n                      </p>\n                    )}\n                  </div>\n                  <div className=\"flex gap-2\">\n                    <button\n                      type=\"button\"\n                      className=\"btn-ghost text-red-500 hover:text-red-400\"\n                      onClick={handleDeleteProfile}\n                    >\n                      <Trash2 size={18} />\n                      삭제\n                    </button>\n                    <button\n                      type=\"button\"\n                      className=\"btn-primary neon-cyan\"\n                      onClick={handleSaveProfile}\n                      disabled={isLoading}\n                    >\n                      <Save size={18} />\n                      {isLoading ? \"저장 중...\" : \"저장\"}\n                    </button>\n                  </div>\n                </div>\n\n                <div className=\"mb-4 flex items-center justify-between\">\n                  <p className=\"text-sm text-dark-text-secondary\">\n                    데이터 흐름: 학습 컬럼 → 예측 컬럼 → 출력 컬럼\n                  </p>\n                  <button\n                    type=\"button\"\n                    className=\"btn-secondary\"\n                    onClick={handleAddRelationship}\n                  >\n                    <Plus size={16} />\n                    매핑 추가\n                  </button>\n                </div>\n\n                {relationships.length === 0 ? (\n                  <div className=\"py-12 text-center\">\n                    <p className=\"body-text-secondary\">\n                      매핑이 없습니다. &quot;매핑 추가&quot; 버튼을 클릭하세요\n                    </p>\n                  </div>\n                ) : (\n                  <div className=\"space-y-4\">\n                    {relationships.map((rel, index) => (\n                      <div\n                        key={index}\n                        className=\"p-4 rounded-lg border-2 border-dark-border bg-dark-surface/50\"\n                      >\n                        <div className=\"grid grid-cols-12 gap-4 items-center\">\n                          {/* 학습 컬럼 */}\n                          <div className=\"col-span-3\">\n                            <label className=\"block text-xs font-medium mb-1\">\n                              학습 데이터 컬럼\n                            </label>\n                            <select\n                              className=\"form-input w-full\"\n                              value={rel.training_column}\n                              onChange={(e) =>\n                                handleUpdateRelationship(\n                                  index,\n                                  \"training_column\",\n                                  e.target.value\n                                )\n                              }\n                            >\n                              <option value=\"\">선택...</option>\n                              {TRAINING_COLUMNS.map((col) => (\n                                <option key={col} value={col}>\n                                  {col}\n                                </option>\n                              ))}\n                            </select>\n                          </div>\n\n                          <div className=\"col-span-1 flex justify-center\">\n                            <ArrowRight size={20} className=\"text-primary-400\" />\n                          </div>\n\n                          {/* 예측 컬럼 */}\n                          <div className=\"col-span-3\">\n                            <label className=\"block text-xs font-medium mb-1\">\n                              예측 결과 컬럼\n                            </label>\n                            <select\n                              className=\"form-input w-full\"\n                              value={rel.prediction_column || \"\"}\n                              onChange={(e) =>\n                                handleUpdateRelationship(\n                                  index,\n                                  \"prediction_column\",\n                                  e.target.value || null\n                                )\n                              }\n                            >\n                              <option value=\"\">동일 컬럼 사용</option>\n                              {PREDICTION_COLUMNS.map((col) => (\n                                <option key={col} value={col}>\n                                  {col}\n                                </option>\n                              ))}\n                            </select>\n                          </div>\n\n                          <div className=\"col-span-1 flex justify-center\">\n                            <ArrowRight size={20} className=\"text-primary-400\" />\n                          </div>\n\n                          {/* 출력 컬럼 */}\n                          <div className=\"col-span-3\">\n                            <label className=\"block text-xs font-medium mb-1\">\n                              출력 컬럼명\n                            </label>\n                            <input\n                              type=\"text\"\n                              className=\"form-input w-full\"\n                              placeholder=\"예: 공정명\"\n                              value={rel.output_column}\n                              onChange={(e) =>\n                                handleUpdateRelationship(\n                                  index,\n                                  \"output_column\",\n                                  e.target.value\n                                )\n                              }\n                            />\n                          </div>\n\n                          {/* 삭제 버튼 */}\n                          <div className=\"col-span-1\">\n                            <button\n                              type=\"button\"\n                              className=\"btn-ghost text-red-500 hover:text-red-400 mt-5\"\n                              onClick={() => handleRemoveRelationship(index)}\n                            >\n                              <Trash2 size={18} />\n                            </button>\n                          </div>\n                        </div>\n\n                        {/* 추가 옵션 */}\n                        <div className=\"grid grid-cols-4 gap-4 mt-4\">\n                          <div>\n                            <label className=\"block text-xs font-medium mb-1\">\n                              데이터 타입\n                            </label>\n                            <select\n                              className=\"form-input w-full\"\n                              value={rel.data_type}\n                              onChange={(e) =>\n                                handleUpdateRelationship(index, \"data_type\", e.target.value)\n                              }\n                            >\n                              {DATA_TYPES.map((type) => (\n                                <option key={type.value} value={type.value}>\n                                  {type.label}\n                                </option>\n                              ))}\n                            </select>\n                          </div>\n                          <div>\n                            <label className=\"block text-xs font-medium mb-1\">\n                              기본값\n                            </label>\n                            <input\n                              type=\"text\"\n                              className=\"form-input w-full\"\n                              placeholder=\"선택사항\"\n                              value={rel.default_value || \"\"}\n                              onChange={(e) =>\n                                handleUpdateRelationship(\n                                  index,\n                                  \"default_value\",\n                                  e.target.value || null\n                                )\n                              }\n                            />\n                          </div>\n                          <div>\n                            <label className=\"block text-xs font-medium mb-1\">\n                              변환 규칙\n                            </label>\n                            <input\n                              type=\"text\"\n                              className=\"form-input w-full\"\n                              placeholder=\"예: uppercase\"\n                              value={rel.transform_rule || \"\"}\n                              onChange={(e) =>\n                                handleUpdateRelationship(\n                                  index,\n                                  \"transform_rule\",\n                                  e.target.value || null\n                                )\n                              }\n                            />\n                          </div>\n                          <div className=\"flex items-end\">\n                            <label className=\"flex items-center gap-2\">\n                              <input\n                                type=\"checkbox\"\n                                checked={rel.is_required}\n                                onChange={(e) =>\n                                  handleUpdateRelationship(\n                                    index,\n                                    \"is_required\",\n                                    e.target.checked\n                                  )\n                                }\n                              />\n                              <span className=\"text-xs\">필수</span>\n                            </label>\n                          </div>\n                        </div>\n                      </div>\n                    ))}\n                  </div>\n                )}\n              </div>\n            )}\n          </div>\n        </div>\n\n        {/* 공정 그룹 정의 섹션 */}\n        <div className=\"mt-8\">\n          <div className=\"glass-morphism p-6 rounded-xl\">\n            <h2 className=\"heading-2 mb-4\">📦 공정 그룹 정의</h2>\n            <p className=\"body-text-secondary mb-6\">\n              워크스페이스에서 공정 그룹을 만들어 놓으면 시각화에 있는 라우팅 순서를 출력할때 공정 그룹이 부 라우팅으로 같이 출력됩니다.\n            </p>\n            <RoutingGroupControls variant=\"embedded\" />\n          </div>\n        </div>\n      </div>\n\n      {/* 새 프로파일 모달 */}\n      {showNewProfileModal && (\n        <div\n          className=\"fixed inset-0 z-50 flex items-center justify-center bg-black/70 backdrop-blur-sm\"\n          onClick={() => setShowNewProfileModal(false)}\n        >\n          <div\n            className=\"glass-morphism p-8 rounded-xl w-full max-w-md\"\n            onClick={(e) => e.stopPropagation()}\n          >\n            <header className=\"flex items-center justify-between mb-6\">\n              <h2 className=\"heading-2\">새 프로파일</h2>\n              <button\n                type=\"button\"\n                className=\"btn-ghost p-2\"\n                onClick={() => setShowNewProfileModal(false)}\n              >\n                <X size={20} />\n              </button>\n            </header>\n\n            <div className=\"space-y-4\">\n              <div>\n                <label htmlFor=\"profile-name\" className=\"block text-sm font-medium mb-2\">\n                  프로파일 이름 <span className=\"text-red-400\">*</span>\n                </label>\n                <input\n                  id=\"profile-name\"\n                  type=\"text\"\n                  className=\"form-input w-full\"\n                  placeholder=\"예: 기본 매핑\"\n                  value={newProfileName}\n                  onChange={(e) => setNewProfileName(e.target.value)}\n                  autoFocus\n                />\n              </div>\n\n              <div>\n                <label htmlFor=\"profile-description\" className=\"block text-sm font-medium mb-2\">\n                  설명\n                </label>\n                <textarea\n                  id=\"profile-description\"\n                  className=\"form-input w-full resize-none\"\n                  rows={3}\n                  placeholder=\"프로파일 설명 (선택사항)\"\n                  value={newProfileDescription}\n                  onChange={(e) => setNewProfileDescription(e.target.value)}\n                />\n              </div>\n\n              <div className=\"flex gap-3 justify-end pt-4\">\n                <button\n                  type=\"button\"\n                  className=\"btn-ghost\"\n                  onClick={() => setShowNewProfileModal(false)}\n                >\n                  취소\n                </button>\n                <button\n                  type=\"button\"\n                  className=\"btn-primary neon-cyan\"\n                  onClick={handleCreateProfile}\n                  disabled={isLoading || !newProfileName.trim()}\n                >\n                  {isLoading ? \"생성 중...\" : \"생성\"}\n                </button>\n              </div>\n            </div>\n          </div>\n        </div>\n      )}\n    </div>\n  );\n}\n\n","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\syyun\\Documents\\GitHub\\Routing_ML_251014\\frontend-prediction\\src\\components\\auth\\LoginPage.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\syyun\\Documents\\GitHub\\Routing_ML_251014\\frontend-prediction\\src\\components\\common\\CardShell.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\syyun\\Documents\\GitHub\\Routing_ML_251014\\frontend-prediction\\src\\components\\common\\DialogContainer.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\syyun\\Documents\\GitHub\\Routing_ML_251014\\frontend-prediction\\src\\components\\common\\Toast.tsx","messages":[{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'handleClose'. Either include it or remove the dependency array.","line":102,"column":6,"nodeType":"ArrayExpression","endLine":102,"endColumn":32,"suggestions":[{"desc":"Update the dependencies array to be: [toast.id, toast.duration, handleClose]","fix":{"range":[2214,2240],"text":"[toast.id, toast.duration, handleClose]"}}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { AlertCircle, CheckCircle, Info, X, XCircle } from \"lucide-react\";\nimport { type CSSProperties,useEffect, useState } from \"react\";\n\nexport type ToastType = \"success\" | \"error\" | \"warning\" | \"info\";\n\nexport interface ToastMessage {\n  id: string;\n  type: ToastType;\n  message: string;\n  duration?: number;\n}\n\ninterface ToastProps {\n  toast: ToastMessage;\n  onClose: (id: string) => void;\n}\n\nconst toastContainerStyle: CSSProperties = {\n  position: \"fixed\",\n  top: \"1rem\",\n  right: \"1rem\",\n  zIndex: 9999,\n  display: \"flex\",\n  flexDirection: \"column\",\n  gap: \"0.75rem\",\n  pointerEvents: \"none\",\n};\n\nconst toastBaseStyle: CSSProperties = {\n  display: \"flex\",\n  alignItems: \"center\",\n  gap: \"0.75rem\",\n  padding: \"0.875rem 1rem\",\n  borderRadius: \"var(--layout-radius, 0.5rem)\",\n  boxShadow: \"0 4px 12px rgba(0, 0, 0, 0.15)\",\n  minWidth: \"300px\",\n  maxWidth: \"500px\",\n  fontSize: \"0.9rem\",\n  fontWeight: 500,\n  pointerEvents: \"auto\",\n  animation: \"slideInFromRight 0.3s ease-out\",\n  transition: \"all 0.3s ease\",\n};\n\nconst toastStyles: Record<ToastType, CSSProperties> = {\n  success: {\n    background: \"#10b981\",\n    color: \"#ffffff\",\n    border: \"1px solid #059669\",\n  },\n  error: {\n    background: \"#ef4444\",\n    color: \"#ffffff\",\n    border: \"1px solid #dc2626\",\n  },\n  warning: {\n    background: \"#f59e0b\",\n    color: \"#ffffff\",\n    border: \"1px solid #d97706\",\n  },\n  info: {\n    background: \"#3b82f6\",\n    color: \"#ffffff\",\n    border: \"1px solid #2563eb\",\n  },\n};\n\nconst iconStyle: CSSProperties = {\n  flexShrink: 0,\n};\n\nconst messageStyle: CSSProperties = {\n  flex: 1,\n  wordBreak: \"break-word\",\n};\n\nconst closeButtonStyle: CSSProperties = {\n  background: \"transparent\",\n  border: \"none\",\n  color: \"inherit\",\n  cursor: \"pointer\",\n  padding: \"0.25rem\",\n  display: \"flex\",\n  alignItems: \"center\",\n  justifyContent: \"center\",\n  borderRadius: \"0.25rem\",\n  opacity: 0.8,\n  transition: \"opacity 0.2s\",\n  flexShrink: 0,\n};\n\nfunction Toast({ toast, onClose }: ToastProps) {\n  const [isExiting, setIsExiting] = useState(false);\n\n  useEffect(() => {\n    const duration = toast.duration || 5000;\n    const timer = setTimeout(() => {\n      handleClose();\n    }, duration);\n\n    return () => clearTimeout(timer);\n  }, [toast.id, toast.duration]);\n\n  const handleClose = () => {\n    setIsExiting(true);\n    setTimeout(() => {\n      onClose(toast.id);\n    }, 300);\n  };\n\n  const getIcon = () => {\n    const size = 20;\n    switch (toast.type) {\n      case \"success\":\n        return <CheckCircle size={size} />;\n      case \"error\":\n        return <XCircle size={size} />;\n      case \"warning\":\n        return <AlertCircle size={size} />;\n      case \"info\":\n        return <Info size={size} />;\n    }\n  };\n\n  const style: CSSProperties = {\n    ...toastBaseStyle,\n    ...toastStyles[toast.type],\n    ...(isExiting ? { opacity: 0, transform: \"translateX(100%)\" } : {}),\n  };\n\n  return (\n    <div style={style} role=\"alert\">\n      <div style={iconStyle}>{getIcon()}</div>\n      <div style={messageStyle}>{toast.message}</div>\n      <button\n        type=\"button\"\n        onClick={handleClose}\n        style={closeButtonStyle}\n        onMouseEnter={(e) => (e.currentTarget.style.opacity = \"1\")}\n        onMouseLeave={(e) => (e.currentTarget.style.opacity = \"0.8\")}\n        aria-label=\"Close\"\n      >\n        <X size={16} />\n      </button>\n    </div>\n  );\n}\n\nexport interface ToastContainerProps {\n  toasts: ToastMessage[];\n  onClose: (id: string) => void;\n}\n\nexport function ToastContainer({ toasts, onClose }: ToastContainerProps) {\n  if (toasts.length === 0) {\n    return null;\n  }\n\n  return (\n    <>\n      <style>\n        {`\n          @keyframes slideInFromRight {\n            from {\n              opacity: 0;\n              transform: translateX(100%);\n            }\n            to {\n              opacity: 1;\n              transform: translateX(0);\n            }\n          }\n        `}\n      </style>\n      <div style={toastContainerStyle}>\n        {toasts.map((toast) => (\n          <Toast key={toast.id} toast={toast} onClose={onClose} />\n        ))}\n      </div>\n    </>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\syyun\\Documents\\GitHub\\Routing_ML_251014\\frontend-prediction\\src\\components\\data-quality\\AlertBell.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\syyun\\Documents\\GitHub\\Routing_ML_251014\\frontend-prediction\\src\\components\\data-quality\\AlertConfigModal.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\syyun\\Documents\\GitHub\\Routing_ML_251014\\frontend-prediction\\src\\components\\data-quality\\AlertDropdown.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'getSeverityColor' is assigned a value but never used.","line":68,"column":9,"nodeType":"Identifier","messageId":"unusedVar","endLine":68,"endColumn":25}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { format } from \"date-fns\";\nimport { AlertCircle, AlertTriangle, Check, Info, Trash2, X } from \"lucide-react\";\nimport React, { useEffect, useRef,useState } from \"react\";\nimport toast from \"react-hot-toast\";\n\nimport {\n  acknowledgeAlert,\n  clearAlertHistory,\n  getRecentAlerts,\n} from \"../../services/alertService\";\nimport type { Alert, AlertSeverity } from \"../../types/alerts\";\n\ninterface AlertDropdownProps {\n  onClose: () => void;\n  onAlertsUpdated: () => void;\n}\n\nexport function AlertDropdown({ onClose, onAlertsUpdated }: AlertDropdownProps) {\n  const [alerts, setAlerts] = useState<Alert[]>([]);\n  const dropdownRef = useRef<HTMLDivElement>(null);\n\n  useEffect(() => {\n    loadAlerts();\n\n    // Close dropdown when clicking outside\n    const handleClickOutside = (event: MouseEvent) => {\n      if (dropdownRef.current && !dropdownRef.current.contains(event.target as Node)) {\n        onClose();\n      }\n    };\n\n    document.addEventListener(\"mousedown\", handleClickOutside);\n    return () => document.removeEventListener(\"mousedown\", handleClickOutside);\n  }, [onClose]);\n\n  const loadAlerts = () => {\n    const recentAlerts = getRecentAlerts(20);\n    setAlerts(recentAlerts);\n  };\n\n  const handleAcknowledge = (alertId: string) => {\n    acknowledgeAlert(alertId);\n    loadAlerts();\n    onAlertsUpdated();\n    toast.success(\"Alert acknowledged\");\n  };\n\n  const handleClearAll = () => {\n    if (confirm(\"Are you sure you want to clear all alert history?\")) {\n      clearAlertHistory();\n      loadAlerts();\n      onAlertsUpdated();\n      toast.success(\"Alert history cleared\");\n    }\n  };\n\n  const getSeverityIcon = (severity: AlertSeverity) => {\n    switch (severity) {\n      case \"critical\":\n        return <AlertCircle size={16} className=\"text-red-400\" />;\n      case \"warning\":\n        return <AlertTriangle size={16} className=\"text-yellow-400\" />;\n      case \"info\":\n        return <Info size={16} className=\"text-blue-400\" />;\n    }\n  };\n\n  const getSeverityColor = (severity: AlertSeverity) => {\n    switch (severity) {\n      case \"critical\":\n        return \"bg-red-900/20 border-red-800\";\n      case \"warning\":\n        return \"bg-yellow-900/20 border-yellow-800\";\n      case \"info\":\n        return \"bg-blue-900/20 border-blue-800\";\n    }\n  };\n\n  const unacknowledgedAlerts = alerts.filter((a) => !a.acknowledged);\n\n  return (\n    <div\n      ref={dropdownRef}\n      className=\"absolute right-0 top-12 w-96 bg-gray-900 rounded-lg shadow-xl border border-gray-700 z-50 max-h-[600px] flex flex-col\"\n    >\n      {/* Header */}\n      <div className=\"flex items-center justify-between p-4 border-b border-gray-700\">\n        <div>\n          <h3 className=\"text-white font-medium\">Alerts</h3>\n          {unacknowledgedAlerts.length > 0 && (\n            <p className=\"text-xs text-gray-400 mt-0.5\">\n              {unacknowledgedAlerts.length} unacknowledged\n            </p>\n          )}\n        </div>\n        <div className=\"flex items-center gap-2\">\n          {alerts.length > 0 && (\n            <button\n              onClick={handleClearAll}\n              className=\"p-1.5 text-gray-400 hover:text-red-400 transition-colors\"\n              title=\"Clear all\"\n            >\n              <Trash2 size={16} />\n            </button>\n          )}\n          <button\n            onClick={onClose}\n            className=\"p-1.5 text-gray-400 hover:text-white transition-colors\"\n            title=\"Close\"\n          >\n            <X size={16} />\n          </button>\n        </div>\n      </div>\n\n      {/* Alert List */}\n      <div className=\"flex-1 overflow-y-auto\">\n        {alerts.length === 0 ? (\n          <div className=\"flex flex-col items-center justify-center py-12 text-gray-400\">\n            <AlertCircle size={48} className=\"mb-2 opacity-50\" />\n            <p className=\"text-sm\">No alerts</p>\n          </div>\n        ) : (\n          <div className=\"divide-y divide-gray-800\">\n            {alerts.map((alert) => (\n              <div\n                key={alert.id}\n                className={`p-4 hover:bg-gray-800/50 transition-colors ${\n                  alert.acknowledged ? \"opacity-60\" : \"\"\n                }`}\n              >\n                <div className=\"flex items-start gap-3\">\n                  <div className=\"flex-shrink-0 mt-0.5\">\n                    {getSeverityIcon(alert.severity)}\n                  </div>\n\n                  <div className=\"flex-1 min-w-0\">\n                    <div className=\"flex items-start justify-between gap-2 mb-1\">\n                      <h4 className=\"text-sm font-medium text-white\">\n                        {alert.ruleName}\n                      </h4>\n                      {alert.acknowledged && (\n                        <span className=\"flex-shrink-0 text-green-400\" title=\"Acknowledged\">\n                          <Check size={14} />\n                        </span>\n                      )}\n                    </div>\n\n                    <p className=\"text-xs text-gray-400 mb-2\">{alert.message}</p>\n\n                    <div className=\"flex items-center justify-between\">\n                      <span className=\"text-xs text-gray-500\">\n                        {format(new Date(alert.timestamp), \"MMM d, HH:mm\")}\n                      </span>\n\n                      {!alert.acknowledged && (\n                        <button\n                          onClick={() => handleAcknowledge(alert.id)}\n                          className=\"text-xs text-blue-400 hover:text-blue-300 transition-colors\"\n                        >\n                          Acknowledge\n                        </button>\n                      )}\n                    </div>\n                  </div>\n                </div>\n              </div>\n            ))}\n          </div>\n        )}\n      </div>\n\n      {/* Footer */}\n      {alerts.length > 0 && (\n        <div className=\"p-3 border-t border-gray-700 text-center\">\n          <p className=\"text-xs text-gray-500\">\n            Showing {Math.min(alerts.length, 20)} most recent alerts\n          </p>\n        </div>\n      )}\n    </div>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\syyun\\Documents\\GitHub\\Routing_ML_251014\\frontend-prediction\\src\\components\\data-quality\\ExportButton.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\syyun\\Documents\\GitHub\\Routing_ML_251014\\frontend-prediction\\src\\components\\data-quality\\HealthPanel.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\syyun\\Documents\\GitHub\\Routing_ML_251014\\frontend-prediction\\src\\components\\data-quality\\HistoricalIssuesChart.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'TooltipProps' is defined but never used.","line":12,"column":3,"nodeType":"Identifier","messageId":"unusedVar","endLine":12,"endColumn":15},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'ChartDataPoint' is defined but never used.","line":27,"column":11,"nodeType":"Identifier","messageId":"unusedVar","endLine":27,"endColumn":25},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":36,"column":52,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":36,"endColumn":55,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[724,727],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[724,727],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":39,"column":53,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":39,"endColumn":56,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[843,846],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[843,846],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":45,"column":30,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":45,"endColumn":33,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1110,1113],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1110,1113],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":5,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import type { DataQualityIssue } from \"@lib/apiClient\";\nimport { format } from \"date-fns\";\nimport { AlertCircle, AlertTriangle, Info } from \"lucide-react\";\nimport React, { useMemo } from \"react\";\nimport {\n  Bar,\n  BarChart,\n  CartesianGrid,\n  Legend,\n  ResponsiveContainer,\n  Tooltip,\n  TooltipProps,\n  XAxis,\n  YAxis,\n} from \"recharts\";\n\nexport interface HistoricalIssuesDataPoint {\n  timestamp: string;\n  issues: DataQualityIssue[];\n}\n\ninterface HistoricalIssuesChartProps {\n  data: HistoricalIssuesDataPoint[];\n  height?: number;\n}\n\ninterface ChartDataPoint {\n  timestamp: string;\n  date: Date;\n  critical: number;\n  warning: number;\n  info: number;\n  total: number;\n}\n\nfunction CustomTooltip({ active, payload, label }: any) {\n  if (!active || !payload || !payload.length) return null;\n\n  const total = payload.reduce((sum: number, entry: any) => sum + (entry.value || 0), 0);\n\n  return (\n    <div className=\"bg-gray-800 border border-gray-700 rounded-lg p-3 shadow-xl\">\n      <p className=\"text-sm text-gray-300 mb-2 font-medium\">{label}</p>\n      <div className=\"space-y-1\">\n        {payload.map((entry: any, index: number) => (\n          <div key={index} className=\"flex items-center justify-between gap-4 text-sm\">\n            <div className=\"flex items-center gap-2\">\n              <div\n                className=\"w-3 h-3 rounded\"\n                style={{ backgroundColor: entry.color }}\n              />\n              <span className=\"text-gray-400\">{entry.name}:</span>\n            </div>\n            <span className=\"font-medium text-white\">{entry.value}</span>\n          </div>\n        ))}\n        <div className=\"pt-2 mt-2 border-t border-gray-700 flex justify-between text-sm\">\n          <span className=\"text-gray-400\">Total:</span>\n          <span className=\"font-bold text-white\">{total}</span>\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport function HistoricalIssuesChart({\n  data,\n  height = 300,\n}: HistoricalIssuesChartProps) {\n  const chartData = useMemo(() => {\n    if (!data || data.length === 0) return [];\n\n    return data.map((point) => {\n      const critical = point.issues.filter((i) => i.severity === \"critical\").length;\n      const warning = point.issues.filter((i) => i.severity === \"warning\").length;\n      const info = point.issues.filter((i) => i.severity === \"info\").length;\n\n      return {\n        timestamp: format(new Date(point.timestamp), \"MMM d, HH:mm\"),\n        date: new Date(point.timestamp),\n        critical,\n        warning,\n        info,\n        total: critical + warning + info,\n      };\n    });\n  }, [data]);\n\n  const summary = useMemo(() => {\n    if (chartData.length === 0) return null;\n\n    const totals = chartData.reduce(\n      (acc, point) => ({\n        critical: acc.critical + point.critical,\n        warning: acc.warning + point.warning,\n        info: acc.info + point.info,\n        total: acc.total + point.total,\n      }),\n      { critical: 0, warning: 0, info: 0, total: 0 }\n    );\n\n    const avg = {\n      critical: (totals.critical / chartData.length).toFixed(1),\n      warning: (totals.warning / chartData.length).toFixed(1),\n      info: (totals.info / chartData.length).toFixed(1),\n      total: (totals.total / chartData.length).toFixed(1),\n    };\n\n    return { totals, avg };\n  }, [chartData]);\n\n  if (data.length === 0) {\n    return (\n      <div className=\"flex items-center justify-center h-64 bg-gray-800/50 rounded-lg border border-gray-700\">\n        <p className=\"text-gray-400\">No historical issue data available</p>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"space-y-4\">\n      {/* Summary Cards */}\n      {summary && (\n        <div className=\"grid grid-cols-4 gap-3\">\n          <div className=\"bg-red-900/20 border border-red-800/50 rounded-lg p-3\">\n            <div className=\"flex items-center gap-2 mb-1\">\n              <AlertCircle size={16} className=\"text-red-400\" />\n              <span className=\"text-xs text-gray-400\">Critical</span>\n            </div>\n            <div className=\"flex items-baseline gap-2\">\n              <span className=\"text-2xl font-bold text-red-400\">{summary.totals.critical}</span>\n              <span className=\"text-xs text-gray-500\">avg {summary.avg.critical}</span>\n            </div>\n          </div>\n\n          <div className=\"bg-yellow-900/20 border border-yellow-800/50 rounded-lg p-3\">\n            <div className=\"flex items-center gap-2 mb-1\">\n              <AlertTriangle size={16} className=\"text-yellow-400\" />\n              <span className=\"text-xs text-gray-400\">Warning</span>\n            </div>\n            <div className=\"flex items-baseline gap-2\">\n              <span className=\"text-2xl font-bold text-yellow-400\">{summary.totals.warning}</span>\n              <span className=\"text-xs text-gray-500\">avg {summary.avg.warning}</span>\n            </div>\n          </div>\n\n          <div className=\"bg-blue-900/20 border border-blue-800/50 rounded-lg p-3\">\n            <div className=\"flex items-center gap-2 mb-1\">\n              <Info size={16} className=\"text-blue-400\" />\n              <span className=\"text-xs text-gray-400\">Info</span>\n            </div>\n            <div className=\"flex items-baseline gap-2\">\n              <span className=\"text-2xl font-bold text-blue-400\">{summary.totals.info}</span>\n              <span className=\"text-xs text-gray-500\">avg {summary.avg.info}</span>\n            </div>\n          </div>\n\n          <div className=\"bg-gray-800/50 border border-gray-700 rounded-lg p-3\">\n            <div className=\"flex items-center gap-2 mb-1\">\n              <span className=\"text-xs text-gray-400\">Total Issues</span>\n            </div>\n            <div className=\"flex items-baseline gap-2\">\n              <span className=\"text-2xl font-bold text-white\">{summary.totals.total}</span>\n              <span className=\"text-xs text-gray-500\">avg {summary.avg.total}</span>\n            </div>\n          </div>\n        </div>\n      )}\n\n      {/* Chart */}\n      <div className=\"bg-gray-800/50 rounded-lg p-4 border border-gray-700\">\n        <ResponsiveContainer width=\"100%\" height={height}>\n          <BarChart data={chartData} margin={{ top: 5, right: 30, left: 20, bottom: 5 }}>\n            <CartesianGrid strokeDasharray=\"3 3\" stroke=\"#374151\" />\n            <XAxis\n              dataKey=\"timestamp\"\n              stroke=\"#9CA3AF\"\n              tick={{ fill: \"#9CA3AF\", fontSize: 12 }}\n            />\n            <YAxis\n              stroke=\"#9CA3AF\"\n              tick={{ fill: \"#9CA3AF\", fontSize: 12 }}\n              label={{ value: \"Issue Count\", angle: -90, position: \"insideLeft\", fill: \"#9CA3AF\" }}\n            />\n            <Tooltip content={<CustomTooltip />} />\n            <Legend\n              wrapperStyle={{ paddingTop: \"20px\" }}\n              iconType=\"square\"\n            />\n            <Bar\n              dataKey=\"critical\"\n              stackId=\"a\"\n              fill=\"#EF4444\"\n              name=\"Critical\"\n              radius={[0, 0, 0, 0]}\n            />\n            <Bar\n              dataKey=\"warning\"\n              stackId=\"a\"\n              fill=\"#F59E0B\"\n              name=\"Warning\"\n              radius={[0, 0, 0, 0]}\n            />\n            <Bar\n              dataKey=\"info\"\n              stackId=\"a\"\n              fill=\"#3B82F6\"\n              name=\"Info\"\n              radius={[4, 4, 0, 0]}\n            />\n          </BarChart>\n        </ResponsiveContainer>\n      </div>\n    </div>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\syyun\\Documents\\GitHub\\Routing_ML_251014\\frontend-prediction\\src\\components\\data-quality\\HistoricalMetricsChart.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'TooltipProps' is defined but never used.","line":12,"column":3,"nodeType":"Identifier","messageId":"unusedVar","endLine":12,"endColumn":15},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":40,"column":52,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":40,"endColumn":55,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[863,866],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[863,866],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":46,"column":28,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":46,"endColumn":31,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1110,1113],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1110,1113],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":3,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import type { DataQualityMetrics } from \"@lib/apiClient\";\nimport { format } from \"date-fns\";\nimport { Minus,TrendingDown, TrendingUp } from \"lucide-react\";\nimport React, { useMemo } from \"react\";\nimport {\n  CartesianGrid,\n  Legend,\n  Line,\n  LineChart,\n  ResponsiveContainer,\n  Tooltip,\n  TooltipProps,\n  XAxis,\n  YAxis,\n} from \"recharts\";\n\nexport interface HistoricalDataPoint {\n  timestamp: string;\n  metrics: DataQualityMetrics;\n}\n\ninterface HistoricalMetricsChartProps {\n  data: HistoricalDataPoint[];\n  showComparison?: boolean;\n  comparisonData?: HistoricalDataPoint[];\n  height?: number;\n}\n\ninterface ChartDataPoint {\n  timestamp: string;\n  date: Date;\n  completeness: number;\n  validity: number;\n  consistency: number;\n  prevCompleteness?: number;\n  prevValidity?: number;\n  prevConsistency?: number;\n}\n\nfunction CustomTooltip({ active, payload, label }: any) {\n  if (!active || !payload || !payload.length) return null;\n\n  return (\n    <div className=\"bg-gray-800 border border-gray-700 rounded-lg p-3 shadow-xl\">\n      <p className=\"text-sm text-gray-300 mb-2\">{label}</p>\n      {payload.map((entry: any, index: number) => (\n        <div key={index} className=\"flex items-center gap-2 text-sm\">\n          <div\n            className=\"w-3 h-3 rounded\"\n            style={{ backgroundColor: entry.color }}\n          />\n          <span className=\"text-gray-400\">{entry.name}:</span>\n          <span className=\"font-medium text-white\">{entry.value?.toFixed(1)}%</span>\n        </div>\n      ))}\n    </div>\n  );\n}\n\nfunction calculateTrend(current: number, previous: number): { value: number; direction: \"up\" | \"down\" | \"neutral\" } {\n  const diff = current - previous;\n  const direction = diff > 0.5 ? \"up\" : diff < -0.5 ? \"down\" : \"neutral\";\n  return { value: Math.abs(diff), direction };\n}\n\nexport function HistoricalMetricsChart({\n  data,\n  showComparison = false,\n  comparisonData,\n  height = 400,\n}: HistoricalMetricsChartProps) {\n  const chartData = useMemo(() => {\n    if (!data || data.length === 0) return [];\n\n    return data.map((point) => {\n      const dataPoint: ChartDataPoint = {\n        timestamp: format(new Date(point.timestamp), \"MMM d, HH:mm\"),\n        date: new Date(point.timestamp),\n        completeness: point.metrics.completeness,\n        validity: point.metrics.validity,\n        consistency: point.metrics.consistency,\n      };\n\n      // Add comparison data if available\n      if (showComparison && comparisonData) {\n        const matchingComparison = comparisonData.find(\n          (cp) => format(new Date(cp.timestamp), \"MMM d, HH:mm\") === dataPoint.timestamp\n        );\n        if (matchingComparison) {\n          dataPoint.prevCompleteness = matchingComparison.metrics.completeness;\n          dataPoint.prevValidity = matchingComparison.metrics.validity;\n          dataPoint.prevConsistency = matchingComparison.metrics.consistency;\n        }\n      }\n\n      return dataPoint;\n    });\n  }, [data, showComparison, comparisonData]);\n\n  const latestMetrics = useMemo(() => {\n    if (chartData.length === 0) return null;\n    const latest = chartData[chartData.length - 1];\n    const previous = chartData.length > 1 ? chartData[chartData.length - 2] : latest;\n\n    return {\n      completeness: calculateTrend(latest.completeness, previous.completeness),\n      validity: calculateTrend(latest.validity, previous.validity),\n      consistency: calculateTrend(latest.consistency, previous.consistency),\n    };\n  }, [chartData]);\n\n  if (data.length === 0) {\n    return (\n      <div className=\"flex items-center justify-center h-64 bg-gray-800/50 rounded-lg border border-gray-700\">\n        <p className=\"text-gray-400\">No historical data available</p>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"space-y-4\">\n      {/* Trend Indicators */}\n      {latestMetrics && (\n        <div className=\"grid grid-cols-3 gap-4\">\n          {[\n            { name: \"Completeness\", trend: latestMetrics.completeness, color: \"text-blue-400\" },\n            { name: \"Validity\", trend: latestMetrics.validity, color: \"text-green-400\" },\n            { name: \"Consistency\", trend: latestMetrics.consistency, color: \"text-purple-400\" },\n          ].map((metric) => (\n            <div key={metric.name} className=\"bg-gray-800/50 rounded-lg p-3 border border-gray-700\">\n              <div className=\"flex items-center justify-between\">\n                <span className=\"text-sm text-gray-400\">{metric.name}</span>\n                <div className=\"flex items-center gap-1\">\n                  {metric.trend.direction === \"up\" && (\n                    <TrendingUp size={14} className=\"text-green-500\" />\n                  )}\n                  {metric.trend.direction === \"down\" && (\n                    <TrendingDown size={14} className=\"text-red-500\" />\n                  )}\n                  {metric.trend.direction === \"neutral\" && (\n                    <Minus size={14} className=\"text-gray-500\" />\n                  )}\n                  <span\n                    className={`text-xs font-medium ${\n                      metric.trend.direction === \"up\"\n                        ? \"text-green-500\"\n                        : metric.trend.direction === \"down\"\n                        ? \"text-red-500\"\n                        : \"text-gray-500\"\n                    }`}\n                  >\n                    {metric.trend.value.toFixed(1)}%\n                  </span>\n                </div>\n              </div>\n            </div>\n          ))}\n        </div>\n      )}\n\n      {/* Chart */}\n      <div className=\"bg-gray-800/50 rounded-lg p-4 border border-gray-700\">\n        <ResponsiveContainer width=\"100%\" height={height}>\n          <LineChart data={chartData} margin={{ top: 5, right: 30, left: 20, bottom: 5 }}>\n            <CartesianGrid strokeDasharray=\"3 3\" stroke=\"#374151\" />\n            <XAxis\n              dataKey=\"timestamp\"\n              stroke=\"#9CA3AF\"\n              tick={{ fill: \"#9CA3AF\", fontSize: 12 }}\n            />\n            <YAxis\n              domain={[0, 100]}\n              stroke=\"#9CA3AF\"\n              tick={{ fill: \"#9CA3AF\", fontSize: 12 }}\n              label={{ value: \"Score (%)\", angle: -90, position: \"insideLeft\", fill: \"#9CA3AF\" }}\n            />\n            <Tooltip content={<CustomTooltip />} />\n            <Legend\n              wrapperStyle={{ paddingTop: \"20px\" }}\n              iconType=\"line\"\n            />\n\n            {/* Current Period Lines */}\n            <Line\n              type=\"monotone\"\n              dataKey=\"completeness\"\n              stroke=\"#3B82F6\"\n              strokeWidth={2}\n              dot={{ fill: \"#3B82F6\", r: 4 }}\n              activeDot={{ r: 6 }}\n              name=\"Completeness\"\n            />\n            <Line\n              type=\"monotone\"\n              dataKey=\"validity\"\n              stroke=\"#10B981\"\n              strokeWidth={2}\n              dot={{ fill: \"#10B981\", r: 4 }}\n              activeDot={{ r: 6 }}\n              name=\"Validity\"\n            />\n            <Line\n              type=\"monotone\"\n              dataKey=\"consistency\"\n              stroke=\"#8B5CF6\"\n              strokeWidth={2}\n              dot={{ fill: \"#8B5CF6\", r: 4 }}\n              activeDot={{ r: 6 }}\n              name=\"Consistency\"\n            />\n\n            {/* Comparison Period Lines (dashed) */}\n            {showComparison && (\n              <>\n                <Line\n                  type=\"monotone\"\n                  dataKey=\"prevCompleteness\"\n                  stroke=\"#3B82F6\"\n                  strokeWidth={1}\n                  strokeDasharray=\"5 5\"\n                  dot={false}\n                  name=\"Prev Completeness\"\n                />\n                <Line\n                  type=\"monotone\"\n                  dataKey=\"prevValidity\"\n                  stroke=\"#10B981\"\n                  strokeWidth={1}\n                  strokeDasharray=\"5 5\"\n                  dot={false}\n                  name=\"Prev Validity\"\n                />\n                <Line\n                  type=\"monotone\"\n                  dataKey=\"prevConsistency\"\n                  stroke=\"#8B5CF6\"\n                  strokeWidth={1}\n                  strokeDasharray=\"5 5\"\n                  dot={false}\n                  name=\"Prev Consistency\"\n                />\n              </>\n            )}\n          </LineChart>\n        </ResponsiveContainer>\n      </div>\n    </div>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\syyun\\Documents\\GitHub\\Routing_ML_251014\\frontend-prediction\\src\\components\\data-quality\\IssueBadge.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\syyun\\Documents\\GitHub\\Routing_ML_251014\\frontend-prediction\\src\\components\\data-quality\\IssueFilter.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\syyun\\Documents\\GitHub\\Routing_ML_251014\\frontend-prediction\\src\\components\\data-quality\\IssuesPanel.tsx","messages":[{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has missing dependencies: 'customDateRange', 'historicalData.length', and 'selectedTimeRange'. Either include them or remove the dependency array.","line":79,"column":6,"nodeType":"ArrayExpression","endLine":79,"endColumn":22,"suggestions":[{"desc":"Update the dependencies array to be: [customDateRange, historicalData.length, selectedTimeRange, showHistorical]","fix":{"range":[2830,2846],"text":"[customDateRange, historicalData.length, selectedTimeRange, showHistorical]"}}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import {\n  type DataQualityIssue,\n  type DataQualityReport,\n  fetchDataQualityReport,\n  fetchHistoricalIssues,\n  type HistoricalIssuesDataPoint\n} from \"@lib/apiClient\";\nimport { BarChart3,ChevronDown, ChevronUp, RefreshCw } from \"lucide-react\";\nimport { useEffect, useState } from \"react\";\nimport toast, { Toaster } from \"react-hot-toast\";\n\nimport { exportIssuesToCSV, exportIssuesToPDF } from \"../../services/exportService\";\nimport { ExportButton, type ExportFormat } from \"./ExportButton\";\nimport { HistoricalIssuesChart } from \"./HistoricalIssuesChart\";\nimport { IssueBadge, type IssueSeverity } from \"./IssueBadge\";\nimport { IssueFilter } from \"./IssueFilter\";\nimport { type DateRange, getDateRangeFromSelection,type TimeRange, TimeRangeSelector } from \"./TimeRangeSelector\";\n\nconst SEVERITY_ORDER: Record<IssueSeverity, number> = {\n  critical: 3,\n  warning: 2,\n  info: 1,\n};\n\ntype SortField = \"timestamp\" | \"severity\" | \"type\" | \"affectedRecords\";\ntype SortOrder = \"asc\" | \"desc\";\n\nexport function IssuesPanel() {\n  const [report, setReport] = useState<DataQualityReport | null>(null);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState<string | null>(null);\n  const [lastUpdated, setLastUpdated] = useState<Date | null>(null);\n  const [isRefreshing, setIsRefreshing] = useState(false);\n\n  // Filtering\n  const [selectedSeverities, setSelectedSeverities] = useState<Set<IssueSeverity | \"all\">>(\n    new Set([\"all\"])\n  );\n\n  // Sorting\n  const [sortField, setSortField] = useState<SortField>(\"timestamp\");\n  const [sortOrder, setSortOrder] = useState<SortOrder>(\"desc\");\n\n  // Historical data state\n  const [showHistorical, setShowHistorical] = useState(false);\n  const [selectedTimeRange, setSelectedTimeRange] = useState<TimeRange>(\"7d\");\n  const [customDateRange, setCustomDateRange] = useState<DateRange | undefined>();\n  const [historicalData, setHistoricalData] = useState<HistoricalIssuesDataPoint[]>([]);\n  const [historicalLoading, setHistoricalLoading] = useState(false);\n\n  const loadReport = async (showSpinner = true) => {\n    try {\n      if (showSpinner) {\n        setIsRefreshing(true);\n      }\n      setError(null);\n      const data = await fetchDataQualityReport();\n      setReport(data);\n      setLastUpdated(new Date());\n    } catch (err) {\n      console.error(\"Failed to load report:\", err);\n      setError(err instanceof Error ? err.message : \"Failed to load report\");\n    } finally {\n      setLoading(false);\n      setIsRefreshing(false);\n    }\n  };\n\n  useEffect(() => {\n    loadReport();\n  }, []);\n\n  // Load historical data when toggled\n  useEffect(() => {\n    if (showHistorical && historicalData.length === 0) {\n      const dateRange = getDateRangeFromSelection(selectedTimeRange, customDateRange);\n      loadHistoricalData(selectedTimeRange, dateRange);\n    }\n  }, [showHistorical]);\n\n  const loadHistoricalData = async (range: TimeRange, dateRange: DateRange) => {\n    try {\n      setHistoricalLoading(true);\n      const response = await fetchHistoricalIssues({\n        startDate: dateRange.start.toISOString(),\n        endDate: dateRange.end.toISOString(),\n        interval: \"1h\",\n      });\n      setHistoricalData(response.dataPoints);\n    } catch (err) {\n      console.error(\"Failed to load historical issues:\", err);\n      toast.error(\"Failed to load historical issues\");\n    } finally {\n      setHistoricalLoading(false);\n    }\n  };\n\n  const handleTimeRangeChange = (range: TimeRange, dateRange: DateRange) => {\n    setSelectedTimeRange(range);\n    if (range === \"custom\") {\n      setCustomDateRange(dateRange);\n    }\n    loadHistoricalData(range, dateRange);\n  };\n\n  const handleManualRefresh = () => {\n    loadReport(true);\n    if (showHistorical) {\n      const dateRange = getDateRangeFromSelection(selectedTimeRange, customDateRange);\n      loadHistoricalData(selectedTimeRange, dateRange);\n    }\n  };\n\n  const handleExport = async (format: ExportFormat) => {\n    try {\n      const timestamp = new Date().toISOString().split(\"T\")[0];\n      const filename = `data-quality-issues-${timestamp}`;\n\n      if (format === \"csv\") {\n        exportIssuesToCSV(filteredIssues, { filename: `${filename}.csv` });\n        toast.success(`Exported ${filteredIssues.length} issues to CSV`);\n      } else {\n        exportIssuesToPDF(filteredIssues, {\n          filename: `${filename}.pdf`,\n          title: \"Data Quality Issues Report\",\n        });\n        toast.success(`Exported ${filteredIssues.length} issues to PDF`);\n      }\n    } catch (error) {\n      console.error(\"Export failed:\", error);\n      toast.error(\"Export failed. Please try again.\");\n    }\n  };\n\n  const handleFilterChange = (severity: IssueSeverity | \"all\") => {\n    const newSelected = new Set(selectedSeverities);\n\n    if (severity === \"all\") {\n      newSelected.clear();\n      newSelected.add(\"all\");\n    } else {\n      newSelected.delete(\"all\");\n      if (newSelected.has(severity)) {\n        newSelected.delete(severity);\n      } else {\n        newSelected.add(severity);\n      }\n\n      // If no specific severity selected, select \"all\"\n      if (newSelected.size === 0) {\n        newSelected.add(\"all\");\n      }\n    }\n\n    setSelectedSeverities(newSelected);\n  };\n\n  const handleSort = (field: SortField) => {\n    if (sortField === field) {\n      setSortOrder(sortOrder === \"asc\" ? \"desc\" : \"asc\");\n    } else {\n      setSortField(field);\n      setSortOrder(\"desc\");\n    }\n  };\n\n  const getFilteredAndSortedIssues = (): DataQualityIssue[] => {\n    if (!report) return [];\n\n    let filtered = report.issues;\n\n    // Apply filter\n    if (!selectedSeverities.has(\"all\")) {\n      filtered = filtered.filter((issue) =>\n        selectedSeverities.has(issue.severity)\n      );\n    }\n\n    // Apply sort\n    const sorted = [...filtered].sort((a, b) => {\n      let comparison = 0;\n\n      switch (sortField) {\n        case \"timestamp\":\n          comparison = new Date(a.timestamp).getTime() - new Date(b.timestamp).getTime();\n          break;\n        case \"severity\":\n          comparison = SEVERITY_ORDER[a.severity] - SEVERITY_ORDER[b.severity];\n          break;\n        case \"type\":\n          comparison = a.type.localeCompare(b.type);\n          break;\n        case \"affectedRecords\":\n          comparison = a.affectedRecords - b.affectedRecords;\n          break;\n      }\n\n      return sortOrder === \"asc\" ? comparison : -comparison;\n    });\n\n    return sorted;\n  };\n\n  const filteredIssues = getFilteredAndSortedIssues();\n\n  const getCounts = () => {\n    if (!report) return { all: 0, critical: 0, warning: 0, info: 0 };\n    return {\n      all: report.issues.length,\n      critical: report.summary.critical,\n      warning: report.summary.warning,\n      info: report.summary.info,\n    };\n  };\n\n  if (loading) {\n    return (\n      <div className=\"flex items-center justify-center h-64\">\n        <div className=\"text-gray-400\">Loading issues...</div>\n      </div>\n    );\n  }\n\n  if (error) {\n    return (\n      <div className=\"flex flex-col items-center justify-center h-64 gap-4\">\n        <div className=\"text-red-400\">Error: {error}</div>\n        <button\n          onClick={handleManualRefresh}\n          className=\"px-4 py-2 bg-blue-600 hover:bg-blue-700 text-white rounded-md\"\n        >\n          Retry\n        </button>\n      </div>\n    );\n  }\n\n  if (!report) {\n    return (\n      <div className=\"flex items-center justify-center h-64\">\n        <div className=\"text-gray-400\">No report data available</div>\n      </div>\n    );\n  }\n\n  const SortIcon = ({ field }: { field: SortField }) => {\n    if (sortField !== field) return null;\n    return sortOrder === \"asc\" ? (\n      <ChevronUp size={14} className=\"inline ml-1\" />\n    ) : (\n      <ChevronDown size={14} className=\"inline ml-1\" />\n    );\n  };\n\n  return (\n    <div className=\"space-y-6\">\n      <Toaster position=\"top-right\" />\n\n      {/* Header with refresh and export buttons */}\n      <div className=\"flex items-center justify-between\">\n        <div>\n          <h2 className=\"text-xl font-semibold text-white\">Data Quality Issues</h2>\n          {lastUpdated && (\n            <p className=\"text-sm text-gray-400 mt-1\">\n              Last updated: {lastUpdated.toLocaleTimeString()}\n            </p>\n          )}\n        </div>\n        <div className=\"flex gap-2\">\n          <ExportButton\n            onExport={handleExport}\n            exportType=\"issues\"\n            disabled={filteredIssues.length === 0}\n          />\n          <button\n            onClick={handleManualRefresh}\n            disabled={isRefreshing}\n            className=\"flex items-center gap-2 px-4 py-2 bg-gray-800 hover:bg-gray-700 text-white rounded-md transition-colors disabled:opacity-50\"\n          >\n            <RefreshCw\n              size={16}\n              className={isRefreshing ? \"animate-spin\" : \"\"}\n            />\n            Refresh\n          </button>\n        </div>\n      </div>\n\n      {/* Summary Cards */}\n      <div className=\"grid grid-cols-1 md:grid-cols-4 gap-4\">\n        <div className=\"bg-gray-800/50 rounded-lg p-4 border border-gray-700\">\n          <div className=\"text-sm text-gray-400\">Total Issues</div>\n          <div className=\"text-3xl font-bold text-white mt-2\">{report.issues.length}</div>\n        </div>\n        <div className=\"bg-red-500/10 rounded-lg p-4 border border-red-500/30\">\n          <div className=\"text-sm text-red-400\">Critical</div>\n          <div className=\"text-3xl font-bold text-red-400 mt-2\">{report.summary.critical}</div>\n        </div>\n        <div className=\"bg-yellow-500/10 rounded-lg p-4 border border-yellow-500/30\">\n          <div className=\"text-sm text-yellow-400\">Warning</div>\n          <div className=\"text-3xl font-bold text-yellow-400 mt-2\">{report.summary.warning}</div>\n        </div>\n        <div className=\"bg-blue-500/10 rounded-lg p-4 border border-blue-500/30\">\n          <div className=\"text-sm text-blue-400\">Info</div>\n          <div className=\"text-3xl font-bold text-blue-400 mt-2\">{report.summary.info}</div>\n        </div>\n      </div>\n\n      {/* Filter */}\n      <IssueFilter\n        selectedSeverities={selectedSeverities}\n        onFilterChange={handleFilterChange}\n        counts={getCounts()}\n      />\n\n      {/* Issues Table */}\n      <div className=\"bg-gray-800/50 rounded-lg border border-gray-700 overflow-hidden\">\n        <div className=\"overflow-x-auto\">\n          <table className=\"w-full\">\n            <thead className=\"bg-gray-800 border-b border-gray-700\">\n              <tr>\n                <th\n                  className=\"px-4 py-3 text-left text-xs font-medium text-gray-400 uppercase tracking-wider cursor-pointer hover:text-gray-300\"\n                  onClick={() => handleSort(\"severity\")}\n                >\n                  Severity <SortIcon field=\"severity\" />\n                </th>\n                <th\n                  className=\"px-4 py-3 text-left text-xs font-medium text-gray-400 uppercase tracking-wider cursor-pointer hover:text-gray-300\"\n                  onClick={() => handleSort(\"type\")}\n                >\n                  Type <SortIcon field=\"type\" />\n                </th>\n                <th className=\"px-4 py-3 text-left text-xs font-medium text-gray-400 uppercase tracking-wider\">\n                  Message\n                </th>\n                <th\n                  className=\"px-4 py-3 text-left text-xs font-medium text-gray-400 uppercase tracking-wider cursor-pointer hover:text-gray-300\"\n                  onClick={() => handleSort(\"affectedRecords\")}\n                >\n                  Affected Records <SortIcon field=\"affectedRecords\" />\n                </th>\n                <th\n                  className=\"px-4 py-3 text-left text-xs font-medium text-gray-400 uppercase tracking-wider cursor-pointer hover:text-gray-300\"\n                  onClick={() => handleSort(\"timestamp\")}\n                >\n                  Timestamp <SortIcon field=\"timestamp\" />\n                </th>\n              </tr>\n            </thead>\n            <tbody className=\"divide-y divide-gray-700\">\n              {filteredIssues.length === 0 ? (\n                <tr>\n                  <td colSpan={5} className=\"px-4 py-8 text-center text-gray-500\">\n                    No issues found matching the selected filters\n                  </td>\n                </tr>\n              ) : (\n                filteredIssues.map((issue) => (\n                  <tr key={issue.id} className=\"hover:bg-gray-800/50 transition-colors\">\n                    <td className=\"px-4 py-3 whitespace-nowrap\">\n                      <IssueBadge severity={issue.severity} size=\"sm\" />\n                    </td>\n                    <td className=\"px-4 py-3 whitespace-nowrap text-sm text-gray-300\">\n                      {issue.type}\n                    </td>\n                    <td className=\"px-4 py-3 text-sm text-gray-300\">\n                      {issue.message}\n                    </td>\n                    <td className=\"px-4 py-3 whitespace-nowrap text-sm text-gray-300\">\n                      {issue.affectedRecords.toLocaleString()}\n                    </td>\n                    <td className=\"px-4 py-3 whitespace-nowrap text-sm text-gray-400\">\n                      {new Date(issue.timestamp).toLocaleString()}\n                    </td>\n                  </tr>\n                ))\n              )}\n            </tbody>\n          </table>\n        </div>\n      </div>\n\n      {/* Historical Data Section */}\n      <div className=\"bg-gray-800/50 rounded-lg p-6 border border-gray-700\">\n        <div className=\"flex items-center justify-between mb-4\">\n          <div className=\"flex items-center gap-2\">\n            <BarChart3 size={20} className=\"text-blue-400\" />\n            <h3 className=\"text-lg font-medium text-white\">Historical Issues Analysis</h3>\n          </div>\n          <button\n            onClick={() => setShowHistorical(!showHistorical)}\n            className={`px-4 py-2 rounded-lg text-sm font-medium transition-colors ${\n              showHistorical\n                ? \"bg-blue-600 text-white\"\n                : \"bg-gray-700 text-gray-300 hover:bg-gray-600\"\n            }`}\n          >\n            {showHistorical ? \"Hide Historical View\" : \"Show Historical View\"}\n          </button>\n        </div>\n\n        {showHistorical && (\n          <div className=\"space-y-4\">\n            <TimeRangeSelector\n              selectedRange={selectedTimeRange}\n              onRangeChange={handleTimeRangeChange}\n              customRange={customDateRange}\n              disabled={historicalLoading}\n            />\n\n            {historicalLoading ? (\n              <div className=\"flex items-center justify-center h-64\">\n                <div className=\"text-gray-400\">Loading historical data...</div>\n              </div>\n            ) : (\n              <HistoricalIssuesChart\n                data={historicalData}\n                height={300}\n              />\n            )}\n          </div>\n        )}\n      </div>\n\n      {/* Footer */}\n      <div className=\"text-xs text-gray-500\">\n        Showing {filteredIssues.length} of {report.issues.length} issues\n        {report.lastCheck && (\n          <span className=\"ml-4\">Last check: {new Date(report.lastCheck).toLocaleString()}</span>\n        )}\n      </div>\n    </div>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\syyun\\Documents\\GitHub\\Routing_ML_251014\\frontend-prediction\\src\\components\\data-quality\\KPICard.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\syyun\\Documents\\GitHub\\Routing_ML_251014\\frontend-prediction\\src\\components\\data-quality\\MetricsPanel.tsx","messages":[{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has missing dependencies: 'customDateRange', 'historicalData.length', and 'selectedTimeRange'. Either include them or remove the dependency array.","line":94,"column":6,"nodeType":"ArrayExpression","endLine":94,"endColumn":22,"suggestions":[{"desc":"Update the dependencies array to be: [customDateRange, historicalData.length, selectedTimeRange, showHistorical]","fix":{"range":[3420,3436],"text":"[customDateRange, historicalData.length, selectedTimeRange, showHistorical]"}}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import {\n  type DataQualityMetrics,\n  fetchDataQualityMetrics,\n  fetchHistoricalMetrics,\n  type HistoricalMetricsDataPoint\n} from \"@lib/apiClient\";\nimport { RefreshCw, TrendingUp } from \"lucide-react\";\nimport { useEffect, useState } from \"react\";\nimport toast, { Toaster } from \"react-hot-toast\";\n\nimport { checkMetricsForAlerts } from \"../../services/alertService\";\nimport { exportMetricsToCSV, exportMetricsToPDF } from \"../../services/exportService\";\nimport { ExportButton, type ExportFormat } from \"./ExportButton\";\nimport { HistoricalMetricsChart } from \"./HistoricalMetricsChart\";\nimport { KPICard } from \"./KPICard\";\nimport { type DateRange, getDateRangeFromSelection,type TimeRange, TimeRangeSelector } from \"./TimeRangeSelector\";\nimport { TrendChart } from \"./TrendChart\";\n\ninterface MetricsPanelProps {\n  autoRefreshInterval?: number; // in seconds, 0 to disable\n}\n\nexport function MetricsPanel({ autoRefreshInterval = 30 }: MetricsPanelProps) {\n  const [metrics, setMetrics] = useState<DataQualityMetrics | null>(null);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState<string | null>(null);\n  const [lastUpdated, setLastUpdated] = useState<Date | null>(null);\n  const [isRefreshing, setIsRefreshing] = useState(false);\n\n  // Historical data state\n  const [showHistorical, setShowHistorical] = useState(false);\n  const [selectedTimeRange, setSelectedTimeRange] = useState<TimeRange>(\"7d\");\n  const [customDateRange, setCustomDateRange] = useState<DateRange | undefined>();\n  const [historicalData, setHistoricalData] = useState<HistoricalMetricsDataPoint[]>([]);\n  const [historicalLoading, setHistoricalLoading] = useState(false);\n\n  const loadMetrics = async (showSpinner = true) => {\n    try {\n      if (showSpinner) {\n        setIsRefreshing(true);\n      }\n      setError(null);\n      const data = await fetchDataQualityMetrics();\n      setMetrics(data);\n      setLastUpdated(new Date());\n\n      // Check for alerts\n      const triggeredAlerts = checkMetricsForAlerts(data);\n      triggeredAlerts.forEach((alert) => {\n        const toastOptions = {\n          duration: 5000,\n          icon: alert.severity === \"critical\" ? \"🔴\" : alert.severity === \"warning\" ? \"⚠️\" : \"ℹ️\",\n        };\n\n        if (alert.severity === \"critical\") {\n          toast.error(alert.message, toastOptions);\n        } else if (alert.severity === \"warning\") {\n          toast(alert.message, { ...toastOptions, style: { background: \"#713f12\", color: \"#fcd34d\" } });\n        } else {\n          toast(alert.message, toastOptions);\n        }\n      });\n    } catch (err) {\n      console.error(\"Failed to load metrics:\", err);\n      setError(err instanceof Error ? err.message : \"Failed to load metrics\");\n    } finally {\n      setLoading(false);\n      setIsRefreshing(false);\n    }\n  };\n\n  // Initial load\n  useEffect(() => {\n    loadMetrics();\n  }, []);\n\n  // Auto-refresh\n  useEffect(() => {\n    if (autoRefreshInterval <= 0) return;\n\n    const interval = setInterval(() => {\n      loadMetrics(false); // Silent refresh\n    }, autoRefreshInterval * 1000);\n\n    return () => clearInterval(interval);\n  }, [autoRefreshInterval]);\n\n  // Load historical data when toggled\n  useEffect(() => {\n    if (showHistorical && historicalData.length === 0) {\n      const dateRange = getDateRangeFromSelection(selectedTimeRange, customDateRange);\n      loadHistoricalData(selectedTimeRange, dateRange);\n    }\n  }, [showHistorical]);\n\n  const loadHistoricalData = async (range: TimeRange, dateRange: DateRange) => {\n    try {\n      setHistoricalLoading(true);\n      const response = await fetchHistoricalMetrics({\n        startDate: dateRange.start.toISOString(),\n        endDate: dateRange.end.toISOString(),\n        interval: \"1h\",\n      });\n      setHistoricalData(response.dataPoints);\n    } catch (err) {\n      console.error(\"Failed to load historical data:\", err);\n      toast.error(\"Failed to load historical data\");\n    } finally {\n      setHistoricalLoading(false);\n    }\n  };\n\n  const handleTimeRangeChange = (range: TimeRange, dateRange: DateRange) => {\n    setSelectedTimeRange(range);\n    if (range === \"custom\") {\n      setCustomDateRange(dateRange);\n    }\n    loadHistoricalData(range, dateRange);\n  };\n\n  const handleManualRefresh = () => {\n    loadMetrics(true);\n    if (showHistorical) {\n      const dateRange = getDateRangeFromSelection(selectedTimeRange, customDateRange);\n      loadHistoricalData(selectedTimeRange, dateRange);\n    }\n  };\n\n  const handleExport = async (format: ExportFormat) => {\n    if (!metrics) return;\n\n    try {\n      const timestamp = new Date().toISOString().split(\"T\")[0];\n      const filename = `data-quality-metrics-${timestamp}`;\n\n      if (format === \"csv\") {\n        exportMetricsToCSV(metrics, { filename: `${filename}.csv` });\n        toast.success(\"Metrics exported to CSV successfully\");\n      } else {\n        exportMetricsToPDF(metrics, {\n          filename: `${filename}.pdf`,\n          title: \"Data Quality Metrics Report\",\n        });\n        toast.success(\"Metrics exported to PDF successfully\");\n      }\n    } catch (error) {\n      console.error(\"Export failed:\", error);\n      toast.error(\"Export failed. Please try again.\");\n    }\n  };\n\n  if (loading) {\n    return (\n      <div className=\"flex items-center justify-center h-64\">\n        <div className=\"text-gray-400\">Loading metrics...</div>\n      </div>\n    );\n  }\n\n  if (error) {\n    return (\n      <div className=\"flex flex-col items-center justify-center h-64 gap-4\">\n        <div className=\"text-red-400\">Error: {error}</div>\n        <button\n          onClick={handleManualRefresh}\n          className=\"px-4 py-2 bg-blue-600 hover:bg-blue-700 text-white rounded-md\"\n        >\n          Retry\n        </button>\n      </div>\n    );\n  }\n\n  if (!metrics) {\n    return (\n      <div className=\"flex items-center justify-center h-64\">\n        <div className=\"text-gray-400\">No metrics data available</div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"space-y-6\">\n      <Toaster position=\"top-right\" />\n\n      {/* Header with refresh and export buttons */}\n      <div className=\"flex items-center justify-between\">\n        <div>\n          <h2 className=\"text-xl font-semibold text-white\">Data Quality Metrics</h2>\n          {lastUpdated && (\n            <p className=\"text-sm text-gray-400 mt-1\">\n              Last updated: {lastUpdated.toLocaleTimeString()}\n              {autoRefreshInterval > 0 && (\n                <span className=\"ml-2 text-gray-500\">\n                  (auto-refresh every {autoRefreshInterval}s)\n                </span>\n              )}\n            </p>\n          )}\n        </div>\n        <div className=\"flex gap-2\">\n          <ExportButton\n            onExport={handleExport}\n            exportType=\"metrics\"\n            disabled={!metrics}\n          />\n          <button\n            onClick={handleManualRefresh}\n            disabled={isRefreshing}\n            className=\"flex items-center gap-2 px-4 py-2 bg-gray-800 hover:bg-gray-700 text-white rounded-md transition-colors disabled:opacity-50\"\n          >\n            <RefreshCw\n              size={16}\n              className={isRefreshing ? \"animate-spin\" : \"\"}\n            />\n            Refresh\n          </button>\n        </div>\n      </div>\n\n      {/* KPI Cards */}\n      <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4\">\n        <KPICard\n          title=\"Completeness\"\n          value={metrics.completeness}\n          thresholds={{ good: 95, warning: 85 }}\n        />\n        <KPICard\n          title=\"Consistency\"\n          value={metrics.consistency}\n          thresholds={{ good: 90, warning: 75 }}\n        />\n        <KPICard\n          title=\"Validity\"\n          value={metrics.validity}\n          thresholds={{ good: 95, warning: 80 }}\n        />\n      </div>\n\n      {/* Trend Charts */}\n      {metrics.trends && (\n        <div className=\"bg-gray-800/50 rounded-lg p-6 border border-gray-700\">\n          <h3 className=\"text-lg font-medium text-white mb-4\">Trends (Recent)</h3>\n          <div className=\"grid grid-cols-1 md:grid-cols-3 gap-6\">\n            <TrendChart\n              data={metrics.trends.completeness}\n              label=\"Completeness Trend\"\n              color=\"#22c55e\"\n            />\n            <TrendChart\n              data={metrics.trends.consistency}\n              label=\"Consistency Trend\"\n              color=\"#3b82f6\"\n            />\n            <TrendChart\n              data={metrics.trends.validity}\n              label=\"Validity Trend\"\n              color=\"#a855f7\"\n            />\n          </div>\n        </div>\n      )}\n\n      {/* Historical Data Section */}\n      <div className=\"bg-gray-800/50 rounded-lg p-6 border border-gray-700\">\n        <div className=\"flex items-center justify-between mb-4\">\n          <div className=\"flex items-center gap-2\">\n            <TrendingUp size={20} className=\"text-blue-400\" />\n            <h3 className=\"text-lg font-medium text-white\">Historical Analysis</h3>\n          </div>\n          <button\n            onClick={() => setShowHistorical(!showHistorical)}\n            className={`px-4 py-2 rounded-lg text-sm font-medium transition-colors ${\n              showHistorical\n                ? \"bg-blue-600 text-white\"\n                : \"bg-gray-700 text-gray-300 hover:bg-gray-600\"\n            }`}\n          >\n            {showHistorical ? \"Hide Historical View\" : \"Show Historical View\"}\n          </button>\n        </div>\n\n        {showHistorical && (\n          <div className=\"space-y-4\">\n            <TimeRangeSelector\n              selectedRange={selectedTimeRange}\n              onRangeChange={handleTimeRangeChange}\n              customRange={customDateRange}\n              disabled={historicalLoading}\n            />\n\n            {historicalLoading ? (\n              <div className=\"flex items-center justify-center h-64\">\n                <div className=\"text-gray-400\">Loading historical data...</div>\n              </div>\n            ) : (\n              <HistoricalMetricsChart\n                data={historicalData}\n                height={400}\n              />\n            )}\n          </div>\n        )}\n      </div>\n\n      {/* Metadata */}\n      <div className=\"text-xs text-gray-500 border-t border-gray-700 pt-4\">\n        <div>Timestamp: {metrics.timestamp}</div>\n      </div>\n    </div>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\syyun\\Documents\\GitHub\\Routing_ML_251014\\frontend-prediction\\src\\components\\data-quality\\PrometheusPanel.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\syyun\\Documents\\GitHub\\Routing_ML_251014\\frontend-prediction\\src\\components\\data-quality\\TimeRangeSelector.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\syyun\\Documents\\GitHub\\Routing_ML_251014\\frontend-prediction\\src\\components\\data-quality\\TrendChart.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\syyun\\Documents\\GitHub\\Routing_ML_251014\\frontend-prediction\\src\\components\\master-data\\MasterDataInfoPanel.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\syyun\\Documents\\GitHub\\Routing_ML_251014\\frontend-prediction\\src\\components\\master-data\\MasterDataItemInput.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\syyun\\Documents\\GitHub\\Routing_ML_251014\\frontend-prediction\\src\\components\\master-data\\MasterDataMatrix.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\syyun\\Documents\\GitHub\\Routing_ML_251014\\frontend-prediction\\src\\components\\master-data\\MasterDataMetadataPanel.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\syyun\\Documents\\GitHub\\Routing_ML_251014\\frontend-prediction\\src\\components\\master-data\\MasterDataSearchPanel.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\syyun\\Documents\\GitHub\\Routing_ML_251014\\frontend-prediction\\src\\components\\master-data\\MasterDataTabs.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\syyun\\Documents\\GitHub\\Routing_ML_251014\\frontend-prediction\\src\\components\\master-data\\MasterDataTree.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\syyun\\Documents\\GitHub\\Routing_ML_251014\\frontend-prediction\\src\\components\\master-data\\MasterDataWorkspace.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\syyun\\Documents\\GitHub\\Routing_ML_251014\\frontend-prediction\\src\\components\\master-data\\__tests__\\MasterDataMatrix.test.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\syyun\\Documents\\GitHub\\Routing_ML_251014\\frontend-prediction\\src\\components\\onprem-nlp\\OnPremSearch.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\syyun\\Documents\\GitHub\\Routing_ML_251014\\frontend-prediction\\src\\components\\quality\\LogViewer.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\syyun\\Documents\\GitHub\\Routing_ML_251014\\frontend-prediction\\src\\components\\quality\\QualityDashboard.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\syyun\\Documents\\GitHub\\Routing_ML_251014\\frontend-prediction\\src\\components\\routing\\CandidateNodeTabs.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'index' is defined but never used.","line":22,"column":3,"nodeType":"Identifier","messageId":"unusedVar","endLine":22,"endColumn":8},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'handleKeyNavigation' is assigned a value but never used.","line":126,"column":9,"nodeType":"Identifier","messageId":"unusedVar","endLine":126,"endColumn":28}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * CandidateNodeTabs - Displays similar item candidates as clickable node tabs\n *\n * Phase 3.2 - Candidate Node UI Component\n * Phase 3.3 - Enhanced Styling, Responsiveness, and Accessibility\n */\n\nimport type { CandidateRouting } from '@app-types/routing';\nimport React from 'react';\n\nimport { useRoutingStore } from '../../store/routingStore';\n\ninterface CandidateNodeCardProps {\n  candidate: CandidateRouting;\n  index: number;\n  isActive: boolean;\n  onClick: () => void;\n}\n\nconst CandidateNodeCard: React.FC<CandidateNodeCardProps> = ({\n  candidate,\n  index,\n  isActive,\n  onClick,\n}) => {\n  const similarityPercent = Math.round(candidate.SIMILARITY_SCORE * 100);\n\n  // Tooltip text for similarity score\n  const getSimilarityTooltip = () => {\n    if (similarityPercent >= 90) return 'Very High Similarity - Strong match';\n    if (similarityPercent >= 80) return 'High Similarity - Good match';\n    if (similarityPercent >= 70) return 'Medium Similarity - Moderate match';\n    return 'Low Similarity - Weak match';\n  };\n\n  return (\n    <button\n      type=\"button\"\n      onClick={onClick}\n      onKeyDown={(e) => {\n        if (e.key === 'Enter' || e.key === ' ') {\n          e.preventDefault();\n          onClick();\n        }\n      }}\n      className={`\n        candidate-node-card\n        px-3 py-2 sm:px-4 sm:py-3 rounded-lg border-2 transition-all duration-200\n        flex flex-col items-start gap-2 min-w-[140px] sm:min-w-[160px]\n        hover:shadow-lg hover:scale-105 active:scale-95\n        focus:outline-none focus:ring-2 focus:ring-blue-500 focus:ring-offset-2\n        ${isActive\n          ? 'border-blue-500 bg-blue-50 dark:bg-blue-900/20 shadow-lg scale-105'\n          : 'border-gray-300 dark:border-gray-600 bg-white dark:bg-gray-800 hover:border-blue-400 dark:hover:border-blue-500'\n        }\n      `}\n      aria-label={`Candidate item ${candidate.CANDIDATE_ITEM_CD}, rank ${candidate.RANK}, ${similarityPercent}% similarity${isActive ? ', currently selected' : ''}`}\n      aria-pressed={isActive}\n      role=\"tab\"\n      tabIndex={0}\n      title={`Click to view routing for ${candidate.CANDIDATE_ITEM_CD}`}\n    >\n      <div className=\"flex items-center justify-between w-full\">\n        <span className=\"text-xs font-medium text-gray-500 dark:text-gray-400\">\n          Rank #{candidate.RANK}\n        </span>\n        <span\n          className={`\n            text-xs font-bold px-2 py-0.5 rounded transition-colors\n            ${similarityPercent >= 90 ? 'bg-green-100 text-green-700 dark:bg-green-900/30 dark:text-green-400' :\n              similarityPercent >= 80 ? 'bg-blue-100 text-blue-700 dark:bg-blue-900/30 dark:text-blue-400' :\n              similarityPercent >= 70 ? 'bg-yellow-100 text-yellow-700 dark:bg-yellow-900/30 dark:text-yellow-400' :\n              'bg-gray-100 text-gray-700 dark:bg-gray-700 dark:text-gray-300'}\n          `}\n          title={getSimilarityTooltip()}\n          aria-label={getSimilarityTooltip()}\n        >\n          {similarityPercent}%\n        </span>\n      </div>\n\n      <div className=\"w-full\">\n        <div className=\"font-mono text-xs sm:text-sm font-semibold text-gray-900 dark:text-gray-100 truncate\">\n          {candidate.CANDIDATE_ITEM_CD}\n        </div>\n        {candidate.PROCESS_COUNT && (\n          <div className=\"text-xs text-gray-500 dark:text-gray-400 mt-1\">\n            {candidate.PROCESS_COUNT} processes\n          </div>\n        )}\n        {(candidate.WORK_ORDER_COUNT || candidate.WORK_ORDER_CONFIDENCE !== undefined) && (\n          <div className=\"text-[11px] text-gray-500 dark:text-gray-400\">\n            {candidate.WORK_ORDER_COUNT ? `샘플 ${candidate.WORK_ORDER_COUNT}` : null}\n            {candidate.WORK_ORDER_CONFIDENCE !== undefined && candidate.WORK_ORDER_CONFIDENCE !== null ? (\n              <span className=\"ml-1\">신뢰 {Math.round(candidate.WORK_ORDER_CONFIDENCE * 100)}%</span>\n            ) : null}\n          </div>\n        )}\n        {candidate.OUTSOURCING_REPLACED ? (\n          <div className=\"inline-flex items-center px-2 py-0.5 mt-1 rounded bg-orange-100 text-orange-700 dark:bg-orange-900/30 dark:text-orange-300 text-[10px] font-semibold\">사내전환</div>\n        ) : null}\n      </div>\n\n      {candidate.HAS_ROUTING === 'Y' && (\n        <div className=\"flex items-center gap-1 text-xs text-green-600 dark:text-green-400 transition-colors\">\n          <svg className=\"w-3 h-3\" fill=\"currentColor\" viewBox=\"0 0 20 20\" aria-hidden=\"true\">\n            <path fillRule=\"evenodd\" d=\"M16.707 5.293a1 1 0 010 1.414l-8 8a1 1 0 01-1.414 0l-4-4a1 1 0 011.414-1.414L8 12.586l7.293-7.293a1 1 0 011.414 0z\" clipRule=\"evenodd\" />\n          </svg>\n          <span>Has routing</span>\n        </div>\n      )}\n    </button>\n  );\n};\n\ninterface CandidateNodeTabsProps {\n  className?: string;\n}\n\nexport const CandidateNodeTabs: React.FC<CandidateNodeTabsProps> = ({ className = '' }) => {\n  const candidates = useRoutingStore((state) => state.candidates);\n  const activeCandidateIndex = useRoutingStore((state) => state.activeCandidateIndex);\n  const selectCandidate = useRoutingStore((state) => state.selectCandidate);\n\n  // Keyboard navigation handler\n  const handleKeyNavigation = React.useCallback((e: React.KeyboardEvent, currentIndex: number) => {\n    if (e.key === 'ArrowRight' && currentIndex < candidates.length - 1) {\n      e.preventDefault();\n      const nextButton = document.querySelector(`[data-candidate-index=\"${currentIndex + 1}\"]`) as HTMLButtonElement;\n      nextButton?.focus();\n    } else if (e.key === 'ArrowLeft' && currentIndex > 0) {\n      e.preventDefault();\n      const prevButton = document.querySelector(`[data-candidate-index=\"${currentIndex - 1}\"]`) as HTMLButtonElement;\n      prevButton?.focus();\n    } else if (e.key === 'Home') {\n      e.preventDefault();\n      const firstButton = document.querySelector('[data-candidate-index=\"0\"]') as HTMLButtonElement;\n      firstButton?.focus();\n    } else if (e.key === 'End') {\n      e.preventDefault();\n      const lastButton = document.querySelector(`[data-candidate-index=\"${candidates.length - 1}\"]`) as HTMLButtonElement;\n      lastButton?.focus();\n    }\n  }, [candidates.length]);\n\n  if (!candidates || candidates.length === 0) {\n    return null;\n  }\n\n  return (\n    <div className={`candidate-node-tabs ${className}`} role=\"region\" aria-label=\"Similar item candidates\">\n      <div className=\"mb-2 sm:mb-3\">\n        <h3 className=\"text-sm font-semibold text-gray-700 dark:text-gray-300 mb-1\">\n          Similar Items\n        </h3>\n        <p className=\"text-xs text-gray-500 dark:text-gray-400\">\n          Click a candidate to view its routing (Total: {candidates.length})\n        </p>\n      </div>\n\n      <div\n        className=\"flex gap-2 sm:gap-3 overflow-x-auto pb-2 scrollbar-thin scrollbar-thumb-gray-300 dark:scrollbar-thumb-gray-600 scroll-smooth\"\n        role=\"tablist\"\n        aria-label=\"Candidate items\"\n      >\n        {candidates.map((candidate, index) => (\n          <div key={`${candidate.CANDIDATE_ITEM_CD}-${index}`} data-candidate-index={index}>\n            <CandidateNodeCard\n              candidate={candidate}\n              index={index}\n              isActive={activeCandidateIndex === index}\n              onClick={() => selectCandidate(index)}\n            />\n          </div>\n        ))}\n      </div>\n\n      {activeCandidateIndex !== null && candidates[activeCandidateIndex] && (\n        <div\n          className=\"mt-2 sm:mt-3 p-2 sm:p-3 bg-blue-50 dark:bg-blue-900/10 rounded-lg border border-blue-200 dark:border-blue-800 transition-all duration-200\"\n          role=\"status\"\n          aria-live=\"polite\"\n          aria-atomic=\"true\"\n        >\n          <div className=\"flex items-start justify-between flex-col sm:flex-row gap-2\">\n            <div className=\"flex-1\">\n              <div className=\"text-sm font-medium text-blue-900 dark:text-blue-100\">\n                Viewing: {candidates[activeCandidateIndex].CANDIDATE_ITEM_CD}\n              </div>\n              <div className=\"text-xs text-blue-700 dark:text-blue-300 mt-1\">\n                Similarity: {Math.round(candidates[activeCandidateIndex].SIMILARITY_SCORE * 100)}% •\n                Rank: #{candidates[activeCandidateIndex].RANK}\n                {candidates[activeCandidateIndex].PROCESS_COUNT && ` • ${candidates[activeCandidateIndex].PROCESS_COUNT} processes`}\n              </div>\n            </div>\n            <button\n              type=\"button\"\n              onClick={() => selectCandidate(null)}\n              className=\"text-xs text-blue-600 dark:text-blue-400 hover:text-blue-800 dark:hover:text-blue-200 underline focus:outline-none focus:ring-2 focus:ring-blue-500 rounded px-1 transition-colors whitespace-nowrap\"\n              aria-label=\"Clear candidate selection\"\n            >\n              Clear selection\n            </button>\n          </div>\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default CandidateNodeTabs;\n","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\syyun\\Documents\\GitHub\\Routing_ML_251014\\frontend-prediction\\src\\components\\routing\\ComprehensiveRoutingPreview.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\syyun\\Documents\\GitHub\\Routing_ML_251014\\frontend-prediction\\src\\components\\routing\\DrawingViewerButton.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\syyun\\Documents\\GitHub\\Routing_ML_251014\\frontend-prediction\\src\\components\\routing\\DrawingViewerSettings.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\syyun\\Documents\\GitHub\\Routing_ML_251014\\frontend-prediction\\src\\components\\routing\\ErpItemExplorer.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'isSampleError' is assigned a value but never used.","line":60,"column":14,"nodeType":"Identifier","messageId":"unusedVar","endLine":60,"endColumn":27},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"The 'columnOptions' logical expression could make the dependencies of useMemo Hook (at line 85) change on every render. To fix this, wrap the initialization of 'columnOptions' in its own useMemo() Hook.","line":71,"column":9,"nodeType":"VariableDeclarator","endLine":71,"endColumn":72},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"The 'sampleRows' logical expression could make the dependencies of useMemo Hook (at line 145) change on every render. To fix this, wrap the initialization of 'sampleRows' in its own useMemo() Hook.","line":113,"column":9,"nodeType":"VariableDeclarator","endLine":113,"endColumn":80},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'clearImportDragState' is assigned a value but never used.","line":268,"column":9,"nodeType":"Identifier","messageId":"unusedVar","endLine":268,"endColumn":29}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { useErpViews,useErpViewSample } from \"@hooks/useErpViewExplorer\";\nimport type { ViewExplorerColumn } from \"@lib/apiClient\";\nimport { hasItemCodesDragData, readItemCodesDragData, setItemCodesDragData } from \"@lib/dragAndDrop\";\nimport { Filter, Loader2, RefreshCw, Search } from \"lucide-react\";\nimport React, { ChangeEvent,FormEvent, useCallback, useEffect, useMemo, useState } from \"react\";\n\ninterface ErpItemExplorerProps {\n  onAddItems: (items: string[]) => void;\n}\n\nconst DEFAULT_VIEW_MATCHERS = [/ITEM/i, /PRODUCT/i, /MASTER/i];\nconst DEFAULT_COLUMN_MATCHERS = [/ITEM_CD/i, /ITEM/i, /CODE/i];\nconst PAGE_SIZE_OPTIONS = [10, 20, 30];\nconst DEFAULT_PAGE_SIZE = 30;\n\nconst normalizeItems = (items: string[]): string[] => {\n  return Array.from(\n    new Set(\n      items\n        .map((item) => item.trim())\n        .filter((item) => item.length > 0),\n    ),\n  );\n};\n\nexport function ErpItemExplorer({ onAddItems }: ErpItemExplorerProps) {\n  const { views, isLoading: isViewsLoading, error: viewsError, refetch: refetchViews } = useErpViews();\n  const [selectedView, setSelectedView] = useState<string | null>(null);\n  const [selectedColumn, setSelectedColumn] = useState<string | null>(null);\n  const [searchDraft, setSearchDraft] = useState(\"\");\n  const [search, setSearch] = useState(\"\");\n  const [pageSize, setPageSize] = useState(DEFAULT_PAGE_SIZE);\n  const [currentPage, setCurrentPage] = useState(1);\n  const [selectedItems, setSelectedItems] = useState<Set<string>>(new Set());\n  const [isDraggingOverImport, setIsDraggingOverImport] = useState(false);\n  const [hasRequestedData, setHasRequestedData] = useState(false);\n\n  const defaultViewName = useMemo(() => {\n    if (views.length === 0) {\n      return null;\n    }\n    for (const matcher of DEFAULT_VIEW_MATCHERS) {\n      const matched = views.find((view) => matcher.test(view.view_name) || matcher.test(view.full_name));\n      if (matched) {\n        return matched.full_name;\n      }\n    }\n    return views[0]?.full_name ?? null;\n  }, [views]);\n\n  useEffect(() => {\n    if (!selectedView && defaultViewName) {\n      setSelectedView(defaultViewName);\n    }\n  }, [defaultViewName, selectedView]);\n\n  const {\n    data: viewSample,\n    isFetching: isSampleLoading,\n    isError: isSampleError,\n    error: sampleError,\n    refetch: refetchSample,\n  } = useErpViewSample(selectedView, {\n    page: currentPage,\n    pageSize,\n    search: search.length > 0 ? search : undefined,\n    searchColumn: selectedColumn ?? undefined,\n    enabled: Boolean(selectedView), // Fix: Auto-load columns when view is selected\n  });\n\n  const columnOptions: ViewExplorerColumn[] = viewSample?.columns ?? [];\n  const totalRowCount = viewSample?.row_count ?? 0;\n\n  const defaultColumnName = useMemo(() => {\n    if (columnOptions.length === 0) {\n      return null;\n    }\n    for (const matcher of DEFAULT_COLUMN_MATCHERS) {\n      const matched = columnOptions.find((column) => matcher.test(column.name));\n      if (matched) {\n        return matched.name;\n      }\n    }\n    return columnOptions[0]?.name ?? null;\n  }, [columnOptions]);\n\n  useEffect(() => {\n    if (!selectedColumn && defaultColumnName) {\n      setSelectedColumn(defaultColumnName);\n    }\n  }, [defaultColumnName, selectedColumn]);\n\n  useEffect(() => {\n    setSearchDraft(search);\n  }, [search]);\n\n  useEffect(() => {\n    setCurrentPage(1);\n  }, [selectedColumn]);\n\n  useEffect(() => {\n    if (!selectedView) {\n      return;\n    }\n    setSelectedColumn(null);\n    setSelectedItems(new Set());\n    setSearch(\"\");\n    setSearchDraft(\"\");\n    setCurrentPage(1);\n    setHasRequestedData(false);\n  }, [selectedView]);\n\n  const sampleRows = (viewSample?.data ?? []) as Array<Record<string, unknown>>;\n  const responsePage = viewSample?.page ?? currentPage;\n  const responsePageSize = viewSample?.page_size ?? pageSize;\n  const totalPages = viewSample?.total_pages ?? (responsePageSize > 0 ? Math.max(1, Math.ceil(totalRowCount / responsePageSize)) : 1);\n  const pageStartIndex = totalRowCount === 0 ? 0 : Math.max((responsePage - 1) * responsePageSize, 0);\n  const effectivePage = totalPages === 0 ? 1 : Math.min(Math.max(responsePage, 1), totalPages);\n  const startIndex = totalRowCount === 0 ? 0 : pageStartIndex;\n  const endIndex = totalRowCount === 0 ? 0 : Math.min(pageStartIndex + sampleRows.length, totalRowCount);\n\n  const availableItems = useMemo(() => {\n    if (!selectedColumn) {\n      return [];\n    }\n    const values = sampleRows\n      .map((row) => {\n        const value = row[selectedColumn];\n        if (typeof value === \"string\") {\n          return value.trim();\n        }\n        if (value === null || value === undefined) {\n          return \"\";\n        }\n        if (typeof value === \"number\") {\n          return String(value);\n        }\n        if (value instanceof Date) {\n          return value.toISOString();\n        }\n        return String(value);\n      })\n      .filter((value) => value.length > 0);\n    return normalizeItems(values);\n  }, [sampleRows, selectedColumn]);\n\n  const filteredItems = availableItems;\n  const paginatedItems = filteredItems;\n  const selectedCount = selectedItems.size;\n\n  const handleSearchSubmit = useCallback(\n    (event: FormEvent<HTMLFormElement>) => {\n      event.preventDefault();\n      const keyword = searchDraft.trim();\n      const isSameKeyword = keyword === search;\n      setSearch(keyword);\n      setCurrentPage(1);\n      setHasRequestedData(true);\n      if (isSameKeyword) {\n        void refetchSample({ cancelRefetch: false });\n      }\n    },\n    [refetchSample, search, searchDraft],\n  );\n\n  const handlePageSizeChange = useCallback((event: ChangeEvent<HTMLSelectElement>) => {\n    const nextSize = Number(event.target.value);\n    setPageSize(nextSize);\n    setCurrentPage(1);\n  }, []);\n\n  const handlePageChange = useCallback(\n    (nextPage: number) => {\n      setCurrentPage((prev) => {\n        const clamped = Math.min(Math.max(nextPage, 1), totalPages);\n        return clamped === prev ? prev : clamped;\n      });\n    },\n    [totalPages],\n  );\n\n  const handleToggleSelection = useCallback((item: string) => {\n    setSelectedItems((prev) => {\n      const next = new Set(prev);\n      if (next.has(item)) {\n        next.delete(item);\n      } else {\n        next.add(item);\n      }\n      return next;\n    });\n  }, []);\n\n  const handleSelectFiltered = useCallback(() => {\n    setSelectedItems((prev) => {\n      const next = new Set(prev);\n      for (const item of filteredItems) {\n        next.add(item);\n      }\n      return next;\n    });\n  }, [filteredItems]);\n\n  const handleClearSelection = useCallback(() => {\n    setSelectedItems(new Set());\n  }, []);\n\n  const handleQuickAdd = useCallback(\n    (items: string[]) => {\n      const normalized = normalizeItems(items);\n      if (normalized.length === 0) {\n        return;\n      }\n      onAddItems(normalized);\n    },\n    [onAddItems],\n  );\n\n  const handleRefreshViews = useCallback(() => {\n    void refetchViews({ cancelRefetch: false });\n  }, [refetchViews]);\n\n  const handleRefreshSample = useCallback(() => {\n    void refetchSample({ cancelRefetch: false });\n  }, [refetchSample]);\n\n  const statusMessage = useMemo(() => {\n    if (isViewsLoading) {\n      return \"ERP View 목록을 불러오는 중입니다.\";\n    }\n    if (viewsError) {\n      return \"ERP View 목록을 불러오지 못했습니다.\";\n    }\n    if (!selectedView) {\n      return \"ERP View를 선택하세요.\";\n    }\n    if (!hasRequestedData) {\n      return \"검색 버튼을 눌러 데이터를 불러오세요.\";\n    }\n    if (isSampleLoading) {\n      return \"ERP View 데이터를 불러오는 중입니다.\";\n    }\n    if (sampleError) {\n      return \"ERP View 데이터를 불러오지 못했습니다.\";\n    }\n    if (!selectedColumn) {\n      return \"컬럼을 선택하세요.\";\n    }\n    if (totalRowCount === 0) {\n      return \"선택한 조건에서 항목을 찾을 수 없습니다.\";\n    }\n    if (availableItems.length === 0) {\n      return \"현재 페이지에 표시할 항목이 없습니다.\";\n    }\n    return null;\n  }, [\n    availableItems.length,\n    hasRequestedData,\n    isSampleLoading,\n    isViewsLoading,\n    sampleError,\n    selectedColumn,\n    selectedView,\n    totalRowCount,\n    viewsError,\n  ]);\n\n  const clearImportDragState = useCallback(() => {\n    const dragData = readItemCodesDragData();\n    if (!dragData) {\n      return;\n    }\n    setIsDraggingOverImport(false);\n  }, []);\n\n  useEffect(() => {\n    const handleDragLeaveWindow = () => {\n      setIsDraggingOverImport(false);\n    };\n    window.addEventListener(\"dragend\", handleDragLeaveWindow);\n    window.addEventListener(\"drop\", handleDragLeaveWindow);\n    return () => {\n      window.removeEventListener(\"dragend\", handleDragLeaveWindow);\n      window.removeEventListener(\"drop\", handleDragLeaveWindow);\n    };\n  }, []);\n\n  const handleDragStart = useCallback(\n    (event: React.DragEvent, items: string[], source: string) => {\n      const normalized = normalizeItems(items);\n      if (normalized.length === 0) {\n        event.preventDefault();\n        return;\n      }\n      setItemCodesDragData(event.dataTransfer, {\n        items: normalized,\n        viewName: selectedView ?? undefined,\n        columnName: selectedColumn ?? undefined,\n        filterValue: search || null,\n        source,\n      });\n      event.currentTarget.classList.add(\"is-dragging\");\n    },\n    [search, selectedColumn, selectedView],\n  );\n\n  const handleDragEnd = useCallback((event: React.DragEvent) => {\n    event.currentTarget.classList.remove(\"is-dragging\");\n  }, []);\n\n  const handleItemDoubleClick = useCallback(\n    (item: string) => {\n      handleQuickAdd([item]);\n    },\n    [handleQuickAdd],\n  );\n\n  const handleDropOnExplorer = useCallback(\n    (event: React.DragEvent<HTMLDivElement>) => {\n      event.preventDefault();\n      setIsDraggingOverImport(false);\n      const data = readItemCodesDragData();\n      if (!data) {\n        return;\n      }\n      if (data.items && data.items.length > 0) {\n        handleQuickAdd(data.items);\n      }\n    },\n    [handleQuickAdd],\n  );\n\n  const handleDragEnter = useCallback((event: React.DragEvent<HTMLDivElement>) => {\n    event.preventDefault();\n    if (!hasItemCodesDragData(event.dataTransfer)) {\n      return;\n    }\n    setIsDraggingOverImport(true);\n  }, []);\n\n  const handleDragLeave = useCallback((event: React.DragEvent<HTMLDivElement>) => {\n    if (!event.currentTarget.contains(event.relatedTarget as Node)) {\n      setIsDraggingOverImport(false);\n    }\n  }, []);\n\n  return (\n    <div\n      className={[\"erp-item-explorer\", isDraggingOverImport ? \"erp-item-explorer--drop-target\" : \"\"].join(\" \")}\n      onDrop={handleDropOnExplorer}\n      onDragOver={(event) => event.preventDefault()}\n      onDragEnter={handleDragEnter}\n      onDragLeave={handleDragLeave}\n    >\n      <header className=\"erp-item-explorer__header\">\n        <div className=\"erp-item-explorer__header-top\">\n          <h3 className=\"erp-item-explorer__title\">📦 ERP View Item 리스트</h3>\n          <div className=\"erp-item-explorer__actions\">\n            <button\n              type=\"button\"\n              className=\"erp-item-explorer__action\"\n              onClick={handleRefreshViews}\n              title=\"ERP View 목록 새로고침\"\n            >\n              <RefreshCw size={16} />\n            </button>\n            <button\n              type=\"button\"\n              className=\"erp-item-explorer__action\"\n              onClick={handleRefreshSample}\n              disabled={!selectedView || !hasRequestedData}\n              title=\"샘플 데이터 새로고침\"\n            >\n              <RefreshCw size={16} />\n            </button>\n          </div>\n        </div>\n\n        <div className=\"erp-item-explorer__field-grid\">\n          <label className=\"erp-item-explorer__field\">\n            <span className=\"erp-item-explorer__field-label\">ERP View</span>\n            <select\n              value={selectedView ?? \"\"}\n              onChange={(event) => setSelectedView(event.target.value || null)}\n              className=\"erp-item-explorer__select\"\n            >\n              <option value=\"\">선택하세요</option>\n              {views.map((view) => (\n                <option key={view.full_name} value={view.full_name}>\n                  {view.full_name}\n                </option>\n              ))}\n            </select>\n          </label>\n          <label className=\"erp-item-explorer__field\">\n            <span className=\"erp-item-explorer__field-label\">컬럼</span>\n            <select\n              value={selectedColumn ?? \"\"}\n              onChange={(event) => setSelectedColumn(event.target.value || null)}\n              className=\"erp-item-explorer__select\"\n              disabled={columnOptions.length === 0}\n            >\n              <option value=\"\">선택하세요</option>\n              {columnOptions.map((column) => (\n                <option key={column.name} value={column.name}>\n                  {column.name} ({column.type})\n                </option>\n              ))}\n            </select>\n          </label>\n        </div>\n        <div className=\"erp-item-explorer__search-row\">\n          <form className=\"erp-item-explorer__search\" onSubmit={handleSearchSubmit}>\n            <Search size={16} />\n            <input\n              type=\"search\"\n              placeholder=\"품목 코드 검색...\"\n              value={searchDraft}\n              onChange={(event) => setSearchDraft(event.target.value)}\n            />\n            <button type=\"submit\">검색</button>\n          </form>\n          <div className=\"erp-item-explorer__filters\">\n            <button type=\"button\" onClick={handleSelectFiltered} disabled={filteredItems.length === 0}>\n              <Filter size={14} />\n              필터 선택 ({filteredItems.length})\n            </button>\n            <button type=\"button\" onClick={handleClearSelection} disabled={selectedCount === 0}>\n              선택 해제 ({selectedCount})\n            </button>\n          </div>\n        </div>\n*** End of File\n        <div className=\"erp-item-explorer__drag-strip\">\n          <div\n            className={[\"erp-item-explorer__chip\", availableItems.length === 0 ? \"is-disabled\" : \"\"].join(\" \")}\n            draggable={availableItems.length > 0}\n            onDragStart={(event) => handleDragStart(event, availableItems, \"all\")}\n            onDragEnd={handleDragEnd}\n            role=\"button\"\n            tabIndex={-1}\n          >\n            전체 노드 ({availableItems.length})\n          </div>\n          <div\n            className={[\"erp-item-explorer__chip\", filteredItems.length === 0 ? \"is-disabled\" : \"\"].join(\" \")}\n            draggable={filteredItems.length > 0}\n            onDragStart={(event) => handleDragStart(event, filteredItems, \"filtered\")}\n            onDragEnd={handleDragEnd}\n            role=\"button\"\n            tabIndex={-1}\n          >\n            필터 결과 ({filteredItems.length})\n          </div>\n          <div\n            className={[\"erp-item-explorer__chip\", selectedCount === 0 ? \"is-disabled\" : \"\"].join(\" \")}\n            draggable={selectedCount > 0}\n            onDragStart={(event) => handleDragStart(event, Array.from(selectedItems), \"selected\")}\n            onDragEnd={handleDragEnd}\n            role=\"button\"\n            tabIndex={-1}\n          >\n            선택한 노드 ({selectedCount})\n          </div>\n          <button\n            type=\"button\"\n            className=\"erp-item-explorer__chip erp-item-explorer__chip--primary\"\n            disabled={selectedCount === 0}\n            onClick={() => handleQuickAdd(Array.from(selectedItems))}\n          >\n            선택 추가\n          </button>\n          <button\n            type=\"button\"\n            className=\"erp-item-explorer__chip erp-item-explorer__chip--primary\"\n            disabled={filteredItems.length === 0}\n            onClick={() => handleQuickAdd(filteredItems)}\n          >\n            필터 추가\n          </button>\n        </div>\n      </header>\n\n      <div className=\"erp-item-explorer__content\">\n        {statusMessage ? (\n          <div className=\"erp-item-explorer__status\">\n            {isSampleLoading || isViewsLoading ? <Loader2 className=\"erp-item-explorer__spinner\" size={18} /> : null}\n            <span>{statusMessage}</span>\n            {viewsError && (\n              <p className=\"erp-item-explorer__error-detail\">\n                {(viewsError instanceof Error ? viewsError.message : String(viewsError)) ?? \"\"}\n              </p>\n            )}\n            {sampleError && (\n              <p className=\"erp-item-explorer__error-detail\">\n                {(sampleError instanceof Error ? sampleError.message : String(sampleError)) ?? \"\"}\n              </p>\n            )}\n          </div>\n        ) : (\n          <div className=\"erp-item-explorer__grid-wrapper\">\n            <div className=\"erp-item-explorer__grid\">\n              {paginatedItems.map((item) => {\n                const isSelected = selectedItems.has(item);\n                return (\n                  <button\n                    key={item}\n                    type=\"button\"\n                    className={[\"erp-item-explorer__item\", isSelected ? \"is-selected\" : \"\"].filter(Boolean).join(\" \")}\n                    onClick={() => handleToggleSelection(item)}\n                    onDoubleClick={() => handleItemDoubleClick(item)}\n                    draggable\n                    onDragStart={(event) => {\n                      const itemsToDrag = selectedItems.has(item) ? Array.from(selectedItems) : [item];\n                      handleDragStart(event, itemsToDrag, \"item\");\n                    }}\n                    onDragEnd={handleDragEnd}\n                  >\n                    <span className=\"erp-item-explorer__item-code\">{item}</span>\n                    {isSelected ? <span className=\"erp-item-explorer__item-check\">선택됨</span> : null}\n                  </button>\n                );\n              })}\n            </div>\n          </div>\n        )}\n      </div>\n\n      {!statusMessage && paginatedItems.length > 0 ? (\n        <footer className=\"erp-item-explorer__footer\">\n          <div className=\"erp-item-explorer__footer-info\">\n            {totalRowCount === 0\n              ? \"표시할 데이터가 없습니다.\"\n              : `${startIndex + 1} - ${endIndex} / ${totalRowCount}건 표시`}\n          </div>\n          <div className=\"erp-item-explorer__footer-controls\">\n            <button type=\"button\" onClick={() => handlePageChange(effectivePage - 1)} disabled={effectivePage <= 1}>\n              이전\n            </button>\n            <span>\n              {effectivePage} / {totalPages}\n            </span>\n            <button type=\"button\" onClick={() => handlePageChange(effectivePage + 1)} disabled={effectivePage >= totalPages}>\n              다음\n            </button>\n          </div>\n          <div className=\"erp-item-explorer__footer-size\">\n            <label>\n              페이지 크기\n              <select value={pageSize} onChange={handlePageSizeChange}>\n                {PAGE_SIZE_OPTIONS.map((option) => (\n                  <option key={option} value={option}>\n                    {option}개\n                  </option>\n                ))}\n              </select>\n            </label>\n          </div>\n        </footer>\n      ) : null}\n    </div>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\syyun\\Documents\\GitHub\\Routing_ML_251014\\frontend-prediction\\src\\components\\routing\\ItemListPanel.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\syyun\\Documents\\GitHub\\Routing_ML_251014\\frontend-prediction\\src\\components\\routing\\RecommendationsTab.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\syyun\\Documents\\GitHub\\Routing_ML_251014\\frontend-prediction\\src\\components\\routing\\ReferenceMatrixPanel.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\syyun\\Documents\\GitHub\\Routing_ML_251014\\frontend-prediction\\src\\components\\routing\\RoutingCanvas.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'Reconnect' is defined but never used.","line":7,"column":69,"nodeType":"Identifier","messageId":"unusedVar","endLine":7,"endColumn":78},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useMemo has an unnecessary dependency: 'connections'. Either exclude it or remove the dependency array. Outer scope values like 'connections' aren't valid dependencies because mutating them doesn't re-render the component.","line":408,"column":5,"nodeType":"ArrayExpression","endLine":408,"endColumn":34,"suggestions":[{"desc":"Update the dependencies array to be: [selectedEdgeId]","fix":{"range":[15929,15958],"text":"[selectedEdgeId]"}}]},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useCallback has an unnecessary dependency: 'setSelectedConnectionStore'. Either exclude it or remove the dependency array. Outer scope values like 'setSelectedConnectionStore' aren't valid dependencies because mutating them doesn't re-render the component.","line":553,"column":5,"nodeType":"ArrayExpression","endLine":553,"endColumn":33,"suggestions":[{"desc":"Update the dependencies array to be: []","fix":{"range":[20456,20484],"text":"[]"}}]},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has unnecessary dependencies: 'connections', 'removeConnection', and 'setSelectedConnectionStore'. Either exclude them or remove the dependency array. Outer scope values like 'connections' aren't valid dependencies because mutating them doesn't re-render the component.","line":575,"column":6,"nodeType":"ArrayExpression","endLine":575,"endColumn":81,"suggestions":[{"desc":"Update the dependencies array to be: [selectedEdgeId]","fix":{"range":[21240,21315],"text":"[selectedEdgeId]"}}]},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useCallback has an unnecessary dependency: 'addConnection'. Either exclude it or remove the dependency array. Outer scope values like 'addConnection' aren't valid dependencies because mutating them doesn't re-render the component.","line":585,"column":5,"nodeType":"ArrayExpression","endLine":585,"endColumn":20,"suggestions":[{"desc":"Update the dependencies array to be: []","fix":{"range":[21620,21635],"text":"[]"}}]},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useCallback has unnecessary dependencies: 'connections', 'setSelectedConnectionStore', and 'updateConnection'. Either exclude them or remove the dependency array. Outer scope values like 'connections' aren't valid dependencies because mutating them doesn't re-render the component.","line":631,"column":5,"nodeType":"ArrayExpression","endLine":631,"endColumn":84,"suggestions":[{"desc":"Update the dependencies array to be: [moveStep, timeline]","fix":{"range":[23280,23359],"text":"[moveStep, timeline]"}}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'connections' is assigned a value but never used.","line":819,"column":9,"nodeType":"Identifier","messageId":"unusedVar","endLine":819,"endColumn":20},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'addConnection' is assigned a value but never used.","line":824,"column":9,"nodeType":"Identifier","messageId":"unusedVar","endLine":824,"endColumn":22},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'removeConnection' is assigned a value but never used.","line":825,"column":9,"nodeType":"Identifier","messageId":"unusedVar","endLine":825,"endColumn":25},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'updateConnection' is assigned a value but never used.","line":826,"column":9,"nodeType":"Identifier","messageId":"unusedVar","endLine":826,"endColumn":25},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'setSelectedConnectionStore' is assigned a value but never used.","line":827,"column":9,"nodeType":"Identifier","messageId":"unusedVar","endLine":827,"endColumn":35}],"suppressedMessages":[],"errorCount":6,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import \"reactflow/dist/style.css\";\n\nimport type { DraggableOperationPayload, RuleViolation, TimelineStep } from \"@store/routingStore\";\nimport { useRoutingStore } from \"@store/routingStore\";\nimport { Edit2,Trash2 } from \"lucide-react\";\nimport { type DragEvent, memo, type UIEvent,useCallback, useEffect, useMemo, useRef, useState } from \"react\";\nimport type { Connection, Edge, Node, NodeProps, ReactFlowInstance, Reconnect, Viewport } from \"reactflow\";\nimport ReactFlow, {\n  Background,\n  Controls,\n  ReactFlowProvider,\n  useEdgesState,\n  useNodesState,\n} from \"reactflow\";\n\nimport { CandidateNodeTabs } from \"./CandidateNodeTabs\";\nimport { TimeEditModal } from \"./TimeEditModal\";\n\nconst NODE_GAP = 240;\n\ninterface TimelineNodeData {\n  step: TimelineStep;\n  onRemove: (stepId: string) => void;\n  onEdit: (stepId: string) => void;\n}\n\ninterface RoutingCanvasProfileController {\n  moveNode: (nodeId: string, position: { x: number; y: number }) => void;\n}\n\ninterface RoutingCanvasProps {\n  className?: string;\n  /**\n   * Automatically calls fitView when the canvas is initialized and when the\n   * timeline length changes. Enabled by default.\n   */\n  autoFit?: boolean;\n  /**\n   * Padding applied when auto fitting the viewport. Defaults to 0.2.\n   */\n  fitPadding?: number;\n  /**\n   * Optional callback that exposes internal helpers for profiling scenarios.\n   */\n  onProfileReady?: (controller: RoutingCanvasProfileController) => void;\n}\n\nfunction TimelineNodeComponent({ data }: NodeProps<TimelineNodeData>) {\n  const { step, onRemove, onEdit } = data;\n  const violations = step.violations ?? [];\n  const [showTooltip, setShowTooltip] = useState(false);\n\n  // 유사도/신뢰도 계산\n  const similarity = step.confidence ?? step.similarity ?? null;\n  const similarityPercent = similarity !== null ? Math.round(similarity * 100) : null;\n  const workSamples = step.workOrderCount ?? null;\n  const workConfidencePercent =\n    step.workOrderConfidence !== null ? Math.round(step.workOrderConfidence * 100) : null;\n  const runStd = step.timeStd ?? null;\n  const timeCvPercent = step.timeCv !== null ? Math.round(step.timeCv * 100) : null;\n  const setupStd = step.setupStd ?? null;\n  const trimMean = step.trimMean ?? null;\n  const sampleCount = step.sampleCount ?? null;\n  const hasWorkData = step.hasWorkData ?? false;\n  const outsourcingReplaced = Boolean(step.outsourcingReplaced);\n\n  // Quality badges\n  const isHighConfidence = workConfidencePercent !== null && workConfidencePercent >= 80;\n  const isLowSamples = sampleCount !== null && sampleCount < 3;\n\n  return (\n    <div\n      className=\"timeline-node\"\n      onDoubleClick={() => onEdit(step.id)}\n      onMouseEnter={() => setShowTooltip(true)}\n      onMouseLeave={() => setShowTooltip(false)}\n    >\n      {/* 공정 정보 툴팁 */}\n      {showTooltip && (\n        <div\n          className=\"timeline-node__tooltip\"\n          style={{\n            position: 'absolute',\n            top: '-130px',\n            left: '50%',\n            transform: 'translateX(-50%)',\n            backgroundColor: '#1e293b',\n            border: '1px solid #475569',\n            borderRadius: '8px',\n            padding: '12px 16px',\n            fontSize: '11px',\n            whiteSpace: 'nowrap',\n            zIndex: 1000,\n            boxShadow: '0 4px 6px rgba(0, 0, 0, 0.3)',\n          }}\n        >\n          <div style={{ color: '#e2e8f0', fontWeight: 600, marginBottom: '6px', borderBottom: '1px solid #475569', paddingBottom: '4px' }}>\n            {step.processCode}\n          </div>\n          <div style={{ color: '#94a3b8', marginBottom: '3px' }}>\n            <span style={{ color: '#cbd5e1', fontWeight: 500 }}>준비:</span> {step.setupTime ?? '-'}분\n          </div>\n          <div style={{ color: '#94a3b8', marginBottom: '3px' }}>\n            <span style={{ color: '#cbd5e1', fontWeight: 500 }}>가공:</span> {step.runTime ?? '-'}분\n          </div>\n          <div style={{ color: '#94a3b8', marginBottom: '3px' }}>\n            <span style={{ color: '#cbd5e1', fontWeight: 500 }}>대기:</span> {step.waitTime ?? '-'}분\n          </div>\n          {step.moveTime !== null && (\n            <div style={{ color: '#94a3b8', marginBottom: '3px' }}>\n              <span style={{ color: '#cbd5e1', fontWeight: 500 }}>이동:</span> {step.moveTime}분\n            </div>\n          )}\n          {(step.optimalTime !== null || step.standardTime !== null || step.safeTime !== null) && (\n            <div style={{ borderTop: '1px solid #475569', marginTop: '6px', paddingTop: '6px' }}>\n              {step.optimalTime !== null && (\n                <div style={{ color: '#94a3b8', marginBottom: '3px' }}>\n                  <span style={{ color: '#10b981', fontWeight: 500 }}>최적:</span> {step.optimalTime}분\n                </div>\n              )}\n              {step.standardTime !== null && (\n                <div style={{ color: '#94a3b8', marginBottom: '3px' }}>\n                  <span style={{ color: '#3b82f6', fontWeight: 500 }}>표준:</span> {step.standardTime}분\n                </div>\n              )}\n              {step.safeTime !== null && (\n                <div style={{ color: '#94a3b8' }}>\n                  <span style={{ color: '#f59e0b', fontWeight: 500 }}>안전:</span> {step.safeTime}분\n                </div>\n              )}\n            </div>\n          )}\n          {(hasWorkData || workSamples || workConfidencePercent !== null || runStd !== null || setupStd !== null || trimMean !== null || sampleCount !== null) && (\n            <div style={{ borderTop: '1px solid #475569', marginTop: '6px', paddingTop: '6px' }}>\n              <div style={{ color: '#94a3b8', marginBottom: '3px' }}>\n                <span style={{ color: hasWorkData ? '#22d3ee' : '#f87171', fontWeight: 500 }}>실적 데이터:</span> {hasWorkData ? '있음' : '없음'}\n              </div>\n              {(workSamples !== null || sampleCount !== null) && (\n                <div style={{ color: '#94a3b8', marginBottom: '3px' }}>\n                  <span style={{ color: '#cbd5e1', fontWeight: 500 }}>샘플 수:</span> {sampleCount ?? workSamples ?? 0}\n                  {isLowSamples && <span style={{ color: '#f59e0b', marginLeft: '4px' }}>⚠️ 낮음</span>}\n                </div>\n              )}\n              {workConfidencePercent !== null && (\n                <div style={{ color: '#94a3b8', marginBottom: '3px' }}>\n                  <span style={{ color: '#34d399', fontWeight: 500 }}>신뢰도:</span> {workConfidencePercent}%\n                  {isHighConfidence && <span style={{ color: '#10b981', marginLeft: '4px' }}>✓ 높음</span>}\n                </div>\n              )}\n              {trimMean !== null && (\n                <div style={{ color: '#94a3b8', marginBottom: '3px' }}>\n                  <span style={{ color: '#60a5fa', fontWeight: 500 }}>Trim-평균:</span> {trimMean.toFixed(2)}분\n                </div>\n              )}\n              {runStd !== null && (\n                <div style={{ color: '#94a3b8', marginBottom: '3px' }}>\n                  <span style={{ color: '#facc15', fontWeight: 500 }}>RUN 표준편차:</span> {runStd.toFixed(2)}\n                  {timeCvPercent !== null ? ` (CV ${timeCvPercent}%)` : ''}\n                </div>\n              )}\n              {setupStd !== null && (\n                <div style={{ color: '#94a3b8', marginBottom: '3px' }}>\n                  <span style={{ color: '#facc15', fontWeight: 500 }}>SETUP 표준편차:</span> {setupStd.toFixed(2)}\n                </div>\n              )}\n            </div>\n          )}\n          {outsourcingReplaced && (\n            <div\n              style={{\n                marginTop: '6px',\n                padding: '4px 6px',\n                backgroundColor: '#f97316',\n                color: '#0f172a',\n                borderRadius: '6px',\n                fontWeight: 600,\n              }}\n            >\n              외주 공정을 사내 공정으로 대체했습니다.\n            </div>\n          )}\n          <div\n            style={{\n              position: 'absolute',\n              bottom: '-6px',\n              left: '50%',\n              transform: 'translateX(-50%)',\n              width: 0,\n              height: 0,\n              borderLeft: '6px solid transparent',\n              borderRight: '6px solid transparent',\n              borderTop: '6px solid #475569',\n            }}\n          />\n        </div>\n      )}\n\n      <header className=\"timeline-node__header\">\n        <div className=\"timeline-node__title-group\">\n          <span className=\"timeline-node__seq\">#{step.seq}</span>\n          <span className=\"timeline-node__title\">{step.processCode}</span>\n          {outsourcingReplaced && (\n            <span className=\"timeline-node__badge\" data-severity=\"warning\">\n              사내전환\n            </span>\n          )}\n          {!hasWorkData && (\n            <span className=\"timeline-node__badge\" data-severity=\"info\">\n              실적없음\n            </span>\n          )}\n          {isHighConfidence && (\n            <span className=\"timeline-node__badge\" data-severity=\"success\" title=\"신뢰도 80% 이상\">\n              고신뢰도\n            </span>\n          )}\n          {isLowSamples && (\n            <span className=\"timeline-node__badge\" data-severity=\"warning\" title=\"샘플 수 3개 미만\">\n              샘플부족\n            </span>\n          )}\n        </div>\n        <div className=\"timeline-node__actions\">\n          {similarityPercent !== null && (\n            <span\n              className=\"timeline-node__similarity\"\n              data-level={similarityPercent >= 90 ? \"high\" : similarityPercent >= 70 ? \"medium\" : \"low\"}\n              title={`유사도: ${similarityPercent}%`}\n            >\n              {similarityPercent}%\n            </span>\n          )}\n          <button\n            type=\"button\"\n            className=\"timeline-node__edit\"\n            onClick={(e) => {\n              e.stopPropagation();\n              onEdit(step.id);\n            }}\n            title=\"시간 조정\"\n          >\n            <Edit2 size={14} />\n          </button>\n          <button type=\"button\" className=\"timeline-node__remove\" onClick={() => onRemove(step.id)}>\n            <Trash2 size={14} />\n          </button>\n        </div>\n      </header>\n      {violations.length > 0 ? (\n        <div className=\"timeline-node__violations\" data-testid={`timeline-node-violations-${step.id}`}>\n          {violations.map((violation: RuleViolation) => (\n            <span\n              key={`${step.id}-${violation.ruleId}-${violation.message}`}\n              className=\"timeline-node__badge\"\n              data-severity={violation.severity ?? \"error\"}\n              data-testid={`rule-badge-${violation.ruleId}`}\n              title={`${violation.ruleId}: ${violation.message}`}\n            >\n              <span className=\"timeline-node__badge-code\">{violation.ruleId}</span>\n              <span className=\"timeline-node__badge-message\">{violation.message}</span>\n            </span>\n          ))}\n        </div>\n      ) : null}\n      {step.description ? <p className=\"timeline-node__desc\">{step.description}</p> : null}\n      <div className=\"timeline-node__meta\">\n        <span className=\"timeline-node__meta-item\">\n          <strong>Setup:</strong> {step.setupTime ?? \"-\"}분\n        </span>\n        <span className=\"timeline-node__meta-item\">\n          <strong>Run:</strong> {step.runTime ?? \"-\"}분\n        </span>\n        <span className=\"timeline-node__meta-item\">\n          <strong>Wait:</strong> {step.waitTime ?? \"-\"}분\n        </span>\n      </div>\n    </div>\n  );\n}\nconst TimelineNode = memo(TimelineNodeComponent);\nTimelineNode.displayName = \"TimelineNode\";\n\nconst nodeTypes = { timeline: TimelineNode } as const;\n\ninterface CanvasViewProps extends RoutingCanvasProps {\n  timeline: TimelineStep[];\n  moveStep: (stepId: string, toIndex: number) => void;\n  insertOperation: (payload: DraggableOperationPayload, index?: number) => void;\n  removeStep: (stepId: string) => void;\n  updateStepTimes: (stepId: string, times: { setupTime?: number; runTime?: number; waitTime?: number }) => void;\n  productTabs: Array<{ id: string; productCode: string; productName?: string | null; candidateId?: string | null; timeline: TimelineStep[] }>;\n  activeProductId: string | null;\n  onCandidateSelect: (tabId: string) => void;\n}\n\nfunction RoutingCanvasView({\n  className,\n  autoFit = true,\n  fitPadding = 0.2,\n  timeline,\n  moveStep,\n  insertOperation,\n  removeStep,\n  updateStepTimes,\n  productTabs,\n  activeProductId,\n  onCandidateSelect,\n  onProfileReady,\n}: CanvasViewProps) {\n  const wrapperRef = useRef<HTMLDivElement | null>(null);\n  const instanceRef = useRef<ReactFlowInstance | null>(null);\n  const viewportRef = useRef<Viewport>({ x: 0, y: 0, zoom: 1 });\n  const syncingScrollRef = useRef(false);\n  const [nodes, setNodes, onNodesChange] = useNodesState<TimelineNodeData>([]);\n  const [edges, setEdges, onEdgesChange] = useEdgesState([]);\n  const [isReady, setIsReady] = useState(false);\n  const profileControllerRef = useRef<RoutingCanvasProfileController | null>(null);\n  const [dropPreviewIndex, setDropPreviewIndex] = useState<number | null>(null);\n  const [editingStep, setEditingStep] = useState<TimelineStep | null>(null);\n  const [selectedEdgeId, setSelectedEdgeId] = useState<string | null>(null);\n\n  const ensureProfileController = useCallback(() => {\n    if (profileControllerRef.current || !onProfileReady) {\n      return;\n    }\n    const controller: RoutingCanvasProfileController = {\n      moveNode: (nodeId, position) => {\n        setNodes((current) =>\n          current.map((node) =>\n            node.id === nodeId\n              ? {\n                  ...node,\n                  position,\n                  positionAbsolute: position,\n                }\n              : node,\n          ),\n        );\n      },\n    };\n    profileControllerRef.current = controller;\n    onProfileReady(controller);\n  }, [onProfileReady, setNodes]);\n\n  const containerClassName = useMemo(\n    () => (className ? `timeline-flow ${className}` : \"timeline-flow\"),\n    [className],\n  );\n\n  const scheduleFrame = useCallback((callback: () => void) => {\n    if (typeof window !== \"undefined\" && typeof window.requestAnimationFrame === \"function\") {\n      window.requestAnimationFrame(callback);\n    } else {\n      callback();\n    }\n  }, []);\n\n  const handleEdit = useCallback((stepId: string) => {\n    const step = timeline.find((s) => s.id === stepId);\n    if (step) {\n      setEditingStep(step);\n    }\n  }, [timeline]);\n\n  const handleSaveTimeEdit = useCallback((stepId: string, times: { setupTime?: number; runTime?: number; waitTime?: number }) => {\n    updateStepTimes(stepId, times);\n    setEditingStep(null);\n  }, [updateStepTimes]);\n\n  const flowNodes = useMemo<Node<TimelineNodeData>[]>(\n    () =>\n      timeline.map((step, index) => ({\n        id: step.id,\n        type: \"timeline\",\n        position: { x: step.positionX ?? index * NODE_GAP, y: 0 },\n        data: { step, onRemove: removeStep, onEdit: handleEdit },\n        draggable: true,\n      })),\n    [timeline, removeStep, handleEdit],\n  );\n\n  const flowEdges = useMemo<Edge[]>(\n    () =>\n      connections.map((connection) => {\n        const isSelected = connection.id === selectedEdgeId;\n        const createdBy = connection.metadata?.createdBy ?? \"auto\";\n        const isManual = createdBy === \"manual\";\n        const baseColor = isManual ? \"rgba(251, 191, 36, 0.9)\" : \"rgba(148, 163, 184, 0.8)\";\n        const highlightColor = isManual ? \"rgb(250, 204, 21)\" : \"rgb(56, 189, 248)\";\n        return {\n          id: connection.id,\n          source: connection.sourceNodeId,\n          target: connection.targetNodeId,\n          animated: isSelected,\n          selectable: true,\n          data: { createdBy },\n          style: {\n            stroke: isSelected ? highlightColor : baseColor,\n            strokeWidth: isManual ? (isSelected ? 3 : 2.5) : isSelected ? 3 : 2,\n            strokeDasharray: isManual ? \"4 2\" : \"none\",\n          },\n          markerEnd: {\n            type: \"arrowclosed\" as const,\n            color: isSelected ? highlightColor : baseColor,\n          },\n        };\n      }),\n    [connections, selectedEdgeId],\n  );\n\n  const canvasDimensions = useMemo(() => {\n    if (flowNodes.length === 0) {\n      return { height: 320 };\n    }\n\n    const maxY = flowNodes.reduce((acc, node) => Math.max(acc, node.position.y), 0);\n\n    return {\n      height: Math.max(320, maxY + NODE_GAP * 1.5),\n    };\n  }, [flowNodes]);\n\n  const syncScrollToViewport = useCallback(\n    (viewport?: Viewport) => {\n      const element = wrapperRef.current;\n      if (!element) {\n        return;\n      }\n      const current = viewport ?? viewportRef.current;\n      viewportRef.current = current;\n      const targetLeft = -current.x;\n      const targetTop = -current.y;\n      if (Math.abs(element.scrollLeft - targetLeft) < 0.5 && Math.abs(element.scrollTop - targetTop) < 0.5) {\n        return;\n      }\n      syncingScrollRef.current = true;\n      element.scrollLeft = targetLeft;\n      element.scrollTop = targetTop;\n      scheduleFrame(() => {\n        syncingScrollRef.current = false;\n      });\n    },\n    [scheduleFrame],\n  );\n\n  const handleInit = useCallback(\n    (instance: ReactFlowInstance) => {\n      instanceRef.current = instance;\n      setIsReady(true);\n      ensureProfileController();\n      if (autoFit) {\n        instance.fitView({ padding: fitPadding, duration: 200, maxZoom: 0.8 });\n        scheduleFrame(() => {\n          const viewport = instance.getViewport();\n          viewportRef.current = viewport;\n          syncScrollToViewport(viewport);\n        });\n      }\n    },\n    [autoFit, fitPadding, ensureProfileController, scheduleFrame, syncScrollToViewport],\n  );\n\n  const handleDrop = useCallback(\n    (event: DragEvent<HTMLDivElement>) => {\n      event.preventDefault();\n      setDropPreviewIndex(null);\n      const transfer = event.dataTransfer.getData(\"application/routing-operation\");\n      if (!transfer) {\n        return;\n      }\n      try {\n        const payload = JSON.parse(transfer);\n        if (!payload?.operation) {\n          return;\n        }\n        let dropIndex = timeline.length;\n        const bounds = wrapperRef.current?.getBoundingClientRect();\n        if (bounds && instanceRef.current) {\n          const position = instanceRef.current.project({\n            x: event.clientX - bounds.left,\n            y: event.clientY - bounds.top,\n          });\n          dropIndex = Math.max(0, Math.min(timeline.length, Math.round(position.x / NODE_GAP)));\n        }\n        insertOperation(payload, dropIndex);\n      } catch (error) {\n        console.warn(\"Failed to parse drag payload\", error);\n      }\n    },\n    [insertOperation, timeline.length],\n  );\n\n  const handleDragOver = useCallback((event: DragEvent<HTMLDivElement>) => {\n    event.preventDefault();\n    event.dataTransfer.dropEffect = \"copy\";\n\n    // 드롭 위치 미리보기 계산\n    const bounds = wrapperRef.current?.getBoundingClientRect();\n    if (bounds && instanceRef.current) {\n      const position = instanceRef.current.project({\n        x: event.clientX - bounds.left,\n        y: event.clientY - bounds.top,\n      });\n      const previewIndex = Math.max(0, Math.min(timeline.length, Math.round(position.x / NODE_GAP)));\n      setDropPreviewIndex(previewIndex);\n    }\n  }, [timeline.length]);\n\n  const handleDragLeave = useCallback(() => {\n    setDropPreviewIndex(null);\n  }, []);\n\n  const handleNodeDragStop = useCallback(\n    (_event: unknown, node: Node<TimelineNodeData>) => {\n      const newIndex = Math.max(0, Math.round(node.position.x / NODE_GAP));\n      moveStep(node.id, newIndex);\n    },\n    [moveStep],\n  );\n\n  const handleMove = useCallback(\n    (_event: unknown, viewport: Viewport) => {\n      viewportRef.current = viewport;\n      syncScrollToViewport(viewport);\n    },\n    [syncScrollToViewport],\n  );\n\n  const handleScroll = useCallback(\n    (event: UIEvent<HTMLDivElement>) => {\n      if (!instanceRef.current || syncingScrollRef.current) {\n        return;\n      }\n      const { scrollLeft, scrollTop } = event.currentTarget;\n      const currentViewport = viewportRef.current;\n      const zoom = currentViewport.zoom ?? instanceRef.current.getZoom();\n      instanceRef.current.setViewport({ x: -scrollLeft, y: -scrollTop, zoom }, { duration: 0 });\n    },\n    [],\n  );\n\n  // Edge selection handler\n  const handleEdgeClick = useCallback(\n    (_event: React.MouseEvent, edge: Edge) => {\n      setSelectedEdgeId(edge.id);\n      const createdBy = edge.data?.createdBy ?? \"auto\";\n      if (createdBy === \"manual\") {\n        setSelectedConnectionStore(edge.id);\n      } else {\n        setSelectedConnectionStore(null);\n      }\n    },\n    [setSelectedConnectionStore],\n  );\n\n  // Delete key handler for removing selected edge\n  useEffect(() => {\n    const handleKeyDown = (event: KeyboardEvent) => {\n      if (event.key === \"Delete\" && selectedEdgeId) {\n        const connection = connections.find((item) => item.id === selectedEdgeId);\n        if (connection && connection.metadata?.createdBy === \"manual\") {\n          removeConnection(selectedEdgeId);\n        }\n        setSelectedEdgeId(null);\n        setSelectedConnectionStore(null);\n      }\n      if (event.key === \"Escape\" && selectedEdgeId) {\n        setSelectedEdgeId(null);\n        setSelectedConnectionStore(null);\n      }\n    };\n\n    window.addEventListener('keydown', handleKeyDown);\n    return () => window.removeEventListener('keydown', handleKeyDown);\n  }, [connections, removeConnection, selectedEdgeId, setSelectedConnectionStore]);\n\n  // Connection handler - creates new edge when dragging from one node to another\n  const handleConnect = useCallback(\n    (connection: Connection) => {\n      if (!connection.source || !connection.target) {\n        return;\n      }\n      addConnection(connection.source, connection.target);\n    },\n    [addConnection],\n  );\n\n  // Reconnection handler - updates existing edge when reconnecting\n  const handleReconnect = useCallback(\n    (oldEdge: Edge, newConnection: Connection) => {\n      if (!newConnection.source || !newConnection.target) return;\n\n      const existing = connections.find((conn) => conn.id === oldEdge.id);\n      if (existing && (existing.metadata?.createdBy ?? \"auto\") === \"manual\") {\n        updateConnection(oldEdge.id, {\n          sourceNodeId: newConnection.source,\n          targetNodeId: newConnection.target,\n        });\n        setSelectedEdgeId(oldEdge.id);\n        setSelectedConnectionStore(oldEdge.id);\n        return;\n      }\n\n      // Validate: no self-connections\n      if (newConnection.source === newConnection.target) {\n        console.warn('Cannot connect node to itself');\n        return;\n      }\n\n      // Find the node being reconnected in timeline\n      const reconnectedNodeId = oldEdge.target; // The node whose input is being changed\n      const newSourceNodeId = newConnection.source;\n\n      // Find indices in timeline\n      const reconnectedNodeIndex = timeline.findIndex(step => step.id === reconnectedNodeId);\n      const newSourceIndex = timeline.findIndex(step => step.id === newSourceNodeId);\n\n      if (reconnectedNodeIndex === -1 || newSourceIndex === -1) {\n        console.warn('Could not find nodes in timeline');\n        return;\n      }\n\n      // Calculate new position: right after the new source\n      const newIndex = newSourceIndex + 1;\n\n      // Only move if position actually changes\n      if (reconnectedNodeIndex !== newIndex) {\n        moveStep(reconnectedNodeId, newIndex);\n      }\n    },\n    [connections, moveStep, setSelectedConnectionStore, timeline, updateConnection],\n  );\n\n  useEffect(() => {\n    setNodes(flowNodes);\n    setEdges(flowEdges);\n  }, [flowNodes, flowEdges, setNodes, setEdges]);\n\n  useEffect(() => {\n    ensureProfileController();\n  }, [ensureProfileController]);\n\n  useEffect(() => {\n    if (autoFit && isReady && instanceRef.current) {\n      instanceRef.current.fitView({ padding: fitPadding, duration: 200, maxZoom: 0.8 });\n      scheduleFrame(() => {\n        const viewport = instanceRef.current?.getViewport();\n        if (viewport) {\n          viewportRef.current = viewport;\n          syncScrollToViewport(viewport);\n        }\n      });\n    }\n  }, [autoFit, fitPadding, timeline.length, isReady, scheduleFrame, syncScrollToViewport]);\n\n  return (\n    <>\n      {/* Candidate Node Tabs - Shows similar item candidates */}\n      <CandidateNodeTabs className=\"mb-4\" />\n\n      {/* Similar Items Candidate List */}\n      {productTabs.length > 1 && (\n        <div className=\"candidate-list\" style={{\n          display: 'flex',\n          gap: '12px',\n          padding: '12px 16px',\n          backgroundColor: '#1e293b',\n          borderBottom: '1px solid #475569',\n          overflowX: 'auto',\n          alignItems: 'center',\n        }}>\n          <span style={{\n            color: '#94a3b8',\n            fontSize: '13px',\n            fontWeight: 500,\n            whiteSpace: 'nowrap',\n          }}>\n            유사 품목:\n          </span>\n          {productTabs.map((tab, index) => {\n            const isActive = tab.id === activeProductId;\n            // Calculate similarity score from first timeline step\n            const firstStep = tab.timeline[0];\n            const similarity = firstStep?.confidence ?? firstStep?.similarity ?? null;\n            const similarityPercent = similarity !== null ? Math.round(similarity * 100) : null;\n\n            return (\n              <button\n                key={tab.id}\n                type=\"button\"\n                onClick={() => onCandidateSelect(tab.id)}\n                className=\"candidate-node\"\n                data-active={isActive}\n                data-testid={`candidate-node-${index}`}\n                style={{\n                  display: 'flex',\n                  flexDirection: 'column',\n                  alignItems: 'center',\n                  gap: '4px',\n                  padding: '8px 12px',\n                  backgroundColor: isActive ? '#3b82f6' : '#334155',\n                  border: isActive ? '2px solid #60a5fa' : '1px solid #475569',\n                  borderRadius: '8px',\n                  cursor: 'pointer',\n                  transition: 'all 0.2s',\n                  whiteSpace: 'nowrap',\n                  minWidth: '80px',\n                }}\n                onMouseEnter={(e) => {\n                  if (!isActive) {\n                    e.currentTarget.style.backgroundColor = '#475569';\n                    e.currentTarget.style.borderColor = '#64748b';\n                  }\n                }}\n                onMouseLeave={(e) => {\n                  if (!isActive) {\n                    e.currentTarget.style.backgroundColor = '#334155';\n                    e.currentTarget.style.borderColor = '#475569';\n                  }\n                }}\n              >\n                <span style={{\n                  color: isActive ? '#fff' : '#e2e8f0',\n                  fontSize: '12px',\n                  fontWeight: 600,\n                }}>\n                  {tab.productCode}\n                </span>\n                {similarityPercent !== null && (\n                  <span style={{\n                    color: isActive ? '#dbeafe' : '#94a3b8',\n                    fontSize: '11px',\n                    fontWeight: 500,\n                  }}>\n                    {similarityPercent}%\n                  </span>\n                )}\n              </button>\n            );\n          })}\n        </div>\n      )}\n\n      <div\n        className={containerClassName}\n        ref={wrapperRef}\n        onDrop={handleDrop}\n        onDragOver={handleDragOver}\n        onDragLeave={handleDragLeave}\n        onScroll={handleScroll}\n        data-testid=\"routing-canvas-scroll\"\n      >\n        <div className=\"timeline-flow__canvas\" style={{ width: \"100%\", height: canvasDimensions.height }}>\n          {/* 드롭 위치 미리보기 인디케이터 */}\n          {dropPreviewIndex !== null && (\n            <div\n              className=\"timeline-flow__drop-indicator\"\n              style={{\n                left: `${dropPreviewIndex * NODE_GAP - 10}px`,\n                top: 0,\n                height: \"100%\",\n              }}\n              data-testid=\"drop-indicator\"\n            />\n          )}\n          <ReactFlow\n            nodes={nodes}\n            edges={edges}\n            nodeTypes={nodeTypes}\n            onNodesChange={onNodesChange}\n            onEdgesChange={onEdgesChange}\n            onEdgeClick={handleEdgeClick}\n            onConnect={handleConnect}\n            onReconnect={handleReconnect}\n            onInit={handleInit}\n            onMove={handleMove}\n            onNodeDragStop={handleNodeDragStop}\n            nodesDraggable\n            nodesConnectable={true}\n            edgesReconnectable={true}\n            reconnectRadius={20}\n            elementsSelectable\n            proOptions={{ hideAttribution: true }}\n            defaultViewport={{ x: 0, y: 50, zoom: 0.8 }}\n            minZoom={0.5}\n            maxZoom={1.5}\n            className=\"timeline-flow__reactflow\"\n            style={{ width: \"100%\", height: \"100%\" }}\n            connectionLineStyle={{\n              stroke: 'rgb(56, 189, 248)',\n              strokeWidth: 2,\n            }}\n            connectionLineType=\"bezier\"\n          >\n            <Controls showZoom={false} showInteractive={false} />\n            <Background gap={32} size={1} />\n          </ReactFlow>\n        </div>\n      </div>\n\n      {editingStep && (\n        <TimeEditModal\n          isOpen={true}\n          onClose={() => setEditingStep(null)}\n          stepId={editingStep.id}\n          processCode={editingStep.processCode}\n          currentSetupTime={editingStep.setupTime ?? undefined}\n          currentRunTime={editingStep.runTime ?? undefined}\n          currentWaitTime={editingStep.waitTime ?? undefined}\n          onSave={handleSaveTimeEdit}\n        />\n      )}\n    </>\n  );\n}\n\nexport function RoutingCanvas(props: RoutingCanvasProps) {\n  const timeline = useRoutingStore((state) => state.timeline);\n  const connections = useRoutingStore((state) => state.connections);\n  const moveStep = useRoutingStore((state) => state.moveStep);\n  const insertOperation = useRoutingStore((state) => state.insertOperation);\n  const removeStep = useRoutingStore((state) => state.removeStep);\n  const updateStepTimes = useRoutingStore((state) => state.updateStepTimes);\n  const addConnection = useRoutingStore((state) => state.addConnection);\n  const removeConnection = useRoutingStore((state) => state.removeConnection);\n  const updateConnection = useRoutingStore((state) => state.updateConnection);\n  const setSelectedConnectionStore = useRoutingStore((state) => state.setSelectedConnection);\n  const productTabs = useRoutingStore((state) => state.productTabs);\n  const activeProductId = useRoutingStore((state) => state.activeProductId);\n  const setActiveProduct = useRoutingStore((state) => state.setActiveProduct);\n\n  return (\n    <ReactFlowProvider>\n      <RoutingCanvasView\n        timeline={timeline}\n        moveStep={moveStep}\n        insertOperation={insertOperation}\n        removeStep={removeStep}\n        updateStepTimes={updateStepTimes}\n        productTabs={productTabs}\n        activeProductId={activeProductId}\n        onCandidateSelect={setActiveProduct}\n        {...props}\n      />\n    </ReactFlowProvider>\n  );\n}\n\nexport default RoutingCanvas;\nexport type { RoutingCanvasProfileController,RoutingCanvasProps };\n","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\syyun\\Documents\\GitHub\\Routing_ML_251014\\frontend-prediction\\src\\components\\routing\\RoutingCombinationSelector.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\syyun\\Documents\\GitHub\\Routing_ML_251014\\frontend-prediction\\src\\components\\routing\\RoutingExplanationDemo.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\syyun\\Documents\\GitHub\\Routing_ML_251014\\frontend-prediction\\src\\components\\routing\\RoutingExplanationPanel.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\syyun\\Documents\\GitHub\\Routing_ML_251014\\frontend-prediction\\src\\components\\routing\\RoutingProductTabs.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\syyun\\Documents\\GitHub\\Routing_ML_251014\\frontend-prediction\\src\\components\\routing\\RoutingWorkspaceLayout.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\syyun\\Documents\\GitHub\\Routing_ML_251014\\frontend-prediction\\src\\components\\routing\\TimeEditModal.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\syyun\\Documents\\GitHub\\Routing_ML_251014\\frontend-prediction\\src\\components\\routing\\__tests__\\ReferenceMatrixPanel.test.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\syyun\\Documents\\GitHub\\Routing_ML_251014\\frontend-prediction\\src\\components\\settings\\IterTrainingSettings.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\syyun\\Documents\\GitHub\\Routing_ML_251014\\frontend-prediction\\src\\components\\timeline\\TimelineWire.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\syyun\\Documents\\GitHub\\Routing_ML_251014\\frontend-prediction\\src\\components\\training\\TrainingMonitor.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":27,"column":27,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":27,"endColumn":30,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[682,685],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[682,685],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":206,"column":62,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":206,"endColumn":65,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[6462,6465],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[6462,6465],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import axios from \"axios\";\nimport { AlertCircle, CheckCircle2, Clock, Pause, Play, RefreshCw, X, XCircle } from \"lucide-react\";\nimport { useCallback, useEffect, useRef, useState } from \"react\";\n\ninterface StartTrainingRequest {\n  cycle_id?: string;\n  sample_size: number;\n  strategy: \"random\" | \"stratified\" | \"recent_bias\";\n}\n\ninterface LogEntry {\n  timestamp: string;\n  level: string;\n  message: string;\n}\n\ninterface JobStatus {\n  job_id: string;\n  status: string;\n  progress: number;\n  current_step: string;\n  logs: LogEntry[];\n  started_at?: string | null;\n  updated_at?: string | null;\n  completed_at?: string | null;\n  error_message?: string | null;\n  result?: Record<string, any> | null;\n}\n\ninterface Job {\n  job_id: string;\n  status: string;\n  progress: number;\n  current_step: string;\n  started_at?: string | null;\n  completed_at?: string | null;\n  error_message?: string | null;\n}\n\nexport function TrainingMonitor() {\n  const [currentJob, setCurrentJob] = useState<JobStatus | null>(null);\n  const [jobHistory, setJobHistory] = useState<Job[]>([]);\n  const [isStarting, setIsStarting] = useState(false);\n  const [sampleSize, setSampleSize] = useState(500);\n  const [strategy, setStrategy] = useState<\"random\" | \"stratified\" | \"recent_bias\">(\"stratified\");\n  const [pollingEnabled, setPollingEnabled] = useState(false);\n  const [error, setError] = useState<string | null>(null);\n  const logContainerRef = useRef<HTMLDivElement>(null);\n\n  // Auto-scroll logs to bottom\n  useEffect(() => {\n    if (logContainerRef.current) {\n      logContainerRef.current.scrollTop = logContainerRef.current.scrollHeight;\n    }\n  }, [currentJob?.logs]);\n\n  // Fetch job history\n  const fetchJobHistory = useCallback(async () => {\n    try {\n      const response = await axios.get<{ jobs: Job[]; total: number }>(\"/api/training/jobs\");\n      setJobHistory(response.data.jobs);\n    } catch (err) {\n      console.error(\"Failed to fetch job history:\", err);\n    }\n  }, []);\n\n  // Fetch current job status\n  const fetchJobStatus = useCallback(async (jobId: string) => {\n    try {\n      const response = await axios.get<JobStatus>(`/api/training/jobs/${jobId}/status`);\n      setCurrentJob(response.data);\n\n      // Stop polling if job is completed or failed\n      if ([\"SUCCEEDED\", \"FAILED\", \"CANCELLED\", \"SKIPPED\"].includes(response.data.status)) {\n        setPollingEnabled(false);\n        fetchJobHistory(); // Refresh history\n      }\n    } catch (err) {\n      console.error(\"Failed to fetch job status:\", err);\n      setPollingEnabled(false);\n    }\n  }, [fetchJobHistory]);\n\n  // Polling interval effect\n  useEffect(() => {\n    if (!pollingEnabled || !currentJob?.job_id) {\n      return;\n    }\n\n    const interval = setInterval(() => {\n      fetchJobStatus(currentJob.job_id);\n    }, 5000); // Poll every 5 seconds\n\n    return () => clearInterval(interval);\n  }, [pollingEnabled, currentJob?.job_id, fetchJobStatus]);\n\n  // Initial fetch\n  useEffect(() => {\n    fetchJobHistory();\n  }, [fetchJobHistory]);\n\n  const handleStartTraining = async () => {\n    setIsStarting(true);\n    setError(null);\n\n    try {\n      const request: StartTrainingRequest = {\n        sample_size: sampleSize,\n        strategy: strategy,\n      };\n\n      const response = await axios.post<{ job_id: string; status: string; message: string }>(\n        \"/api/training/start\",\n        request\n      );\n\n      // Start polling for the new job\n      const jobId = response.data.job_id;\n      setCurrentJob({\n        job_id: jobId,\n        status: \"PENDING\",\n        progress: 0,\n        current_step: \"Initializing...\",\n        logs: [],\n      });\n      setPollingEnabled(true);\n\n      // Immediately fetch status\n      await fetchJobStatus(jobId);\n    } catch (err) {\n      if (axios.isAxiosError(err)) {\n        setError(err.response?.data?.detail || err.message);\n      } else {\n        setError(\"Failed to start training\");\n      }\n      console.error(\"Start training error:\", err);\n    } finally {\n      setIsStarting(false);\n    }\n  };\n\n  const handleCancelJob = async () => {\n    if (!currentJob?.job_id) return;\n\n    try {\n      await axios.delete(`/api/training/jobs/${currentJob.job_id}`);\n      setPollingEnabled(false);\n      fetchJobHistory();\n    } catch (err) {\n      console.error(\"Failed to cancel job:\", err);\n    }\n  };\n\n  const canStartTraining = !currentJob || [\"SUCCEEDED\", \"FAILED\", \"CANCELLED\", \"SKIPPED\"].includes(currentJob.status);\n  const isRunning = currentJob && [\"PENDING\", \"RUNNING\"].includes(currentJob.status);\n\n  return (\n    <div className=\"training-monitor\" style={{ padding: \"24px\", maxWidth: \"1200px\", margin: \"0 auto\" }}>\n      {/* Header */}\n      <div style={{ marginBottom: \"24px\" }}>\n        <h1 style={{ fontSize: \"28px\", fontWeight: 700, color: \"#e2e8f0\", marginBottom: \"8px\" }}>\n          학습 모니터\n        </h1>\n        <p style={{ color: \"#94a3b8\", fontSize: \"14px\" }}>\n          Iterative Training 실행 및 진행 상황 추적\n        </p>\n      </div>\n\n      {/* Control Panel */}\n      <div\n        style={{\n          marginBottom: \"24px\",\n          padding: \"20px\",\n          backgroundColor: \"#1e293b\",\n          borderRadius: \"8px\",\n          border: \"1px solid #334155\",\n        }}\n      >\n        <h2 style={{ fontSize: \"16px\", fontWeight: 600, color: \"#e2e8f0\", marginBottom: \"16px\" }}>\n          학습 설정\n        </h2>\n        <div style={{ display: \"flex\", gap: \"16px\", flexWrap: \"wrap\", marginBottom: \"16px\" }}>\n          <div style={{ display: \"flex\", flexDirection: \"column\", gap: \"6px\", flex: \"1 1 200px\" }}>\n            <label style={{ fontSize: \"13px\", color: \"#94a3b8\", fontWeight: 500 }}>샘플 크기</label>\n            <input\n              type=\"number\"\n              value={sampleSize}\n              onChange={(e) => setSampleSize(Number(e.target.value))}\n              min={10}\n              max={10000}\n              disabled={!canStartTraining}\n              style={{\n                padding: \"8px 12px\",\n                backgroundColor: \"#0f172a\",\n                border: \"1px solid #334155\",\n                borderRadius: \"6px\",\n                color: \"#e2e8f0\",\n                fontSize: \"14px\",\n              }}\n            />\n          </div>\n          <div style={{ display: \"flex\", flexDirection: \"column\", gap: \"6px\", flex: \"1 1 200px\" }}>\n            <label style={{ fontSize: \"13px\", color: \"#94a3b8\", fontWeight: 500 }}>샘플링 전략</label>\n            <select\n              value={strategy}\n              onChange={(e) => setStrategy(e.target.value as any)}\n              disabled={!canStartTraining}\n              style={{\n                padding: \"8px 12px\",\n                backgroundColor: \"#0f172a\",\n                border: \"1px solid #334155\",\n                borderRadius: \"6px\",\n                color: \"#e2e8f0\",\n                fontSize: \"14px\",\n              }}\n            >\n              <option value=\"random\">Random</option>\n              <option value=\"stratified\">Stratified</option>\n              <option value=\"recent_bias\">Recent Bias</option>\n            </select>\n          </div>\n        </div>\n        <div style={{ display: \"flex\", gap: \"12px\" }}>\n          <button\n            type=\"button\"\n            onClick={handleStartTraining}\n            disabled={!canStartTraining || isStarting}\n            style={{\n              display: \"flex\",\n              alignItems: \"center\",\n              gap: \"8px\",\n              padding: \"10px 20px\",\n              backgroundColor: canStartTraining ? \"#3b82f6\" : \"#475569\",\n              color: \"#fff\",\n              border: \"none\",\n              borderRadius: \"6px\",\n              fontSize: \"14px\",\n              fontWeight: 600,\n              cursor: canStartTraining ? \"pointer\" : \"not-allowed\",\n              transition: \"background-color 0.2s\",\n            }}\n            onMouseEnter={(e) => {\n              if (canStartTraining) {\n                e.currentTarget.style.backgroundColor = \"#2563eb\";\n              }\n            }}\n            onMouseLeave={(e) => {\n              if (canStartTraining) {\n                e.currentTarget.style.backgroundColor = \"#3b82f6\";\n              }\n            }}\n          >\n            <Play size={16} />\n            {isStarting ? \"시작 중...\" : \"학습 시작\"}\n          </button>\n          {isRunning && (\n            <button\n              type=\"button\"\n              onClick={handleCancelJob}\n              style={{\n                display: \"flex\",\n                alignItems: \"center\",\n                gap: \"8px\",\n                padding: \"10px 20px\",\n                backgroundColor: \"#dc2626\",\n                color: \"#fff\",\n                border: \"none\",\n                borderRadius: \"6px\",\n                fontSize: \"14px\",\n                fontWeight: 600,\n                cursor: \"pointer\",\n                transition: \"background-color 0.2s\",\n              }}\n              onMouseEnter={(e) => {\n                e.currentTarget.style.backgroundColor = \"#b91c1c\";\n              }}\n              onMouseLeave={(e) => {\n                e.currentTarget.style.backgroundColor = \"#dc2626\";\n              }}\n            >\n              <X size={16} />\n              취소\n            </button>\n          )}\n          <button\n            type=\"button\"\n            onClick={fetchJobHistory}\n            style={{\n              display: \"flex\",\n              alignItems: \"center\",\n              gap: \"8px\",\n              padding: \"10px 20px\",\n              backgroundColor: \"#475569\",\n              color: \"#fff\",\n              border: \"none\",\n              borderRadius: \"6px\",\n              fontSize: \"14px\",\n              fontWeight: 600,\n              cursor: \"pointer\",\n              transition: \"background-color 0.2s\",\n            }}\n            onMouseEnter={(e) => {\n              e.currentTarget.style.backgroundColor = \"#64748b\";\n            }}\n            onMouseLeave={(e) => {\n              e.currentTarget.style.backgroundColor = \"#475569\";\n            }}\n          >\n            <RefreshCw size={16} />\n            새로고침\n          </button>\n        </div>\n        {error && (\n          <div\n            style={{\n              marginTop: \"12px\",\n              padding: \"12px\",\n              backgroundColor: \"#7f1d1d\",\n              border: \"1px solid #dc2626\",\n              borderRadius: \"6px\",\n              color: \"#fca5a5\",\n              fontSize: \"13px\",\n            }}\n          >\n            {error}\n          </div>\n        )}\n      </div>\n\n      {/* Current Job Status */}\n      {currentJob && (\n        <div\n          style={{\n            marginBottom: \"24px\",\n            padding: \"20px\",\n            backgroundColor: \"#1e293b\",\n            borderRadius: \"8px\",\n            border: \"1px solid #334155\",\n          }}\n        >\n          <div style={{ display: \"flex\", justifyContent: \"space-between\", alignItems: \"center\", marginBottom: \"16px\" }}>\n            <h2 style={{ fontSize: \"16px\", fontWeight: 600, color: \"#e2e8f0\" }}>\n              현재 작업: {currentJob.job_id}\n            </h2>\n            <StatusBadge status={currentJob.status} />\n          </div>\n\n          {/* Progress Bar */}\n          <div style={{ marginBottom: \"16px\" }}>\n            <div style={{ display: \"flex\", justifyContent: \"space-between\", marginBottom: \"8px\" }}>\n              <span style={{ fontSize: \"13px\", color: \"#94a3b8\" }}>{currentJob.current_step}</span>\n              <span style={{ fontSize: \"13px\", color: \"#94a3b8\", fontWeight: 600 }}>\n                {currentJob.progress.toFixed(0)}%\n              </span>\n            </div>\n            <div\n              style={{\n                width: \"100%\",\n                height: \"12px\",\n                backgroundColor: \"#0f172a\",\n                borderRadius: \"6px\",\n                overflow: \"hidden\",\n              }}\n            >\n              <div\n                style={{\n                  width: `${currentJob.progress}%`,\n                  height: \"100%\",\n                  backgroundColor: getProgressColor(currentJob.status),\n                  transition: \"width 0.5s ease-in-out\",\n                }}\n              />\n            </div>\n          </div>\n\n          {/* Log Viewer */}\n          <div>\n            <h3 style={{ fontSize: \"14px\", fontWeight: 600, color: \"#cbd5e1\", marginBottom: \"8px\" }}>\n              실시간 로그\n            </h3>\n            <div\n              ref={logContainerRef}\n              style={{\n                maxHeight: \"300px\",\n                overflowY: \"auto\",\n                backgroundColor: \"#0f172a\",\n                border: \"1px solid #334155\",\n                borderRadius: \"6px\",\n                padding: \"12px\",\n                fontFamily: \"monospace\",\n                fontSize: \"12px\",\n              }}\n            >\n              {currentJob.logs && currentJob.logs.length > 0 ? (\n                currentJob.logs.map((log, index) => (\n                  <div\n                    key={index}\n                    style={{\n                      color: getLogColor(log.level),\n                      marginBottom: \"4px\",\n                      whiteSpace: \"pre-wrap\",\n                      wordBreak: \"break-word\",\n                    }}\n                  >\n                    <span style={{ color: \"#64748b\" }}>[{log.timestamp}]</span>{\" \"}\n                    <span style={{ fontWeight: 600 }}>[{log.level}]</span> {log.message}\n                  </div>\n                ))\n              ) : (\n                <div style={{ color: \"#64748b\" }}>로그가 없습니다.</div>\n              )}\n            </div>\n          </div>\n\n          {/* Error Message */}\n          {currentJob.error_message && (\n            <div\n              style={{\n                marginTop: \"12px\",\n                padding: \"12px\",\n                backgroundColor: \"#7f1d1d\",\n                border: \"1px solid #dc2626\",\n                borderRadius: \"6px\",\n                color: \"#fca5a5\",\n                fontSize: \"13px\",\n              }}\n            >\n              <strong>오류:</strong> {currentJob.error_message}\n            </div>\n          )}\n\n          {/* Result */}\n          {currentJob.result && (\n            <div\n              style={{\n                marginTop: \"12px\",\n                padding: \"12px\",\n                backgroundColor: \"#064e3b\",\n                border: \"1px solid #059669\",\n                borderRadius: \"6px\",\n                color: \"#6ee7b7\",\n                fontSize: \"13px\",\n              }}\n            >\n              <strong>결과:</strong> {JSON.stringify(currentJob.result, null, 2)}\n            </div>\n          )}\n        </div>\n      )}\n\n      {/* Job History */}\n      <div\n        style={{\n          padding: \"20px\",\n          backgroundColor: \"#1e293b\",\n          borderRadius: \"8px\",\n          border: \"1px solid #334155\",\n        }}\n      >\n        <h2 style={{ fontSize: \"16px\", fontWeight: 600, color: \"#e2e8f0\", marginBottom: \"16px\" }}>\n          학습 히스토리 ({jobHistory.length}개)\n        </h2>\n        {jobHistory.length === 0 ? (\n          <div style={{ textAlign: \"center\", padding: \"40px\", color: \"#94a3b8\" }}>\n            학습 히스토리가 없습니다.\n          </div>\n        ) : (\n          <div style={{ overflowX: \"auto\" }}>\n            <table style={{ width: \"100%\", borderCollapse: \"collapse\" }}>\n              <thead>\n                <tr style={{ borderBottom: \"1px solid #334155\" }}>\n                  <th style={{ padding: \"12px\", textAlign: \"left\", color: \"#94a3b8\", fontSize: \"12px\", fontWeight: 500 }}>\n                    작업 ID\n                  </th>\n                  <th style={{ padding: \"12px\", textAlign: \"left\", color: \"#94a3b8\", fontSize: \"12px\", fontWeight: 500 }}>\n                    상태\n                  </th>\n                  <th style={{ padding: \"12px\", textAlign: \"center\", color: \"#94a3b8\", fontSize: \"12px\", fontWeight: 500 }}>\n                    진행률\n                  </th>\n                  <th style={{ padding: \"12px\", textAlign: \"left\", color: \"#94a3b8\", fontSize: \"12px\", fontWeight: 500 }}>\n                    현재 단계\n                  </th>\n                  <th style={{ padding: \"12px\", textAlign: \"left\", color: \"#94a3b8\", fontSize: \"12px\", fontWeight: 500 }}>\n                    시작 시간\n                  </th>\n                  <th style={{ padding: \"12px\", textAlign: \"left\", color: \"#94a3b8\", fontSize: \"12px\", fontWeight: 500 }}>\n                    완료 시간\n                  </th>\n                </tr>\n              </thead>\n              <tbody>\n                {jobHistory.map((job) => (\n                  <tr key={job.job_id} style={{ borderBottom: \"1px solid #334155\" }}>\n                    <td style={{ padding: \"12px\", fontSize: \"12px\", color: \"#cbd5e1\", fontFamily: \"monospace\" }}>\n                      {job.job_id}\n                    </td>\n                    <td style={{ padding: \"12px\" }}>\n                      <StatusBadge status={job.status} />\n                    </td>\n                    <td style={{ padding: \"12px\", fontSize: \"12px\", color: \"#cbd5e1\", textAlign: \"center\" }}>\n                      {job.progress.toFixed(0)}%\n                    </td>\n                    <td style={{ padding: \"12px\", fontSize: \"12px\", color: \"#94a3b8\" }}>\n                      {job.current_step}\n                    </td>\n                    <td style={{ padding: \"12px\", fontSize: \"12px\", color: \"#94a3b8\" }}>\n                      {job.started_at ? new Date(job.started_at).toLocaleString(\"ko-KR\") : \"-\"}\n                    </td>\n                    <td style={{ padding: \"12px\", fontSize: \"12px\", color: \"#94a3b8\" }}>\n                      {job.completed_at ? new Date(job.completed_at).toLocaleString(\"ko-KR\") : \"-\"}\n                    </td>\n                  </tr>\n                ))}\n              </tbody>\n            </table>\n          </div>\n        )}\n      </div>\n    </div>\n  );\n}\n\n// Helper Components\nfunction StatusBadge({ status }: { status: string }) {\n  const config = getStatusConfig(status);\n  return (\n    <span\n      style={{\n        display: \"inline-flex\",\n        alignItems: \"center\",\n        gap: \"4px\",\n        padding: \"4px 10px\",\n        borderRadius: \"4px\",\n        backgroundColor: config.bg,\n        color: config.text,\n        fontSize: \"11px\",\n        fontWeight: 600,\n      }}\n    >\n      {config.icon}\n      {status}\n    </span>\n  );\n}\n\nfunction getStatusConfig(status: string): { bg: string; text: string; icon: JSX.Element } {\n  switch (status.toUpperCase()) {\n    case \"PENDING\":\n      return { bg: \"#1e3a8a\", text: \"#93c5fd\", icon: <Clock size={12} /> };\n    case \"RUNNING\":\n      return { bg: \"#78350f\", text: \"#fcd34d\", icon: <RefreshCw size={12} className=\"animate-spin\" /> };\n    case \"SUCCEEDED\":\n      return { bg: \"#064e3b\", text: \"#6ee7b7\", icon: <CheckCircle2 size={12} /> };\n    case \"FAILED\":\n      return { bg: \"#7f1d1d\", text: \"#fca5a5\", icon: <XCircle size={12} /> };\n    case \"CANCELLED\":\n      return { bg: \"#475569\", text: \"#cbd5e1\", icon: <Pause size={12} /> };\n    case \"SKIPPED\":\n      return { bg: \"#475569\", text: \"#94a3b8\", icon: <AlertCircle size={12} /> };\n    default:\n      return { bg: \"#1e293b\", text: \"#94a3b8\", icon: <Clock size={12} /> };\n  }\n}\n\nfunction getProgressColor(status: string): string {\n  switch (status.toUpperCase()) {\n    case \"RUNNING\":\n      return \"#3b82f6\";\n    case \"SUCCEEDED\":\n      return \"#10b981\";\n    case \"FAILED\":\n      return \"#ef4444\";\n    case \"CANCELLED\":\n      return \"#64748b\";\n    default:\n      return \"#475569\";\n  }\n}\n\nfunction getLogColor(level: string): string {\n  switch (level.toUpperCase()) {\n    case \"ERROR\":\n      return \"#fca5a5\";\n    case \"WARNING\":\n      return \"#fcd34d\";\n    case \"INFO\":\n      return \"#93c5fd\";\n    case \"DEBUG\":\n      return \"#94a3b8\";\n    default:\n      return \"#cbd5e1\";\n  }\n}\n","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\syyun\\Documents\\GitHub\\Routing_ML_251014\\frontend-prediction\\src\\components\\ui\\Tabs.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\syyun\\Documents\\GitHub\\Routing_ML_251014\\frontend-prediction\\src\\components\\workspaces\\AuditLogWorkspace.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\syyun\\Documents\\GitHub\\Routing_ML_251014\\frontend-prediction\\src\\components\\workspaces\\DataOutputWorkspace.tsx","messages":[{"ruleId":"simple-import-sort/imports","severity":2,"message":"Run autofix to sort these imports!","line":1,"column":1,"nodeType":null,"messageId":"sort","endLine":18,"endColumn":84,"fix":{"range":[0,785],"text":"import { DatabaseSettings } from \"@components/DatabaseSettings\";\r\nimport { type Tab,TabContainer } from \"@components/TabContainer\";\r\nimport { useOutputProfile, useOutputProfiles } from \"@hooks/useOutputProfiles\";\r\nimport { useWorkflowConfig } from \"@hooks/useWorkflowConfig\";\r\nimport {\n  createOutputProfile,\r\n  type CreateOutputProfilePayload,\r\n  generateOutputPreview,\r\n  type OutputProfileColumn,\r\n  postUiAudit,\r\n  saveWorkspaceSettings,\r\n} from \"@lib/apiClient\";\r\nimport {\r\n  OutputMappingRow as MappingRow,\r\n  useWorkspaceStore,\r\n} from \"@store/workspaceStore\";\r\nimport { AlertCircle, Database,DownloadCloud, Eye, FolderOpen, List, Plus, Save, Settings, Trash2, Upload, X } from \"lucide-react\";\r\nimport { DragEvent, FormEvent, useEffect, useMemo, useRef, useState } from \"react\";"}},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'Settings' is defined but never used.","line":17,"column":82,"nodeType":"Identifier","messageId":"unusedVar","endLine":17,"endColumn":90},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'setOutputMappings'. Either include it or remove the dependency array.","line":212,"column":6,"nodeType":"ArrayExpression","endLine":212,"endColumn":74,"suggestions":[{"desc":"Update the dependencies array to be: [mappingRows, selectedProfileId, setOutputMappings, workflowConfig.sql.output_columns]","fix":{"range":[7550,7618],"text":"[mappingRows, selectedProfileId, setOutputMappings, workflowConfig.sql.output_columns]"}}]},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has missing dependencies: 'mappingRows' and 'setOutputMappings'. Either include them or remove the dependency array.","line":242,"column":6,"nodeType":"ArrayExpression","endLine":242,"endColumn":71,"suggestions":[{"desc":"Update the dependencies array to be: [dirty, mappingRows, profileDetailQuery.data, profileDetailQuery.isRefetching, setOutputMappings]","fix":{"range":[8574,8639],"text":"[dirty, mappingRows, profileDetailQuery.data, profileDetailQuery.isRefetching, setOutputMappings]"}}]}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":1,"fixableWarningCount":0,"source":"﻿import { useOutputProfile, useOutputProfiles } from \"@hooks/useOutputProfiles\";\r\nimport { useWorkflowConfig } from \"@hooks/useWorkflowConfig\";\r\nimport {\n  createOutputProfile,\r\n  type CreateOutputProfilePayload,\r\n  generateOutputPreview,\r\n  postUiAudit,\r\n  saveWorkspaceSettings,\r\n  type OutputProfileColumn,\r\n} from \"@lib/apiClient\";\r\nimport { DatabaseSettings } from \"@components/DatabaseSettings\";\r\nimport { type Tab,TabContainer } from \"@components/TabContainer\";\r\nimport {\r\n  OutputMappingRow as MappingRow,\r\n  useWorkspaceStore,\r\n} from \"@store/workspaceStore\";\r\nimport { AlertCircle, Database,DownloadCloud, Eye, FolderOpen, List, Plus, Save, Settings, Trash2, Upload, X } from \"lucide-react\";\r\nimport { DragEvent, FormEvent, useEffect, useMemo, useRef, useState } from \"react\";\r\n\r\nconst COLUMN_TYPES: Array<{ value: string; label: string }> = [\r\n  { value: \"string\", label: \"Text\" },\r\n  { value: \"number\", label: \"Number\" },\r\n  { value: \"boolean\", label: \"Boolean\" },\r\n  { value: \"date\", label: \"Date/Time\" },\r\n];\r\n\r\nconst FORMAT_EXTENSIONS: Record<string, string> = {\r\n  CSV: \".csv\",\r\n  TXT: \".txt\",\r\n  JSON: \".json\",\r\n  XML: \".xml\",\r\n  EXCEL: \".xlsx\",\r\n  PARQUET: \".parquet\",\r\n  ACCESS: \".accdb\",\r\n};\r\n\r\nconst createMappingRowId = () => {\r\n  if (typeof crypto !== \"undefined\" && \"randomUUID\" in crypto) {\r\n    return crypto.randomUUID();\r\n  }\r\n  return `mapping-${Date.now().toString(36)}-${Math.random().toString(36).slice(2, 10)}`;\r\n};\r\n\r\nfunction createMappingRow(partial?: Partial<Omit<MappingRow, \"id\">>): MappingRow {\r\n  return {\r\n    id: createMappingRowId(),\r\n    source: partial?.source ?? \"\",\r\n    mapped: partial?.mapped ?? \"\",\r\n    type: partial?.type ?? \"string\",\r\n    required: partial?.required ?? false,\r\n    defaultValue: partial?.defaultValue ?? \"\",\r\n  };\r\n}\r\n\r\nfunction toMappingRow(column: OutputProfileColumn): MappingRow {\r\n  return createMappingRow({\r\n    source: column.source ?? \"\",\r\n    mapped: column.mapped ?? \"\",\r\n    type: column.type ?? \"string\",\r\n    required: Boolean(column.required),\r\n    defaultValue: column.default_value ?? column.defaultValue ?? \"\",\r\n  });\r\n}\r\n\r\nfunction rowsEqual(a: MappingRow[], b: MappingRow[]): boolean {\r\n  if (a.length !== b.length) {\r\n    return false;\r\n  }\r\n  return a.every((row, index) => {\r\n    const other = b[index];\r\n    if (!other) {\r\n      return false;\r\n    }\r\n    return (\r\n      row.source === other.source &&\r\n      row.mapped === other.mapped &&\r\n      row.type === other.type &&\r\n      row.required === other.required &&\r\n      (row.defaultValue ?? \"\") === (other.defaultValue ?? \"\")\r\n    );\r\n  });\r\n}\r\n\r\nfunction buildColumnNames(rows: MappingRow[]): string[] {\r\n  return rows\r\n    .map((row) => row.mapped.trim() || row.source.trim())\r\n    .filter((column, index, all) => column !== \"\" && all.indexOf(column) === index);\r\n}\r\n\r\nfunction buildGeneratedPreview(rows: MappingRow[]): Array<Record<string, string>> {\r\n  const columns = buildColumnNames(rows);\r\n  if (columns.length === 0) {\r\n    return [];\r\n  }\r\n  const rowCount = Math.min(3, Math.max(1, columns.length));\r\n  return Array.from({ length: rowCount }, (_, rowIndex) => {\r\n    const record: Record<string, string> = {};\r\n    columns.forEach((column, columnIndex) => {\r\n      record[column] = `R${rowIndex + 1}-${columnIndex + 1}`;\r\n    });\r\n    return record;\r\n  });\r\n}\r\n\r\nfunction safeFormatDate(value?: string | null): string | null {\r\n  if (!value) {\r\n    return null;\r\n  }\r\n  const date = new Date(value);\r\n  if (Number.isNaN(date.getTime())) {\r\n    return value;\r\n  }\r\n  return date.toLocaleDateString();\r\n}\r\n\r\ntype PreviewRenderable = string | number | boolean;\r\n\r\nfunction renderPreviewValue(value: unknown): PreviewRenderable {\r\n  if (value === null || value === undefined) {\r\n    return \"-\";\r\n  }\r\n  if (typeof value === \"string\" || typeof value === \"number\" || typeof value === \"boolean\") {\r\n    return value;\r\n  }\r\n  if (value instanceof Date) {\r\n    return value.toISOString();\r\n  }\r\n  if (typeof value === \"object\") {\r\n    try {\r\n      return JSON.stringify(value);\r\n    } catch {\r\n      return \"[object]\";\r\n    }\r\n  }\r\n  return String(value);\r\n}\r\n\r\nexport function DataOutputWorkspace() {\r\n  const { data: workflowConfig, saveConfig, saving: configSaving, isLoading: configLoading } = useWorkflowConfig();\r\n\r\n  const profilesQuery = useOutputProfiles();\r\n\r\n  const [selectedProfileId, setSelectedProfileId] = useState<string | null>(null);\r\n  const [format, setFormat] = useState<string>(\"CSV\");\r\n  const mappingRows = useWorkspaceStore((state) => state.outputMappings);\r\n  const setOutputMappings = useWorkspaceStore((state) => state.setOutputMappings);\r\n  const updateOutputMappings = useWorkspaceStore((state) => state.updateOutputMappings);\r\n  const reorderOutputMappings = useWorkspaceStore((state) => state.reorderOutputMappings);\r\n  const [previewRows, setPreviewRows] = useState<Array<Record<string, unknown>>>([]);\r\n  const [previewColumnsState, setPreviewColumnsState] = useState<string[]>([]);\r\n  const [previewLoading, setPreviewLoading] = useState<boolean>(false);\r\n  const [previewErrorMessage, setPreviewErrorMessage] = useState<string>(\"\");\r\n  const [statusMessage, setStatusMessage] = useState<string>(\"\");\r\n  const [errorMessage, setErrorMessage] = useState<string>(\"\");\r\n  const [dirty, setDirty] = useState<boolean>(false);\r\n  const [saving, setSaving] = useState<boolean>(false);\r\n\r\n  // New Profile Modal State\r\n  const [showNewProfileModal, setShowNewProfileModal] = useState<boolean>(false);\r\n  const [newProfileName, setNewProfileName] = useState<string>(\"\");\r\n  const [newProfileDescription, setNewProfileDescription] = useState<string>(\"\");\r\n  const [newProfileFormat, setNewProfileFormat] = useState<string>(\"CSV\");\r\n  const [creatingProfile, setCreatingProfile] = useState<boolean>(false);\r\n  const [createProfileError, setCreateProfileError] = useState<string>(\"\");\r\n\r\n  const selectedProfile = useMemo(() => {\r\n    if (!profilesQuery.data) {\r\n      return null;\r\n    }\r\n    return profilesQuery.data.find((profile) => profile.id === selectedProfileId) ?? null;\r\n  }, [profilesQuery.data, selectedProfileId]);\r\n\r\n  useEffect(() => {\r\n    if (!profilesQuery.data || profilesQuery.data.length === 0) {\r\n      return;\r\n    }\r\n    const activeProfileName = workflowConfig?.sql.active_profile;\r\n    const byActive = activeProfileName\r\n      ? profilesQuery.data.find(\r\n          (profile) => profile.id === activeProfileName || profile.name === activeProfileName,\r\n        )\r\n      : undefined;\r\n    const fallback = profilesQuery.data[0];\r\n    const next = byActive?.id ?? selectedProfileId ?? fallback?.id ?? null;\r\n    if (next && next !== selectedProfileId) {\r\n      setSelectedProfileId(next);\r\n    }\r\n  }, [profilesQuery.data, workflowConfig?.sql.active_profile, selectedProfileId]);\r\n\r\n  const profileDetailQuery = useOutputProfile(selectedProfileId);\r\n\r\n  const dragSourceIndex = useRef<number | null>(null);\r\n\r\n  useEffect(() => {\r\n    if (!selectedProfileId && workflowConfig?.sql.output_columns?.length) {\r\n      const fallbackRows = workflowConfig.sql.output_columns.map((column) =>\r\n        createMappingRow({\r\n          source: column,\r\n          mapped: column,\r\n          type: \"string\",\r\n          required: false,\r\n        }),\r\n      );\r\n      if (!rowsEqual(mappingRows, fallbackRows)) {\r\n        setOutputMappings(fallbackRows);\r\n      }\r\n      setPreviewRows(buildGeneratedPreview(fallbackRows));\r\n      setPreviewColumnsState(buildColumnNames(fallbackRows));\r\n      setPreviewErrorMessage(\"\");\r\n      setPreviewLoading(false);\r\n    }\r\n  }, [mappingRows, selectedProfileId, workflowConfig?.sql.output_columns]);\r\n\r\n  useEffect(() => {\r\n    const detail = profileDetailQuery.data;\r\n    if (!detail) {\r\n      return;\r\n    }\r\n    if (profileDetailQuery.isRefetching && dirty) {\r\n      return;\r\n    }\r\n    const nextRows = detail.mappings?.map(toMappingRow) ?? [];\r\n    if (!rowsEqual(mappingRows, nextRows)) {\r\n      setOutputMappings(nextRows);\r\n    }\r\n    if (!dirty) {\r\n      const previewFromApi = detail.sample && detail.sample.length > 0 ? detail.sample : null;\r\n      const previewRowsFromData = previewFromApi ?? buildGeneratedPreview(nextRows);\r\n      setPreviewRows(previewRowsFromData);\r\n      if (previewFromApi && previewFromApi[0]) {\r\n        setPreviewColumnsState(Object.keys(previewFromApi[0]));\r\n      } else {\r\n        setPreviewColumnsState(buildColumnNames(nextRows));\r\n      }\r\n      setPreviewErrorMessage(\"\");\r\n      setPreviewLoading(false);\r\n    }\r\n    if (detail.format) {\r\n      setFormat(detail.format);\r\n    }\r\n    setDirty(false);\r\n  }, [dirty, profileDetailQuery.data, profileDetailQuery.isRefetching]);\r\n\r\n  useEffect(() => {\r\n    if (profileDetailQuery.isLoading) {\r\n      if (!dirty) {\r\n        setPreviewLoading(true);\r\n      }\r\n      return;\r\n    }\r\n\r\n    if (!dirty && profileDetailQuery.data?.sample && profileDetailQuery.data.sample.length > 0) {\r\n      const sampleRows = profileDetailQuery.data.sample;\r\n      setPreviewRows(sampleRows);\r\n      setPreviewColumnsState(Object.keys(sampleRows[0] ?? {}));\r\n      setPreviewErrorMessage(\"\");\r\n      setPreviewLoading(false);\r\n      return;\r\n    }\r\n\r\n    const generated = buildGeneratedPreview(mappingRows);\r\n    setPreviewRows(generated);\r\n    const generatedColumns = generated[0] ? Object.keys(generated[0]) : buildColumnNames(mappingRows);\r\n    setPreviewColumnsState(generatedColumns);\r\n    if (dirty) {\r\n      setPreviewErrorMessage(\"Save to refresh backend preview.\");\r\n    } else {\r\n      setPreviewErrorMessage(\"\");\r\n    }\r\n    setPreviewLoading(false);\r\n  }, [dirty, mappingRows, profileDetailQuery.data?.sample, profileDetailQuery.isLoading]);\r\n\r\n  const availableColumns = useMemo(() => {\r\n    const base = workflowConfig?.sql.available_columns ?? [];\r\n    const fromRows = mappingRows.map((row) => row.source).filter((value) => value.trim() !== \"\");\r\n    const merged = new Set<string>([...base, ...fromRows]);\r\n    return Array.from(merged).sort((a, b) => a.localeCompare(b));\r\n  }, [mappingRows, workflowConfig?.sql.available_columns]);\r\n\r\n  useEffect(() => {\r\n    if (dirty) {\r\n      return;\r\n    }\r\n\r\n    if (profileDetailQuery.isLoading || profileDetailQuery.isFetching) {\r\n      return;\r\n    }\r\n\r\n    const trimmedRows = mappingRows\r\n      .map((row) => ({\r\n        source: row.source.trim(),\r\n        mapped: row.mapped.trim(),\r\n        type: row.type.trim() || \"string\",\r\n        required: row.required,\r\n        defaultValue: row.defaultValue?.trim() ?? \"\",\r\n      }))\r\n      .filter((row) => row.source !== \"\" || row.defaultValue !== \"\");\r\n\r\n    if (trimmedRows.length === 0) {\r\n      setPreviewRows([]);\r\n      setPreviewColumnsState([]);\r\n      setPreviewLoading(false);\r\n      setPreviewErrorMessage(\"\");\r\n      return;\r\n    }\r\n\r\n    let ignore = false;\r\n    setPreviewLoading(true);\r\n    setPreviewErrorMessage(\"\");\r\n\r\n    generateOutputPreview({\r\n      profileId: selectedProfileId,\r\n      mappings: trimmedRows.map((row) => ({\r\n        source: row.source,\r\n        mapped: row.mapped,\r\n        type: row.type,\r\n        required: row.required,\r\n        default_value: row.defaultValue || undefined,\r\n      })),\r\n      format,\r\n    })\r\n      .then(({ rows, columns }) => {\r\n        if (ignore) {\r\n          return;\r\n        }\r\n        if (rows.length > 0) {\r\n          setPreviewRows(rows);\r\n          setPreviewColumnsState(columns.length > 0 ? columns : Object.keys(rows[0]));\r\n          setPreviewErrorMessage(\"\");\r\n        } else {\r\n          const generated = buildGeneratedPreview(mappingRows);\r\n          setPreviewRows(generated);\r\n          const generatedColumns = generated[0]\r\n            ? Object.keys(generated[0])\r\n            : buildColumnNames(mappingRows);\r\n          setPreviewColumnsState(generatedColumns);\r\n          setPreviewErrorMessage(\"No preview rows returned. Showing generated sample.\");\r\n        }\r\n      })\r\n      .catch(() => {\r\n        if (ignore) {\r\n          return;\r\n        }\r\n        const generated = buildGeneratedPreview(mappingRows);\r\n        setPreviewRows(generated);\r\n        const generatedColumns = generated[0] ? Object.keys(generated[0]) : buildColumnNames(mappingRows);\r\n        setPreviewColumnsState(generatedColumns);\r\n        setPreviewErrorMessage(\"Failed to load backend preview. Showing generated sample.\");\r\n      })\r\n      .finally(() => {\r\n        if (!ignore) {\r\n          setPreviewLoading(false);\r\n        }\r\n      });\r\n\r\n    return () => {\r\n      ignore = true;\r\n    };\r\n  }, [\r\n    dirty,\r\n    mappingRows,\r\n    selectedProfileId,\r\n    format,\r\n    profileDetailQuery.isFetching,\r\n    profileDetailQuery.isLoading,\r\n  ]);\r\n\r\n  const formatOptions = useMemo(() => {\r\n    const exportCfg = workflowConfig?.export;\r\n    const options: Array<{ value: string; label: string; enabled: boolean }> = [\r\n      { value: \"CSV\", label: \"CSV (comma)\", enabled: exportCfg?.enable_csv ?? true },\r\n      { value: \"EXCEL\", label: \"Excel (XLSX)\", enabled: exportCfg?.enable_excel ?? false },\r\n      { value: \"TXT\", label: \"Text (TXT)\", enabled: exportCfg?.enable_txt ?? false },\r\n      { value: \"JSON\", label: \"JSON\", enabled: exportCfg?.enable_json ?? false },\r\n      { value: \"PARQUET\", label: \"Parquet\", enabled: exportCfg?.enable_parquet ?? false },\r\n      { value: \"ACCESS\", label: \"MS MSSQL (ERP)\", enabled: exportCfg?.erp_interface_enabled ?? false },\r\n      { value: \"XML\", label: \"XML\", enabled: true },\r\n    ];\r\n    const enabled = options.filter((option) => option.enabled);\r\n    return enabled.length > 0 ? enabled : [{ value: \"CSV\", label: \"CSV (comma)\", enabled: true }];\r\n  }, [workflowConfig?.export]);\r\n\r\n  useEffect(() => {\r\n    if (formatOptions.length === 0) {\r\n      return;\r\n    }\r\n    if (!formatOptions.some((option) => option.value === format)) {\r\n      setFormat(formatOptions[0].value);\r\n    }\r\n  }, [format, formatOptions]);\r\n\r\n  const previewFileLabel = useMemo(() => {\r\n    const extension = FORMAT_EXTENSIONS[format] ?? \"\";\r\n    if (extension) {\r\n      return `Sample export ${extension}`;\r\n    }\r\n    return `${format} preview`;\r\n  }, [format]);\r\n\r\n  const handleFormatChange = (nextFormat: string) => {\r\n    setFormat(nextFormat);\r\n    setDirty(true);\r\n    setStatusMessage(\"\");\r\n    setErrorMessage(\"\");\r\n    const generated = buildGeneratedPreview(mappingRows);\r\n    setPreviewRows(generated);\r\n    const generatedColumns = generated[0] ? Object.keys(generated[0]) : buildColumnNames(mappingRows);\r\n    setPreviewColumnsState(generatedColumns);\r\n    setPreviewErrorMessage(\"Save to refresh backend preview.\");\r\n  };\r\n\r\n  const previewColumns = useMemo(() => {\r\n    if (previewColumnsState.length > 0) {\r\n      return previewColumnsState;\r\n    }\r\n    const firstRow = previewRows[0];\r\n    if (!firstRow) {\r\n      return [];\r\n    }\r\n    return Object.keys(firstRow);\r\n  }, [previewColumnsState, previewRows]);\r\n\r\n  const validationIssues = useMemo(() => {\r\n    const issues: string[] = [];\r\n    const trimmedRows = mappingRows.map((row) => ({\r\n      source: row.source.trim(),\r\n      mapped: row.mapped.trim(),\r\n      type: row.type.trim(),\r\n      required: row.required,\r\n      defaultValue: row.defaultValue?.trim() ?? \"\",\r\n    }));\r\n    const requiredMissing = trimmedRows.filter(\r\n      (row) => row.required && ((!row.source && !row.defaultValue) || !row.mapped),\r\n    );\r\n    if (requiredMissing.length > 0) {\r\n      issues.push(\r\n        `Required columns missing mapping: ${requiredMissing\r\n          .map((row) => row.source || row.mapped || \"(blank)\")\r\n          .join(\", \")}`,\r\n      );\r\n    }\r\n    const sourceCounts = new Map<string, number>();\r\n    trimmedRows.forEach((row) => {\r\n      if (!row.source) {\r\n        return;\r\n      }\r\n      sourceCounts.set(row.source, (sourceCounts.get(row.source) ?? 0) + 1);\r\n    });\r\n    const duplicates = Array.from(sourceCounts.entries())\r\n      .filter(([, count]) => count > 1)\r\n      .map(([source]) => source);\r\n    if (duplicates.length > 0) {\r\n      issues.push(`Duplicate source columns: ${duplicates.join(\", \")}`);\r\n    }\r\n    return issues;\r\n  }, [mappingRows]);\r\n\r\n  const handleAddRow = () => {\r\n    updateOutputMappings((rows) => [...rows, createMappingRow()]);\r\n    setDirty(true);\r\n    setStatusMessage(\"\");\r\n    setErrorMessage(\"\");\r\n    setPreviewErrorMessage(\"Save to refresh backend preview.\");\r\n  };\r\n\r\n  const handleRemoveRow = (index: number) => {\r\n    updateOutputMappings((rows) => rows.filter((_, rowIndex) => rowIndex !== index));\r\n    setDirty(true);\r\n    setStatusMessage(\"\");\r\n    setErrorMessage(\"\");\r\n    setPreviewErrorMessage(\"Save to refresh backend preview.\");\r\n  };\r\n\r\n  const handleRowChange = (index: number, field: keyof MappingRow, value: string | boolean) => {\r\n    updateOutputMappings((rows) => {\r\n      const next = [...rows];\r\n      const current = { ...next[index] };\r\n      if (field === \"required\" && typeof value === \"boolean\") {\r\n        current.required = value;\r\n      } else if (field === \"source\" && typeof value === \"string\") {\r\n        current.source = value;\r\n      } else if (field === \"mapped\" && typeof value === \"string\") {\r\n        current.mapped = value;\r\n      } else if (field === \"type\" && typeof value === \"string\") {\r\n        current.type = value;\r\n      } else if (field === \"defaultValue\" && typeof value === \"string\") {\r\n        current.defaultValue = value;\r\n      }\r\n      next[index] = current;\r\n      return next;\r\n    });\r\n    setDirty(true);\r\n    setStatusMessage(\"\");\r\n    setErrorMessage(\"\");\r\n    setPreviewErrorMessage(\"Save to refresh backend preview.\");\r\n  };\r\n\r\n  const handleRowDragStart = (index: number) => () => {\r\n    dragSourceIndex.current = index;\r\n  };\r\n\r\n  const handleRowDragOver = (event: DragEvent<HTMLTableRowElement>) => {\r\n    event.preventDefault();\r\n    if (event.dataTransfer) {\r\n      event.dataTransfer.dropEffect = \"move\";\r\n    }\r\n  };\r\n\r\n  const handleRowDrop = (index: number) => (event: DragEvent<HTMLTableRowElement>) => {\r\n    event.preventDefault();\r\n    const fromIndex = dragSourceIndex.current;\r\n    dragSourceIndex.current = null;\r\n    if (fromIndex === null || fromIndex === index) {\r\n      return;\r\n    }\r\n    reorderOutputMappings(fromIndex, index);\r\n    setDirty(true);\r\n    setStatusMessage(\"\");\r\n    setErrorMessage(\"\");\r\n    setPreviewErrorMessage(\"Save to refresh backend preview.\");\r\n  };\r\n\r\n  const handleRowDragEnd = () => {\r\n    dragSourceIndex.current = null;\r\n  };\r\n\r\n  const handleSaveProfile = async () => {\r\n    if (!selectedProfileId) {\r\n      return;\r\n    }\r\n    const trimmedRows = mappingRows\r\n      .map((row) => ({\r\n        source: row.source.trim(),\r\n        mapped: row.mapped.trim(),\r\n        type: row.type.trim() || \"string\",\r\n        required: row.required,\r\n        defaultValue: row.defaultValue?.trim() ?? \"\",\r\n      }))\r\n      .filter((row) => row.source !== \"\" || row.defaultValue !== \"\");\r\n\r\n    if (trimmedRows.length === 0) {\r\n      setErrorMessage(\"Add at least one mapped column before saving.\");\r\n      return;\r\n    }\r\n\r\n    const missingRequired = trimmedRows.filter(\r\n      (row) => row.required && (row.mapped === \"\" || (row.source === \"\" && row.defaultValue === \"\")),\r\n    );\r\n    if (missingRequired.length > 0) {\r\n      setErrorMessage(\"Fill in all required column aliases before saving.\");\r\n      return;\r\n    }\r\n\r\n    const duplicates = new Set<string>();\r\n    const seenSources = new Set<string>();\r\n    trimmedRows.forEach((row) => {\r\n      if (seenSources.has(row.source)) {\r\n        duplicates.add(row.source);\r\n      } else {\r\n        seenSources.add(row.source);\r\n      }\r\n    });\r\n    if (duplicates.size > 0) {\r\n      setErrorMessage(`Duplicate source columns: ${Array.from(duplicates).join(\", \")}`);\r\n      return;\r\n    }\r\n\r\n    try {\r\n      setSaving(true);\r\n      setStatusMessage(\"\");\r\n      setErrorMessage(\"\");\r\n      setPreviewErrorMessage(\"\");\r\n      const aliasMap: Record<string, string> = {};\r\n      trimmedRows.forEach((row) => {\r\n        if (row.source && row.mapped && row.mapped !== row.source) {\r\n          aliasMap[row.mapped] = row.source;\r\n        }\r\n      });\r\n      const normalizedRows: MappingRow[] = trimmedRows.map((row, index) => ({\r\n        id: mappingRows[index]?.id ?? createMappingRowId(),\r\n        source: row.source,\r\n        mapped: row.mapped || row.source,\r\n        type: row.type,\r\n        required: row.required,\r\n        defaultValue: row.defaultValue,\r\n      }));\r\n      await saveWorkspaceSettings({\r\n        version: Date.now(),\r\n        output: {\r\n          profile_id: selectedProfileId,\r\n          profile_name: selectedProfile?.name ?? null,\r\n          format,\r\n          mappings: trimmedRows.map((row) => ({\r\n            source: row.source,\r\n            mapped: row.mapped,\r\n            type: row.type,\r\n            required: row.required,\r\n            default_value: row.defaultValue || undefined,\r\n          })),\r\n        },\r\n      });\r\n      await saveConfig({\r\n        sql: {\r\n          output_columns: trimmedRows.filter((row) => row.source !== \"\").map((row) => row.source),\r\n          column_aliases: aliasMap,\r\n          active_profile: selectedProfile?.id ?? selectedProfile?.name ?? selectedProfileId,\r\n        },\r\n      });\r\n      await postUiAudit({\r\n        action: \"ui.output.profile.save\",\r\n        username: \"codex\",\r\n        payload: {\r\n          profile_id: selectedProfileId,\r\n          format,\r\n          column_count: trimmedRows.length,\r\n          required_columns: trimmedRows.filter((row) => row.required).map((row) => row.source),\r\n        },\r\n      });\r\n      setOutputMappings(normalizedRows);\r\n      setPreviewColumnsState(buildColumnNames(normalizedRows));\r\n      setPreviewRows(buildGeneratedPreview(normalizedRows));\r\n      setPreviewLoading(true);\r\n      setStatusMessage(\"Output profile saved.\");\r\n      setDirty(false);\r\n      void profilesQuery.refresh();\r\n      void profileDetailQuery.refresh();\r\n    } catch (error) {\r\n      setErrorMessage(\"Failed to save output profile.\");\r\n    } finally {\r\n      setSaving(false);\r\n    }\r\n  };\r\n\r\n  const handleSubmitForm = async (event: FormEvent<HTMLFormElement>) => {\r\n    event.preventDefault();\r\n    await handleSaveProfile();\r\n  };\r\n\r\n  const handleOpenNewProfileModal = () => {\r\n    setNewProfileName(\"\");\r\n    setNewProfileDescription(\"\");\r\n    setNewProfileFormat(\"CSV\");\r\n    setCreateProfileError(\"\");\r\n    setShowNewProfileModal(true);\r\n  };\r\n\r\n  const handleCloseNewProfileModal = () => {\r\n    if (creatingProfile) return;\r\n    setShowNewProfileModal(false);\r\n  };\r\n\r\n  const handleCreateProfile = async () => {\r\n    const trimmedName = newProfileName.trim();\r\n    if (!trimmedName) {\r\n      setCreateProfileError(\"프로파일 이름을 입력해주세요.\");\r\n      return;\r\n    }\r\n\r\n    try {\r\n      setCreatingProfile(true);\r\n      setCreateProfileError(\"\");\r\n\r\n      const payload: CreateOutputProfilePayload = {\r\n        name: trimmedName,\r\n        description: newProfileDescription.trim() || null,\r\n        format: newProfileFormat,\r\n        mappings: [],\r\n      };\r\n\r\n      const result = await createOutputProfile(payload);\r\n\r\n      // 프로파일 목록 새로고침\r\n      await profilesQuery.refresh();\r\n\r\n      // 성공 시 모달 닫고, 새 프로파일 선택\r\n      setShowNewProfileModal(false);\r\n      setSelectedProfileId(result.id);\r\n      setStatusMessage(result.message || \"프로파일이 생성되었습니다.\");\r\n\r\n    } catch (error: unknown) {\r\n      const detail = error instanceof Error ? error.message : undefined;\r\n      setCreateProfileError(detail ?? 'Failed to create profile.');\r\n    } finally {\r\n      setCreatingProfile(false);\r\n    }\r\n  };\r\n\r\n  const isSaving = saving || configSaving;\r\n  const isLoading = configLoading || profilesQuery.isLoading || profileDetailQuery.isLoading;\r\n\r\n  // Tab 1: Profile Selection\r\n  const profilesTab = (\r\n    <div className=\"max-w-4xl mx-auto\">\r\n      <div className=\"glass-morphism p-8 rounded-xl\">\r\n        <header className=\"flex items-center justify-between mb-6\">\r\n          <h2 className=\"heading-2\">Output Profiles</h2>\r\n          <button\r\n            type=\"button\"\r\n            className=\"btn-secondary neon-cyan\"\r\n            title=\"Create new profile\"\r\n            onClick={handleOpenNewProfileModal}\r\n          >\r\n            <Plus size={16} /> New Profile\r\n          </button>\r\n        </header>\r\n        {profilesQuery.isLoading && <p className=\"body-text-secondary text-center py-8\">Loading profiles…</p>}\r\n        {profilesQuery.isError && <p className=\"text-red-400 text-center py-8\">Failed to load profiles.</p>}\r\n        <div className=\"grid gap-3\">\r\n          {profilesQuery.data?.map((profile, index) => {\r\n            const formattedDate = safeFormatDate(profile.updated_at);\r\n            const isActive = selectedProfileId === profile.id;\r\n            return (\r\n              <button\r\n                key={profile.id}\r\n                type=\"button\"\r\n                className={`\r\n                  stagger-item text-left p-5 rounded-lg border-2 transition-all duration-300\r\n                  hover-lift\r\n                  ${isActive\r\n                    ? 'border-primary-400 bg-primary-500/10 neon-cyan scale-105'\r\n                    : 'border-dark-border bg-dark-surface hover:border-primary-500/50 hover:bg-dark-elevated'\r\n                  }\r\n                `}\r\n                style={{ animationDelay: `${index * 0.05}s` }}\r\n                onClick={() => {\r\n                  setSelectedProfileId(profile.id);\r\n                  setDirty(false);\r\n                  setStatusMessage(\"\");\r\n                  setErrorMessage(\"\");\r\n                  setPreviewRows([]);\r\n                  setPreviewColumnsState([]);\r\n                  setPreviewErrorMessage(\"\");\r\n                  setPreviewLoading(true);\r\n                }}\r\n                onMouseEnter={() => profileDetailQuery.prefetch(profile.id)}\r\n              >\r\n                <div className=\"flex items-start justify-between\">\r\n                  <div className=\"flex-1\">\r\n                    <h3 className=\"font-semibold text-lg mb-1\">{profile.name}</h3>\r\n                    <p className=\"body-text-secondary text-sm mb-2\">\r\n                      {profile.description || profile.format || 'No description'}\r\n                    </p>\r\n                    {formattedDate && (\r\n                      <p className=\"text-xs text-dark-text-tertiary\">\r\n                        Updated {formattedDate}\r\n                      </p>\r\n                    )}\r\n                  </div>\r\n                  {isActive && (\r\n                    <div className=\"ml-4\">\r\n                      <span className=\"px-3 py-1 rounded-full bg-primary-500/20 text-primary-400 text-xs font-medium\">\r\n                        Active\r\n                      </span>\r\n                    </div>\r\n                  )}\r\n                </div>\r\n              </button>\r\n            );\r\n          })}\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n\r\n  // Tab 2: Column Mapping\r\n  const mappingTab = (\r\n    <div className=\"max-w-7xl mx-auto\">\r\n      <div className=\"glass-morphism p-8 rounded-xl\">\r\n        <form className=\"mapping-form\" onSubmit={handleSubmitForm}>\r\n          <header className=\"flex items-center justify-between mb-6\">\r\n            <div>\r\n              <h2 className=\"heading-2\">Column Mapping</h2>\r\n              {selectedProfile && (\r\n                <p className=\"body-text-secondary mt-1\">{selectedProfile.description ?? selectedProfile.name}</p>\r\n              )}\r\n            </div>\r\n            <div className=\"flex gap-3\">\r\n              <button type=\"button\" className=\"btn-secondary\" onClick={handleAddRow} disabled={isSaving}>\r\n                <Plus size={16} /> Add Column\r\n              </button>\r\n              <button type=\"button\" className=\"btn-ghost\" disabled>\r\n                <Upload size={16} /> Import\r\n              </button>\r\n              <button type=\"submit\" className=\"btn-primary neon-cyan\" disabled={isSaving}>\r\n                <Save size={16} />\r\n                {isSaving ? \" Saving…\" : \" Save\"}\r\n              </button>\r\n            </div>\r\n          </header>\r\n          {isLoading ? (\r\n            <p className=\"output-status\">Loading profile mappings…</p>\r\n          ) : (\r\n            <table className=\"table-standard\">\r\n              <thead>\r\n                <tr>\r\n                  <th>Source</th>\r\n                  <th>Mapped</th>\r\n                  <th>Default value</th>\r\n                  <th>Type</th>\r\n                  <th>Required</th>\r\n                  <th>Actions</th>\r\n                </tr>\r\n              </thead>\r\n              <tbody>\r\n                {mappingRows.map((row, index) => (\n                  <tr\r\n                    key={row.id}\r\n                    data-testid=\"mapping-row\"\r\n                    draggable\r\n                    onDragStart={handleRowDragStart(index)}\r\n                    onDragOver={handleRowDragOver}\r\n                    onDrop={handleRowDrop(index)}\r\n                    onDragEnd={handleRowDragEnd}\r\n                    className=\"draggable-row hover-lift transition-all duration-200\"\r\n                  >\r\n                    <td>\r\n                      <select\r\n                        className=\"form-input\"\r\n                        value={row.source}\r\n                        onChange={(event) => handleRowChange(index, \"source\", event.target.value)}\r\n                      >\r\n                        <option value=\"\">Select column…</option>\r\n                        {availableColumns.map((column) => (\r\n                          <option key={column} value={column}>\r\n                            {column}\r\n                          </option>\r\n                        ))}\r\n                      </select>\r\n                    </td>\r\n                    <td>\r\n                      <input\r\n                        type=\"text\"\r\n                        className=\"form-input\"\r\n                        value={row.mapped}\r\n                        placeholder=\"Alias or export name\"\r\n                        onChange={(event) => handleRowChange(index, \"mapped\", event.target.value)}\r\n                      />\r\n                    </td>\r\n                    <td>\r\n                      <input\r\n                        type=\"text\"\r\n                        className=\"form-input\"\r\n                        value={row.defaultValue ?? \"\"}\r\n                        placeholder=\"Optional constant\"\r\n                        onChange={(event) => handleRowChange(index, \"defaultValue\", event.target.value)}\r\n                      />\r\n                    </td>\r\n                    <td>\r\n                      <select className=\"form-input\" value={row.type} onChange={(event) => handleRowChange(index, \"type\", event.target.value)}>\r\n                        {COLUMN_TYPES.map((option) => (\r\n                          <option key={option.value} value={option.value}>\r\n                            {option.label}\r\n                          </option>\r\n                        ))}\r\n                      </select>\r\n                    </td>\r\n                    <td className=\"mapping-table__cell--checkbox text-center\">\r\n                      <input\r\n                        type=\"checkbox\"\r\n                        checked={row.required}\r\n                        onChange={(event) => handleRowChange(index, \"required\", event.target.checked)}\r\n                      />\r\n                    </td>\r\n                    <td>\r\n                      <button\r\n                        type=\"button\"\r\n                        className=\"btn-ghost text-red-500 hover:text-red-400\"\r\n                        onClick={() => handleRemoveRow(index)}\r\n                        aria-label=\"Remove row\"\r\n                      >\r\n                        <Trash2 size={14} />\r\n                      </button>\r\n                    </td>\r\n                  </tr>\r\n                ))}\r\n                {mappingRows.length === 0 ? (\r\n                  <tr>\r\n                    <td colSpan={6}>\r\n                      <p className=\"output-status\">No columns mapped yet. Add a column to get started.</p>\r\n                    </td>\r\n                  </tr>\r\n                ) : null}\r\n              </tbody>\r\n            </table>\r\n          )}\r\n          {validationIssues.length > 0 ? (\r\n            <div className=\"output-status output-status--warning mt-4 p-4 rounded-lg bg-yellow-500/10 border border-yellow-500/30\" role=\"alert\">\r\n              <p className=\"flex items-center gap-2 font-medium\">\r\n                <AlertCircle size={14} /> Resolve the following before saving:\r\n              </p>\r\n              <ul className=\"mt-2 ml-6 list-disc\">\r\n                {validationIssues.map((issue) => (\r\n                  <li key={issue}>{issue}</li>\r\n                ))}\r\n              </ul>\r\n            </div>\r\n          ) : null}\r\n          {statusMessage ? <p className=\"output-status output-status--success mt-4 p-3 rounded-lg bg-green-500/10 border border-green-500/30\">{statusMessage}</p> : null}\r\n          {errorMessage ? <p className=\"output-status output-status--error mt-4 p-3 rounded-lg bg-red-500/10 border border-red-500/30\">{errorMessage}</p> : null}\r\n        </form>\r\n      </div>\r\n    </div>\r\n  );\r\n\r\n  // Tab 3: Preview & Export\r\n  const previewTab = (\r\n    <div className=\"max-w-7xl mx-auto\">\r\n      <div className=\"glass-morphism p-8 rounded-xl\">\r\n        <header className=\"flex items-center justify-between mb-6\">\r\n          <div>\r\n            <h2 className=\"heading-2\">Output Preview</h2>\r\n            <p className=\"body-text-secondary mt-1\">{previewFileLabel}</p>\r\n          </div>\r\n          <div className=\"flex items-center gap-3\">\r\n            <label className=\"body-text-secondary text-sm\">Format:</label>\r\n            <select\r\n              className=\"form-input min-w-[180px]\"\r\n              value={format}\r\n              onChange={(event) => handleFormatChange(event.target.value)}\r\n            >\r\n              {formatOptions.map((option) => (\r\n                <option key={option.value} value={option.value}>\r\n                  {option.label}\r\n                </option>\r\n              ))}\r\n            </select>\r\n          </div>\r\n        </header>\r\n\r\n        <div className=\"rounded-lg border-2 border-dark-border overflow-hidden bg-dark-surface/50\">\r\n          {previewLoading && (\r\n            <div className=\"p-12 text-center\">\r\n              <div className=\"inline-block animate-spin rounded-full h-8 w-8 border-b-2 border-primary-400 mb-3\"></div>\r\n              <p className=\"body-text-secondary\">Loading preview…</p>\r\n            </div>\r\n          )}\r\n\r\n          {previewColumns.length === 0 && !previewLoading && (\r\n            <div className=\"p-12 text-center\">\r\n              <AlertCircle size={32} className=\"mx-auto mb-3 text-dark-text-tertiary\" />\r\n              <p className=\"body-text-secondary\">No preview data available.</p>\r\n            </div>\r\n          )}\r\n\r\n          {previewColumns.length > 0 && !previewLoading && (\r\n            <div className=\"overflow-auto max-h-[600px]\">\r\n              <table className=\"table-standard w-full\">\r\n                <thead className=\"sticky top-0 bg-dark-elevated z-10\">\r\n                  <tr>\r\n                    {previewColumns.map((column) => (\r\n                      <th key={column} className=\"px-4 py-3 text-left font-semibold border-b-2 border-primary-500/30\">\r\n                        {column}\r\n                      </th>\r\n                    ))}\r\n                  </tr>\r\n                </thead>\r\n                <tbody>\r\n                  {previewRows.map((row, index) => (\n                    <tr\r\n                      key={`preview-${index}`}\r\n                      className=\"hover:bg-dark-elevated/50 transition-colors\"\r\n                    >\r\n                      {previewColumns.map((column) => {\r\n                        const value = (row as Record<string, unknown>)[column];\r\n                        return (\r\n                          <td key={`${index}-${column}`} className=\"px-4 py-3 border-b border-dark-border\">\r\n                            {renderPreviewValue(value)}\r\n                          </td>\r\n                        );\r\n                      })}\r\n                    </tr>\r\n                  ))}\r\n                </tbody>\r\n              </table>\r\n            </div>\r\n          )}\r\n        </div>\r\n\r\n        {previewErrorMessage && (\r\n          <div className=\"mt-4 p-4 rounded-lg bg-yellow-500/10 border border-yellow-500/30 flex items-start gap-3\">\r\n            <AlertCircle size={18} className=\"text-yellow-400 flex-shrink-0 mt-0.5\" />\r\n            <p className=\"text-yellow-200 text-sm\">{previewErrorMessage}</p>\r\n          </div>\r\n        )}\r\n\r\n        <div className=\"mt-6 flex items-center justify-between\">\r\n          <div className=\"body-text-secondary text-sm\">\r\n            {previewRows.length > 0 && (\r\n              <span>Showing {previewRows.length} sample row{previewRows.length !== 1 ? 's' : ''}</span>\r\n            )}\r\n          </div>\r\n          <button\r\n            type=\"button\"\r\n            className=\"btn-primary neon-cyan flex items-center gap-2\"\r\n            disabled={previewColumns.length === 0 || previewLoading}\r\n          >\r\n            <DownloadCloud size={18} />\r\n            <span>Download Sample</span>\r\n          </button>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n\r\n  // Tab 4: Database Settings\r\n  const databaseTab = (\r\n    <div className=\"max-w-4xl mx-auto\">\r\n      <DatabaseSettings />\r\n    </div>\r\n  );\r\n\r\n  const tabs: Tab[] = [\r\n    {\r\n      id: 'profiles',\r\n      label: 'Profiles',\r\n      icon: <FolderOpen size={16} />,\r\n      content: profilesTab,\r\n    },\r\n    {\r\n      id: 'mapping',\r\n      label: 'Column Mapping',\r\n      icon: <List size={16} />,\r\n      content: mappingTab,\r\n    },\r\n    {\r\n      id: 'preview',\r\n      label: 'Preview & Export',\r\n      icon: <Eye size={16} />,\r\n      content: previewTab,\r\n    },\r\n    {\r\n      id: 'database',\r\n      label: 'Database Settings',\r\n      icon: <Database size={16} />,\r\n      content: databaseTab,\r\n    },\r\n  ];\r\n\r\n  return (\r\n    <div className=\"min-h-screen p-6 animate-fade-in\" role=\"region\" aria-label=\"Output profile setup\">\r\n      <TabContainer tabs={tabs} defaultTab=\"profiles\" />\r\n\r\n      {/* New Profile Modal */}\r\n      {showNewProfileModal && (\r\n        <div\r\n          className=\"fixed inset-0 z-50 flex items-center justify-center bg-black/70 backdrop-blur-sm\"\r\n          onClick={handleCloseNewProfileModal}\r\n        >\r\n          <div\r\n            className=\"glass-morphism p-8 rounded-xl w-full max-w-md\"\r\n            onClick={(e) => e.stopPropagation()}\r\n          >\r\n            <header className=\"flex items-center justify-between mb-6\">\r\n              <h2 className=\"heading-2\">New Profile</h2>\r\n              <button\r\n                type=\"button\"\r\n                className=\"btn-ghost p-2\"\r\n                onClick={handleCloseNewProfileModal}\r\n                disabled={creatingProfile}\r\n              >\r\n                <X size={20} />\r\n              </button>\r\n            </header>\r\n\r\n            <div className=\"space-y-4\">\r\n              <div>\r\n                <label htmlFor=\"new-profile-name\" className=\"block text-sm font-medium mb-2\">\r\n                  Profile Name <span className=\"text-red-400\">*</span>\r\n                </label>\r\n                <input\r\n                  id=\"new-profile-name\"\r\n                  type=\"text\"\r\n                  className=\"form-input w-full\"\r\n                  placeholder=\"예: Production Export\"\r\n                  value={newProfileName}\r\n                  onChange={(e) => setNewProfileName(e.target.value)}\r\n                  disabled={creatingProfile}\r\n                  autoFocus\r\n                />\r\n              </div>\r\n\r\n              <div>\r\n                <label htmlFor=\"new-profile-description\" className=\"block text-sm font-medium mb-2\">\r\n                  Description\r\n                </label>\r\n                <textarea\r\n                  id=\"new-profile-description\"\r\n                  className=\"form-input w-full resize-none\"\r\n                  rows={3}\r\n                  placeholder=\"프로파일 설명을 입력하세요 (선택사항)\"\r\n                  value={newProfileDescription}\r\n                  onChange={(e) => setNewProfileDescription(e.target.value)}\r\n                  disabled={creatingProfile}\r\n                />\r\n              </div>\r\n\r\n              <div>\r\n                <label htmlFor=\"new-profile-format\" className=\"block text-sm font-medium mb-2\">\r\n                  Default Format\r\n                </label>\r\n                <select\r\n                  id=\"new-profile-format\"\r\n                  className=\"form-input w-full\"\r\n                  value={newProfileFormat}\r\n                  onChange={(e) => setNewProfileFormat(e.target.value)}\r\n                  disabled={creatingProfile}\r\n                >\r\n                  <option value=\"CSV\">CSV</option>\r\n                  <option value=\"EXCEL\">Excel</option>\r\n                  <option value=\"JSON\">JSON</option>\r\n                  <option value=\"XML\">XML</option>\r\n                  <option value=\"TXT\">Text</option>\r\n                </select>\r\n              </div>\r\n\r\n              {createProfileError && (\r\n                <div className=\"p-3 rounded-lg bg-red-500/10 border border-red-500/30 text-red-200 text-sm\">\r\n                  {createProfileError}\r\n                </div>\r\n              )}\r\n\r\n              <div className=\"flex gap-3 justify-end pt-4\">\r\n                <button\r\n                  type=\"button\"\r\n                  className=\"btn-ghost\"\r\n                  onClick={handleCloseNewProfileModal}\r\n                  disabled={creatingProfile}\r\n                >\r\n                  Cancel\r\n                </button>\r\n                <button\r\n                  type=\"button\"\r\n                  className=\"btn-primary neon-cyan\"\r\n                  onClick={handleCreateProfile}\r\n                  disabled={creatingProfile || !newProfileName.trim()}\r\n                >\r\n                  {creatingProfile ? \"Creating…\" : \"Create Profile\"}\r\n                </button>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\syyun\\Documents\\GitHub\\Routing_ML_251014\\frontend-prediction\\src\\components\\workspaces\\DataQualityWorkspace.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'DataQualityMetrics' is defined but never used.","line":19,"column":11,"nodeType":"Identifier","messageId":"unusedVar","endLine":19,"endColumn":29},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":38,"column":28,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":38,"endColumn":31,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1034,1037],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1034,1037],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'DataQualityReport' is defined but never used.","line":41,"column":11,"nodeType":"Identifier","messageId":"unusedVar","endLine":41,"endColumn":28},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'HealthStatus' is defined but never used.","line":57,"column":11,"nodeType":"Identifier","messageId":"unusedVar","endLine":57,"endColumn":23}],"suppressedMessages":[],"errorCount":4,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * Data Quality Workspace\n *\n * Provides comprehensive data quality monitoring with:\n * - Real-time metrics dashboard\n * - Quality issue tracking\n * - Prometheus metrics export\n * - Service health monitoring\n */\n\nimport { AlertBell } from \"@components/data-quality/AlertBell\";\nimport { HealthPanel } from \"@components/data-quality/HealthPanel\";\nimport { IssuesPanel } from \"@components/data-quality/IssuesPanel\";\nimport { MetricsPanel } from \"@components/data-quality/MetricsPanel\";\nimport { PrometheusPanel } from \"@components/data-quality/PrometheusPanel\";\nimport { useState } from \"react\";\n\n// Type Definitions\ninterface DataQualityMetrics {\n  completeness: number;\n  consistency: number;\n  validity: number;\n  timestamp: string;\n  trends: {\n    completeness: number[];\n    consistency: number[];\n    validity: number[];\n  };\n}\n\ninterface DataQualityIssue {\n  id: string;\n  severity: \"critical\" | \"warning\" | \"info\";\n  type: string;\n  message: string;\n  affectedRecords: number;\n  timestamp: string;\n  details?: Record<string, any>;\n}\n\ninterface DataQualityReport {\n  issues: DataQualityIssue[];\n  summary: {\n    critical: number;\n    warning: number;\n    info: number;\n  };\n  lastCheck: string;\n}\n\ninterface ComponentHealth {\n  status: \"healthy\" | \"degraded\" | \"unhealthy\";\n  message?: string;\n  lastCheck: string;\n}\n\ninterface HealthStatus {\n  status: \"healthy\" | \"degraded\" | \"unhealthy\";\n  components: {\n    database: ComponentHealth;\n    api: ComponentHealth;\n    workers: ComponentHealth;\n  };\n  timestamp: string;\n}\n\ntype TabType = \"metrics\" | \"issues\" | \"prometheus\" | \"health\";\n\nexport default function DataQualityWorkspace() {\n  const [activeTab, setActiveTab] = useState<TabType>(\"metrics\");\n\n  return (\n    <div className=\"h-full flex flex-col bg-gray-900 text-white\">\n      {/* Header */}\n      <div className=\"flex-shrink-0 border-b border-gray-700 bg-gray-800 px-6 py-4\">\n        <div className=\"flex items-center justify-between\">\n          <div>\n            <h1 className=\"text-2xl font-bold text-white\">Data Quality Monitoring</h1>\n            <p className=\"mt-1 text-sm text-gray-400\">\n              Real-time monitoring of data quality metrics, issues, and system health\n            </p>\n          </div>\n          <AlertBell />\n        </div>\n      </div>\n\n      {/* Tab Navigation */}\n      <div className=\"flex-shrink-0 border-b border-gray-700 bg-gray-800\">\n        <nav className=\"flex space-x-1 px-6\" aria-label=\"Tabs\">\n          {[\n            { id: \"metrics\", label: \"📊 Metrics Dashboard\", description: \"Real-time quality KPIs\" },\n            { id: \"issues\", label: \"⚠️ Quality Issues\", description: \"Current data quality problems\" },\n            { id: \"prometheus\", label: \"📈 Prometheus Export\", description: \"Metrics for monitoring\" },\n            { id: \"health\", label: \"💚 System Health\", description: \"Component status\" },\n          ].map((tab) => (\n            <button\n              key={tab.id}\n              onClick={() => setActiveTab(tab.id as TabType)}\n              className={`\n                group relative min-w-0 flex-1 overflow-hidden px-4 py-3 text-center text-sm font-medium\n                transition-colors duration-150\n                ${\n                  activeTab === tab.id\n                    ? \"bg-gray-700 text-white\"\n                    : \"text-gray-400 hover:text-gray-200 hover:bg-gray-750\"\n                }\n              `}\n            >\n              <span className=\"block truncate\">{tab.label}</span>\n              <span className=\"block text-xs text-gray-500 mt-0.5\">{tab.description}</span>\n              {activeTab === tab.id && (\n                <span\n                  className=\"absolute inset-x-0 bottom-0 h-0.5 bg-blue-500\"\n                  aria-hidden=\"true\"\n                />\n              )}\n            </button>\n          ))}\n        </nav>\n      </div>\n\n      {/* Content Area */}\n      <div className=\"flex-1 overflow-auto p-6\">\n        {activeTab === \"metrics\" && (\n          <MetricsPanel autoRefreshInterval={30} />\n        )}\n\n        {activeTab === \"issues\" && (\n          <IssuesPanel />\n        )}\n\n        {activeTab === \"prometheus\" && (\n          <PrometheusPanel />\n        )}\n\n        {activeTab === \"health\" && (\n          <HealthPanel />\n        )}\n      </div>\n    </div>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\syyun\\Documents\\GitHub\\Routing_ML_251014\\frontend-prediction\\src\\components\\workspaces\\MasterDataSimpleWorkspace.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\syyun\\Documents\\GitHub\\Routing_ML_251014\\frontend-prediction\\src\\components\\workspaces\\OptionsWorkspace.tsx","messages":[{"ruleId":"simple-import-sort/imports","severity":2,"message":"Run autofix to sort these imports!","line":1,"column":1,"nodeType":null,"messageId":"sort","endLine":7,"endColumn":54,"fix":{"range":[0,509],"text":"import type { WorkflowConfigResponse } from \"@app-types/workflow\";\nimport { CardShell } from \"@components/common/CardShell\";\nimport type { WorkspaceSettingsResponse } from \"@lib/apiClient\";\nimport { fetchWorkflowConfig, fetchWorkspaceSettings, postUiAudit } from \"@lib/apiClient\";\nimport { useWorkspaceStore, type WorkspaceColumnMappingRow } from \"@store/workspaceStore\";\nimport { AlertTriangle, Check, Plus, Shield, Trash2, XCircle } from \"lucide-react\";\nimport { useEffect, useMemo, useState } from \"react\";"}},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'ErrorWithDetail' is defined but never used.","line":31,"column":11,"nodeType":"Identifier","messageId":"unusedVar","endLine":31,"endColumn":26}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":1,"fixableWarningCount":0,"source":"import type { WorkflowConfigResponse } from \"@app-types/workflow\";\nimport { CardShell } from \"@components/common/CardShell\";\nimport { fetchWorkflowConfig, fetchWorkspaceSettings, postUiAudit } from \"@lib/apiClient\";\nimport type { WorkspaceSettingsResponse } from \"@lib/apiClient\";\nimport { useWorkspaceStore, type WorkspaceColumnMappingRow } from \"@store/workspaceStore\";\nimport { AlertTriangle, Check, Plus, Shield, Trash2, XCircle } from \"lucide-react\";\nimport { useEffect, useMemo, useState } from \"react\";\n\nconst STANDARD_OPTIONS = [\n  { id: \"zscore\", label: \"Z-Score\", description: \"Standard deviation based normalization\", incompatible: [\"mad\"] },\n  { id: \"mad\", label: \"MAD\", description: \"Median Absolute Deviation\", incompatible: [\"zscore\"] },\n  { id: \"robust\", label: \"Robust Scaling\", description: \"Interquartile range\" },\n];\n\nconst SIMILARITY_OPTIONS = [\n  { id: \"cosine\", label: \"Cosine\", description: \"Vector cosine similarity\" },\n  { id: \"hnsw\", label: \"HNSW\", description: \"High dimensional nearest neighbor\" },\n  { id: \"profile\", label: \"Weighted Profile\", description: \"Feature profile matching\" },\n];\n\nconst DEFAULT_OPTIONS = {\n  standard: [\"zscore\"] as string[],\n  similarity: [\"cosine\", \"profile\"] as string[],\n  offlineDatasetPath: \"\",\n  databaseTargetTable: \"dbo.ROUTING_MASTER\",\n};\n\nconst isRecord = (value: unknown): value is Record<string, unknown> =>\n  typeof value === \"object\" && value !== null;\n\ninterface ErrorWithDetail {\n  response?: {\n    data?: {\n      detail?: string;\n    };\n  };\n}\n\nconst randomId = (): string =>\n  typeof crypto !== \"undefined\" && typeof crypto.randomUUID === \"function\"\n    ? crypto.randomUUID()\n    : `map-${Math.random().toString(36).slice(2)}`;\n\nconst makeRow = (row?: Partial<WorkspaceColumnMappingRow>): WorkspaceColumnMappingRow => ({\n  id: row?.id ?? randomId(),\n  scope: row?.scope ?? \"\",\n  source: row?.source ?? \"\",\n  target: row?.target ?? \"\",\n});\n\nconst normalizeMappingCandidate = (\n  value: unknown,\n  fallbackScope?: string,\n): WorkspaceColumnMappingRow[] => {\n  if (!value) {\n    return [];\n  }\n  const rows: WorkspaceColumnMappingRow[] = [];\n\n  const pushRow = (candidate: Partial<WorkspaceColumnMappingRow>) => {\n    const scope = `${candidate.scope ?? fallbackScope ?? \"\"}`.trim();\n    const source = `${candidate.source ?? \"\"}`.trim();\n    const target = `${candidate.target ?? \"\"}`.trim();\n    if (!scope && !source && !target) {\n      return;\n    }\n    rows.push(\n      makeRow({\n        id: candidate.id,\n        scope,\n        source,\n        target,\n      }),\n    );\n  };\n\n  if (Array.isArray(value)) {\n    value.forEach((entry, index) => {\n      if (typeof entry === \"string\") {\n        pushRow({ scope: fallbackScope ?? `Mapping ${index + 1}`, source: entry, target: entry });\n        return;\n      }\n      if (typeof entry === \"object\" && entry !== null) {\n        const scopedEntry = entry as Record<string, unknown>;\n        pushRow({\n          id: typeof scopedEntry.id === \"string\" ? scopedEntry.id : undefined,\n          scope: typeof scopedEntry.scope === \"string\" ? scopedEntry.scope : fallbackScope,\n          source: typeof scopedEntry.source === \"string\" ? scopedEntry.source : \"\",\n          target: typeof scopedEntry.target === \"string\" ? scopedEntry.target : \"\",\n        });\n      }\n    });\n    return rows;\n  }\n\n  if (typeof value === \"object\") {\n    const record = value as Record<string, unknown>;\n    Object.entries(record).forEach(([scopeKey, entry]) => {\n      if (Array.isArray(entry)) {\n        entry.forEach((inner) => {\n          if (typeof inner === \"string\") {\n            pushRow({ scope: scopeKey || fallbackScope, source: inner, target: inner });\n          } else if (typeof inner === \"object\" && inner !== null) {\n            const nested = inner as Record<string, unknown>;\n            pushRow({\n              id: typeof nested.id === \"string\" ? nested.id : undefined,\n              scope: typeof nested.scope === \"string\" ? nested.scope : scopeKey || fallbackScope,\n              source: typeof nested.source === \"string\" ? nested.source : \"\",\n              target: typeof nested.target === \"string\" ? nested.target : \"\",\n            });\n          }\n        });\n        return;\n      }\n      if (typeof entry === \"object\" && entry !== null) {\n        const nestedRecord = entry as Record<string, unknown>;\n        Object.entries(nestedRecord).forEach(([sourceKey, targetValue]) => {\n          pushRow({\n            scope: scopeKey || fallbackScope,\n            source: sourceKey,\n            target: typeof targetValue === \"string\" ? targetValue : `${targetValue ?? \"\"}`,\n          });\n        });\n        return;\n      }\n      if (typeof entry === \"string\") {\n        pushRow({ scope: scopeKey || fallbackScope, source: entry, target: entry });\n      }\n    });\n    return rows;\n  }\n\n  return rows;\n};\n\nconst dedupeMappings = (rows: WorkspaceColumnMappingRow[]): WorkspaceColumnMappingRow[] => {\n  const map = new Map<string, WorkspaceColumnMappingRow>();\n  rows.forEach((row) => {\n    const key = `${row.scope.toLowerCase()}::${row.source.toLowerCase()}`;\n    if (!map.has(key)) {\n      map.set(key, row);\n    }\n  });\n  return Array.from(map.values());\n};\n\ntype ColumnMappingRow = WorkspaceColumnMappingRow;\n\nconst extractWorkflowMappings = (workflow: WorkflowConfigResponse | null | undefined): WorkspaceColumnMappingRow[] => {\n  if (!workflow) {\n    return [];\n  }\n\n  const candidates: ColumnMappingRow[] = [];\n  const asAny = workflow as unknown as Record<string, unknown>;\n  const collect = (value: unknown, scope?: string) => {\n    candidates.push(...normalizeMappingCandidate(value, scope));\n  };\n\n  collect(asAny[\"column_mappings\"]);\n  collect(asAny[\"column_mapping\"]);\n\n  if (workflow.graph?.nodes) {\n    workflow.graph.nodes.forEach((node) => {\n      if (node.settings && typeof node.settings === \"object\") {\n        const settings = node.settings as Record<string, unknown>;\n        if (\"column_mappings\" in settings) {\n          collect(settings[\"column_mappings\"], node.label || node.id);\n        }\n        if (\"column_mapping\" in settings) {\n          collect(settings[\"column_mapping\"], node.label || node.id);\n        }\n      }\n    });\n  }\n\n  const dataSourceUnknown = workflow.data_source as unknown;\n  if (isRecord(dataSourceUnknown)) {\n    collect(dataSourceUnknown[\"column_mappings\"], \"Data Source\");\n    collect(dataSourceUnknown[\"column_mapping\"], \"Data Source\");\n  }\n\n  const sqlUnknown = workflow.sql as unknown;\n  if (isRecord(sqlUnknown)) {\n    collect(sqlUnknown[\"column_mappings\"], \"Output\");\n    collect(sqlUnknown[\"column_mapping\"], \"Output\");\n  }\n\n  return dedupeMappings(candidates);\n};\n\nexport function OptionsWorkspace() {\n  const workspaceOptions = useWorkspaceStore((state) => state.workspaceOptions);\n  const setWorkspaceOptionsLoading = useWorkspaceStore((state) => state.setWorkspaceOptionsLoading);\n  const setWorkspaceOptionsSnapshot = useWorkspaceStore((state) => state.setWorkspaceOptionsSnapshot);\n  const updateWorkspaceOptions = useWorkspaceStore((state) => state.updateWorkspaceOptions);\n  const updateWorkspaceColumnMappings = useWorkspaceStore((state) => state.updateWorkspaceColumnMappings);\n  const saveWorkspaceOptions = useWorkspaceStore((state) => state.saveWorkspaceOptions);\n  const setErpInterfaceEnabled = useWorkspaceStore((state) => state.setErpInterfaceEnabled);\n\n  const standardOptions = workspaceOptions.data.standard;\n  const similarityOptions = workspaceOptions.data.similarity;\n  const offlineDatasetPath = workspaceOptions.data.offlineDatasetPath;\n  const databaseTargetTable = workspaceOptions.data.databaseTargetTable;\n  const erpInterface = workspaceOptions.data.erpInterface;\n  const columnMappings = workspaceOptions.data.columnMappings;\n  const [statusMessage, setStatusMessage] = useState<string>(\"\");\n  const [columnMappingSource, setColumnMappingSource] = useState<string>(\"\");\n\n  useEffect(() => {\n    let cancelled = false;\n    async function loadSettings() {\n      try {\n        setWorkspaceOptionsLoading(true);\n        const data: WorkspaceSettingsResponse = await fetchWorkspaceSettings();\n        if (cancelled) return;\n        const options = data.options ?? {};\n        const standard = Array.isArray(options.standard) ? (options.standard as string[]) : DEFAULT_OPTIONS.standard;\n        const similarity = Array.isArray(options.similarity) ? (options.similarity as string[]) : DEFAULT_OPTIONS.similarity;\n        const datasetPath = typeof options.offline_dataset_path === \"string\"\n          ? options.offline_dataset_path\n          : (typeof data.data_source?.offline_dataset_path === \"string\"\n              ? data.data_source.offline_dataset_path\n              : DEFAULT_OPTIONS.offlineDatasetPath);\n        const targetTable = typeof options.database_target_table === \"string\"\n          ? options.database_target_table\n          : (typeof data.export?.database_target_table === \"string\"\n              ? data.export.database_target_table\n              : DEFAULT_OPTIONS.databaseTargetTable);\n        const erpEnabled = Boolean((options.erp_interface as boolean | undefined) ?? (data.export?.erp_interface_enabled as boolean | undefined));\n\n        let mappingRows = dedupeMappings(normalizeMappingCandidate((options.column_mappings as unknown) ?? null));\n        let mappingSource = \"workspace\";\n        if (mappingRows.length === 0) {\n          try {\n            const workflow = await fetchWorkflowConfig();\n            if (cancelled) return;\n            const extracted = extractWorkflowMappings(workflow);\n            if (extracted.length > 0) {\n              mappingRows = extracted;\n              mappingSource = \"workflow\";\n            }\n          } catch {\n            // Ignore workflow fetch errors. A fallback row will be used below.\n          }\n        }\n        if (mappingRows.length === 0) {\n          mappingRows = [makeRow({ scope: \"Routing Generation\" })];\n          mappingSource = \"fallback\";\n        }\n        setWorkspaceOptionsSnapshot(\n          {\n            standard,\n            similarity,\n            offlineDatasetPath: datasetPath,\n            databaseTargetTable: targetTable,\n            erpInterface: erpEnabled,\n            columnMappings: mappingRows,\n          },\n          { dirty: false, lastSyncedAt: data.updated_at },\n        );\n        setColumnMappingSource(mappingSource);\n      } catch {\n        if (!cancelled) {\n          setStatusMessage(\"Failed to load saved options. Using defaults.\");\n          setWorkspaceOptionsSnapshot(\n            {\n              standard: DEFAULT_OPTIONS.standard,\n              similarity: DEFAULT_OPTIONS.similarity,\n              offlineDatasetPath: DEFAULT_OPTIONS.offlineDatasetPath,\n              databaseTargetTable: DEFAULT_OPTIONS.databaseTargetTable,\n              erpInterface: false,\n              columnMappings: [makeRow({ scope: \"Routing Generation\" })],\n            },\n            { dirty: false },\n          );\n        }\n      } finally {\n        if (!cancelled) {\n          setWorkspaceOptionsLoading(false);\n        }\n      }\n    }\n    void loadSettings();\n    return () => {\n      cancelled = true;\n    };\n  }, [setWorkspaceOptionsLoading, setWorkspaceOptionsSnapshot]);\n\n  const standardConflicts = useMemo(() => {\n    const warnings: string[] = [];\n    STANDARD_OPTIONS.forEach((option) => {\n      if (standardOptions.includes(option.id)) {\n        option.incompatible?.forEach((other) => {\n          if (standardOptions.includes(other)) {\n            const otherLabel = STANDARD_OPTIONS.find((candidate) => candidate.id === other)?.label ?? other;\n            warnings.push(`${option.label} + ${otherLabel}`);\n          }\n        });\n      }\n    });\n    return warnings;\n  }, [standardOptions]);\n\n  const mappingDiagnostics = useMemo(() => {\n    const rowErrors = new Map<string, string>();\n    const conflictSummary: string[] = [];\n    const seenSourceTarget = new Map<string, { id: string; target: string }>();\n    const seenTarget = new Map<string, string>();\n\n    columnMappings.forEach((row) => {\n      const scope = row.scope.trim();\n      const source = row.source.trim();\n      const target = row.target.trim();\n      if (!scope || !source || !target) {\n        rowErrors.set(row.id, \"Complete all fields\");\n        return;\n      }\n      const key = `${scope.toLowerCase()}::${source.toLowerCase()}`;\n      const existing = seenSourceTarget.get(key);\n      if (existing && existing.target !== target) {\n        rowErrors.set(row.id, `Conflicts with ${existing.target}`);\n        rowErrors.set(existing.id, `Conflicts with ${target}`);\n        conflictSummary.push(`${scope}: ${source} → ${target}`);\n        return;\n      }\n      seenSourceTarget.set(key, { id: row.id, target });\n      const targetKey = `${scope.toLowerCase()}::${target.toLowerCase()}`;\n      const existingTarget = seenTarget.get(targetKey);\n      if (existingTarget && existingTarget !== source) {\n        rowErrors.set(row.id, `Target reused by ${existingTarget}`);\n        conflictSummary.push(`${scope}: ${source} ↔ ${target}`);\n      } else {\n        seenTarget.set(targetKey, source);\n      }\n    });\n\n    return {\n      rowErrors,\n      conflictSummary: Array.from(new Set(conflictSummary)),\n    };\n  }, [columnMappings]);\n\n  const toggleStandard = (id: string) => {\n    updateWorkspaceOptions((prev) => ({\n      ...prev,\n      standard: prev.standard.includes(id) ? prev.standard.filter((item) => item !== id) : [...prev.standard, id],\n    }));\n  };\n\n  const toggleSimilarity = (id: string) => {\n    updateWorkspaceOptions((prev) => ({\n      ...prev,\n      similarity: prev.similarity.includes(id)\n        ? prev.similarity.filter((item) => item !== id)\n        : [...prev.similarity, id],\n    }));\n  };\n\n  const handleToggleErp = (next: boolean) => {\n    setErpInterfaceEnabled(next);\n    postUiAudit({\n      action: \"ui.options.erp_toggle\",\n      username: \"codex\",\n      payload: { enabled: next },\n    }).catch(() => undefined);\n  };\n\n  const handleAddMappingRow = () => {\n    updateWorkspaceColumnMappings((prev) => [...prev, makeRow({ scope: prev[prev.length - 1]?.scope ?? \"\" })]);\n    setColumnMappingSource(\"workspace\");\n  };\n\n  const handleUpdateMappingRow = (id: string, patch: Partial<Omit<WorkspaceColumnMappingRow, \"id\">>) => {\n    let changed = false;\n    const nextRows = columnMappings.map((row) => {\n      if (row.id !== id) {\n        return row;\n      }\n      const nextRow = { ...row, ...patch };\n      if (nextRow.scope !== row.scope || nextRow.source !== row.source || nextRow.target !== row.target) {\n        changed = true;\n      }\n      return nextRow;\n    });\n    if (changed) {\n      updateWorkspaceColumnMappings(() => nextRows);\n      setColumnMappingSource(\"workspace\");\n    }\n  };\n\n  const handleRemoveMappingRow = (id: string) => {\n    if (columnMappings.length <= 1) {\n      return;\n    }\n    const next = columnMappings.filter((row) => row.id !== id);\n    if (next.length !== columnMappings.length) {\n      updateWorkspaceColumnMappings(() => (next.length > 0 ? next : [makeRow()]));\n      setColumnMappingSource(\"workspace\");\n    }\n  };\n\n  const handleSave = async () => {\n    if (mappingDiagnostics.rowErrors.size > 0) {\n      const issues = Array.from(new Set(mappingDiagnostics.rowErrors.values()));\n      setStatusMessage(`Resolve column mapping issues: ${issues.join(\", \")}`);\n      await postUiAudit({\n        action: \"ui.options.column_mapping.conflict\",\n        username: \"codex\",\n        payload: {\n          issues: Array.from(mappingDiagnostics.rowErrors.entries()).map(([id, message]) => ({ id, message })),\n        },\n      }).catch(() => undefined);\n      return;\n    }\n    try {\n      setStatusMessage(\"\");\n      const previousSource = columnMappingSource;\n      const normalizedRows = columnMappings.map((row) =>\n        makeRow({\n          id: row.id,\n          scope: row.scope.trim(),\n          source: row.source.trim(),\n          target: row.target.trim(),\n        }),\n      );\n      const payloadMappings = normalizedRows\n        .map((row) => ({\n          scope: row.scope,\n          source: row.source,\n          target: row.target,\n        }))\n        .filter((row) => row.scope || row.source || row.target);\n      const mappingScopes = Array.from(new Set(payloadMappings.map((row) => row.scope).filter(Boolean)));\n      await saveWorkspaceOptions({ version: Date.now(), columnMappings: normalizedRows });\n      setColumnMappingSource(\"workspace\");\n      await postUiAudit({\n        action: \"ui.options.save\",\n        username: \"codex\",\n        payload: {\n          status: \"success\",\n          standard: standardOptions,\n          similarity: similarityOptions,\n          offline_dataset_path: offlineDatasetPath,\n          database_target_table: databaseTargetTable || null,\n          erp_interface: erpInterface,\n          column_mapping_count: payloadMappings.length,\n          column_mapping_scopes: mappingScopes,\n          column_mapping_source_before: previousSource,\n        },\n      }).catch(() => undefined);\n      setStatusMessage(\n        payloadMappings.length > 0\n          ? `Options saved successfully. ${payloadMappings.length} column mappings stored.`\n          : \"Options saved successfully.\",\n      );\n    } catch (error: unknown) {\n      setStatusMessage(\"Failed to save options.\");\n      const detail = error instanceof Error ? error.message : undefined;\n      await postUiAudit({\n        action: \"ui.options.save.error\",\n        username: \"codex\",\n        payload: {\n          status: \"error\",\n          message: detail,\n          offline_dataset_path: offlineDatasetPath,\n          database_target_table: databaseTargetTable || null,\n          mapping_rows: columnMappings.length,\n        },\n      }).catch(() => undefined);\n    }\n  };\n\n  const loading = workspaceOptions.loading;\n  const saving = workspaceOptions.saving;\n  const dirty = workspaceOptions.dirty;\n\n  const standardValid = standardOptions.length > 0;\n  const similarityValid = similarityOptions.length > 0;\n  const mappingHasErrors = mappingDiagnostics.rowErrors.size > 0;\n\n  return (\n    <div className=\"options-workspace\" role=\"region\" aria-label=\"System Options\">\n      <CardShell as=\"section\" innerClassName=\"options-card\" tone=\"soft\">\n        <header className=\"panel-header\">\n          <div>\n            <h2 className=\"panel-title\">Standard Deviation Options</h2>\n            <p className=\"panel-subtitle\">Normalization strategies applied before similarity calculation.</p>\n          </div>\n        </header>\n        <div className=\"option-grid\">\n          {STANDARD_OPTIONS.map((option) => (\n            <label key={option.id} className={`option-tile${standardOptions.includes(option.id) ? \" is-active\" : \"\"}`}>\n              <input type=\"checkbox\" checked={standardOptions.includes(option.id)} onChange={() => toggleStandard(option.id)} />\n              <span className=\"option-tile__label\">{option.label}</span>\n              <span className=\"option-tile__desc\">{option.description}</span>\n            </label>\n          ))}\n        </div>\n        <div\n          className={`option-hint${standardValid && standardConflicts.length === 0 ? \" is-success\" : standardValid ? \"\" : \" is-warning\"}`}\n          role=\"status\"\n          aria-live=\"polite\"\n        >\n          {standardValid ? (\n            standardConflicts.length > 0 ? (\n              <span>\n                <AlertTriangle size={14} /> Avoid conflicting combination: {standardConflicts.join(\", \")}\n              </span>\n            ) : (\n              <span>\n                <Check size={14} /> {standardOptions.length} normalization option{standardOptions.length > 1 ? \"s\" : \"\"} selected.\n              </span>\n            )\n          ) : (\n            <span>\n              <AlertTriangle size={14} /> Select at least one normalization option.\n            </span>\n          )}\n        </div>\n        {standardConflicts.length > 0 ? (\n          <div className=\"option-conflict\">\n            <AlertTriangle size={16} /> Conflicting combination: {standardConflicts.join(\", \")}\n          </div>\n        ) : null}\n      </CardShell>\n\n      <CardShell as=\"section\" innerClassName=\"options-card\" tone=\"soft\">\n        <header className=\"panel-header\">\n          <div>\n            <h2 className=\"panel-title\">Similarity Search</h2>\n            <p className=\"panel-subtitle\">Algorithms used for Drag-Drop recommendations.</p>\n          </div>\n        </header>\n        <div className=\"option-grid\">\n          {SIMILARITY_OPTIONS.map((option) => (\n            <label key={option.id} className={`option-tile${similarityOptions.includes(option.id) ? \" is-active\" : \"\"}`}>\n              <input type=\"checkbox\" checked={similarityOptions.includes(option.id)} onChange={() => toggleSimilarity(option.id)} />\n              <span className=\"option-tile__label\">{option.label}</span>\n              <span className=\"option-tile__desc\">{option.description}</span>\n            </label>\n          ))}\n        </div>\n        <div className={`option-hint${similarityValid ? \" is-success\" : \" is-warning\"}`} role=\"status\" aria-live=\"polite\">\n          {similarityValid ? (\n            <span>\n              <Check size={14} /> {similarityOptions.length} similarity algorithm{similarityOptions.length > 1 ? \"s\" : \"\"} enabled.\n            </span>\n          ) : (\n            <span>\n              <AlertTriangle size={14} /> Choose at least one similarity algorithm.\n            </span>\n          )}\n        </div>\n      </CardShell>\n\n      <CardShell as=\"section\" innerClassName=\"options-card\" tone=\"soft\">\n        <header className=\"panel-header\">\n          <div>\n            <h2 className=\"panel-title\">Column Mapping</h2>\n            <p className=\"panel-subtitle\">Relationships between training, generation, and output fields.</p>\n            {columnMappingSource === \"workflow\" ? <span className=\"panel-subtitle\">Loaded from workflow configuration.</span> : null}\n          </div>\n          <button type=\"button\" className=\"btn-secondary\" onClick={handleAddMappingRow}>\n            <Plus size={16} /> Add mapping\n          </button>\n        </header>\n        <table className=\"mapping-table\">\n          <thead>\n            <tr>\n              <th>Scope</th>\n              <th>Source</th>\n              <th>Target</th>\n              <th>Status</th>\n              <th aria-label=\"Actions\" />\n            </tr>\n          </thead>\n          <tbody>\n            {columnMappings.map((row) => {\n              const error = mappingDiagnostics.rowErrors.get(row.id);\n              return (\n                <tr key={row.id}>\n                  <td>\n                    <input\n                      type=\"text\"\n                      value={row.scope}\n                      onChange={(event) => handleUpdateMappingRow(row.id, { scope: event.target.value })}\n                      placeholder=\"Routing Generation\"\n                    />\n                  </td>\n                  <td>\n                    <input\n                      type=\"text\"\n                      value={row.source}\n                      onChange={(event) => handleUpdateMappingRow(row.id, { source: event.target.value })}\n                      placeholder=\"ITEM_CD\"\n                    />\n                  </td>\n                  <td>\n                    <input\n                      type=\"text\"\n                      value={row.target}\n                      onChange={(event) => handleUpdateMappingRow(row.id, { target: event.target.value })}\n                      placeholder=\"items.item_code\"\n                    />\n                  </td>\n                  <td>\n                    {error ? (\n                      <span className=\"option-conflict\">\n                        <AlertTriangle size={14} /> {error}\n                      </span>\n                    ) : (\n                      <span className=\"text-accent\">\n                        <Check size={14} className=\"text-accent\" /> linked\n                      </span>\n                    )}\n                  </td>\n                  <td>\n                    <button\n                      type=\"button\"\n                      className=\"btn-secondary\"\n                      onClick={() => handleRemoveMappingRow(row.id)}\n                      aria-label=\"Remove mapping\"\n                      disabled={columnMappings.length <= 1}\n                      style={{ padding: \"0.25rem 0.6rem\" }}\n                    >\n                      <Trash2 size={14} />\n                    </button>\n                  </td>\n                </tr>\n              );\n            })}\n          </tbody>\n        </table>\n        <div className={`option-hint${mappingHasErrors ? \" is-warning\" : \" is-success\"}`} role=\"status\" aria-live=\"polite\">\n          {mappingHasErrors ? (\n            <span>\n              <AlertTriangle size={14} /> Complete all column mapping fields before saving.\n            </span>\n          ) : (\n            <span>\n              <Check size={14} /> {columnMappings.length} mapping row{columnMappings.length === 1 ? \"\" : \"s\"} configured.\n            </span>\n          )}\n        </div>\n        {mappingDiagnostics.conflictSummary.length > 0 ? (\n          <div className=\"option-conflict\">\n            <AlertTriangle size={16} /> Resolve mapping conflicts: {mappingDiagnostics.conflictSummary.join(\", \")}\n          </div>\n        ) : null}\n      </CardShell>\n\n      <CardShell as=\"section\" innerClassName=\"options-card\" tone=\"soft\">\n        <header className=\"panel-header\">\n          <div>\n            <h2 className=\"panel-title\">데이터베이스 & ERP 설정</h2>\n            <p className=\"panel-subtitle\">오프라인 데이터셋 경로와 내보내기 대상 테이블을 관리합니다.</p>\n          </div>\n        </header>\n        <div className=\"option-grid\">\n          <div className=\"options-security\">\n            <article>\n              <Shield size={32} />\n              <h3>ERP interface</h3>\n              <p>INTERFACE 버튼 활성화 여부와 회귀 검증 로깅을 제어합니다.</p>\n            </article>\n            <article>\n              <XCircle size={32} />\n              <h3>Export guard</h3>\n              <p>내보내기 테이블과 컬럼 매핑을 저장하기 전에 항상 검증합니다.</p>\n            </article>\n          </div>\n          <div className=\"options-access\">\n            <label>\n              <span>Offline dataset path (선택)</span>\n              <input\n                type=\"text\"\n                value={offlineDatasetPath}\n                onChange={(event) => {\n                  const value = event.target.value;\n                  updateWorkspaceOptions((prev) => ({ ...prev, offlineDatasetPath: value }));\n                }}\n                placeholder=\"Optional CSV 또는 Parquet 파일 경로\"\n              />\n            </label>\n            <p className=\"option-hint\" role=\"status\">\n              <AlertTriangle size={14} /> 지정된 파일이 있을 경우 학습 전처리에 사용되며, 없으면 MSSQL 품목 뷰를 참조합니다.\n            </p>\n\n            <label>\n              <span>Export target table</span>\n              <input\n                type=\"text\"\n                value={databaseTargetTable}\n                onChange={(event) => {\n                  const value = event.target.value;\n                  updateWorkspaceOptions((prev) => ({ ...prev, databaseTargetTable: value }));\n                }}\n                placeholder=\"dbo.ROUTING_MASTER\"\n              />\n            </label>\n            <p className=\"option-hint\" role=\"status\">\n              <Check size={14} /> 예측 결과를 저장할 MSSQL 테이블을 지정하세요. 스키마는 워크플로우에서 구성된 매핑을 따릅니다.\n            </p>\n\n            <div className=\"options-access__toggle\">\n              <label>\n                <input type=\"checkbox\" checked={erpInterface} onChange={(event) => handleToggleErp(event.target.checked)} />\n                <span>Enable ERP interface</span>\n              </label>\n              <p className=\"options-access__status\">\n                {erpInterface\n                  ? \"INTERFACE 버튼이 라우팅 저장 패널에서 활성화됩니다.\"\n                  : \"옵션을 켜기 전까지는 INTERFACE 버튼이 비활성 상태로 유지됩니다.\"}\n              </p>\n            </div>\n          </div>\n        </div>\n      </CardShell>\n\n      <footer className=\"options-footer\">\n        <button\n          type=\"button\"\n          className=\"primary-button\"\n          onClick={handleSave}\n          disabled={saving || loading || !dirty || mappingHasErrors}\n        >\n          {saving ? \"Saving...\" : dirty ? \"Save changes\" : \"Saved\"}\n        </button>\n        {statusMessage ? <p className=\"options-footer__status\">{statusMessage}</p> : null}\n      </footer>\n    </div>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\syyun\\Documents\\GitHub\\Routing_ML_251014\\frontend-prediction\\src\\components\\workspaces\\ProcessGroupsWorkspace.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\syyun\\Documents\\GitHub\\Routing_ML_251014\\frontend-prediction\\src\\components\\workspaces\\ProfileManagementWorkspace.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\syyun\\Documents\\GitHub\\Routing_ML_251014\\frontend-prediction\\src\\components\\workspaces\\RoutingConfigWorkspace.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\syyun\\Documents\\GitHub\\Routing_ML_251014\\frontend-prediction\\src\\components\\workspaces\\RoutingMatrixWorkspace.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\syyun\\Documents\\GitHub\\Routing_ML_251014\\frontend-prediction\\src\\components\\workspaces\\RoutingTabbedWorkspace.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":30,"column":10,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":30,"endColumn":13,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1150,1153],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1150,1153],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":31,"column":23,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":31,"endColumn":26,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1177,1180],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1177,1180],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { BarChart3 } from \"lucide-react\";\nimport React, { useEffect,useState } from \"react\";\n\nimport { CandidatePanel } from \"../CandidatePanel\";\nimport { FeatureWeightPanel } from \"../FeatureWeightPanel\";\nimport { MetricsPanel } from \"../MetricsPanel\";\nimport { PredictionControls } from \"../PredictionControls\";\nimport { CandidateNodeTabs } from \"../routing/CandidateNodeTabs\";\nimport { ErpItemExplorer } from \"../routing/ErpItemExplorer\";\nimport { ItemListPanel } from \"../routing/ItemListPanel\";\nimport { RoutingCombinationSelector } from \"../routing/RoutingCombinationSelector\";\nimport { RoutingExplanationPanel } from \"../routing/RoutingExplanationPanel\";\nimport { TimelinePanel } from \"../TimelinePanel\";\nimport { Tabs } from \"../ui/Tabs\";\nimport { VisualizationSummary } from \"../VisualizationSummary\";\n\ninterface RoutingTabbedWorkspaceProps {\n  // Controls\n  itemCodes: string[];\n  onChangeItemCodes: (codes: string[]) => void;\n  topK: number;\n  onChangeTopK: (value: number) => void;\n  threshold: number;\n  onChangeThreshold: (value: number) => void;\n  loading: boolean;\n  onSubmit: () => void;\n  errorMessage?: string;\n\n  // Data\n  data?: any;\n  selectedCandidate?: any;\n\n  // Feature weights\n  featureWeights: {\n    availableProfiles: { name: string; description?: string | null; weights?: Record<string, number> }[];\n    profile: string | null;\n    manualWeights: Record<string, number>;\n  };\n  setFeatureWeightProfile: (profile: string | null) => void;\n  setManualWeight: (feature: string, weight: number) => void;\n  resetManualWeights: () => void;\n\n  // Other\n  renderPredictionBanner?: () => React.ReactNode;\n  tabKey?: string;\n}\n\nexport function RoutingTabbedWorkspace({\n  itemCodes,\n  onChangeItemCodes,\n  topK,\n  onChangeTopK,\n  threshold,\n  onChangeThreshold,\n  loading,\n  onSubmit,\n  errorMessage,\n  data,\n  selectedCandidate,\n  featureWeights,\n  setFeatureWeightProfile,\n  setManualWeight,\n  resetManualWeights,\n  renderPredictionBanner,\n  tabKey = \"default\",\n}: RoutingTabbedWorkspaceProps) {\n  const [activeTab, setActiveTab] = useState(\"control\");\n\n  // 예측 성공 시 시각화 탭으로 자동 전환\n  useEffect(() => {\n    if (!loading && data?.candidates && data.candidates.length > 0) {\n      setActiveTab(\"visualization\");\n    }\n  }, [loading, data?.candidates]);\n  const tabs = [\n    {\n      id: \"control\",\n      label: \"예측 대상 품목\",\n      icon: null,\n      content: (\n        <div className=\"routing-control-tab\" data-layout=\"erp-enhanced\">\n          <div className=\"routing-control-layout\">\n            <section className=\"routing-control-left\">\n              <ErpItemExplorer onAddItems={onChangeItemCodes} />\n            </section>\n\n            <section className=\"routing-control-right\">\n              {renderPredictionBanner?.()}\n\n              <div className=\"routing-control-panel\">\n                <h3 className=\"routing-control-panel__title\">⚙️ 라우팅 생성</h3>\n                <PredictionControls\n                  itemCodes={itemCodes}\n                  onChangeItemCodes={onChangeItemCodes}\n                  topK={topK}\n                  onChangeTopK={onChangeTopK}\n                  threshold={threshold}\n                  onChangeThreshold={onChangeThreshold}\n                  loading={loading}\n                  onSubmit={onSubmit}\n                  errorMessage={errorMessage}\n                />\n              </div>\n            </section>\n          </div>\n        </div>\n      ),\n    },\n    {\n      id: \"visualization\",\n      label: \"시각화\",\n      icon: <BarChart3 size={18} />,\n      content: (\n        <div className=\"routing-visualization-tab\" style={{ display: 'flex', width: '100%', minHeight: '800px', gap: '1rem', padding: '1rem' }}>\n          {/* 좌측: 품목 리스트 + 라우팅 조합 (15%) */}\n          <div className=\"item-list-section\" style={{ flex: '0 0 15%', minWidth: '180px', display: 'flex', flexDirection: 'column', gap: '1rem' }}>\n            <div className=\"bg-slate-900/50 rounded-xl p-4 border border-slate-700/50 overflow-y-auto\">\n              <ItemListPanel />\n            </div>\n            <div className=\"bg-slate-900/50 rounded-xl p-4 border border-slate-700/50 overflow-y-auto\">\n              <RoutingCombinationSelector />\n            </div>\n          </div>\n\n          {/* 중앙: 시각화 (55%) */}\n          <div className=\"visualization-section\" style={{ flex: '0 0 55%', display: 'flex', flexDirection: 'column', gap: '1rem' }}>\n            <div className=\"bg-slate-900/50 rounded-xl p-6 border border-slate-700/50 flex-1\">\n              <h3 className=\"text-xl font-semibold mb-4 text-slate-200\">📊 시각화</h3>\n              <CandidateNodeTabs className=\"mb-4\" />\n              <TimelinePanel key={`timeline-${tabKey}`} />\n              <div className=\"mt-4\">\n                <VisualizationSummary metrics={data?.metrics} />\n              </div>\n            </div>\n          </div>\n\n          {/* 우측: 후보목록 (30%) */}\n          <div className=\"candidates-section\" style={{ flex: '0 0 30%', minWidth: '320px', display: 'flex', flexDirection: 'column', gap: '1rem' }}>\n            <div className=\"bg-slate-900/50 rounded-xl p-6 border border-slate-700/50 flex-1 overflow-y-auto\">\n              <div className=\"flex items-center justify-between mb-4\">\n                <h3 className=\"text-xl font-semibold text-slate-200\">📋 후보목록</h3>\n                <span className=\"text-xs text-slate-400\">\n                  {data?.candidates?.length || 0}개 후보\n                </span>\n              </div>\n              <CandidatePanel key={`candidates-${tabKey}`} />\n            </div>\n          </div>\n        </div>\n      ),\n    },\n    {\n      id: \"analysis\",\n      label: \"분석결과\",\n      icon: <BarChart3 size={18} />,\n      content: (\n        <div className=\"routing-tab-content\">\n          <FeatureWeightPanel\n            profiles={featureWeights.availableProfiles}\n            selectedProfile={featureWeights.profile}\n            onSelectProfile={setFeatureWeightProfile}\n            manualWeights={featureWeights.manualWeights}\n            onChangeManualWeight={setManualWeight}\n            onReset={resetManualWeights}\n          />\n          <MetricsPanel metrics={data?.metrics} loading={loading} />\n          <RoutingExplanationPanel candidate={selectedCandidate} />\n        </div>\n      ),\n    },\n  ];\n\n  return (\n    <div className=\"routing-tabbed-workspace\" data-layout-fix=\"v3-tabs\">\n      <Tabs tabs={tabs} activeTab={activeTab} onTabChange={setActiveTab} />\n    </div>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\syyun\\Documents\\GitHub\\Routing_ML_251014\\frontend-prediction\\src\\components\\workspaces\\TrainingStatusWorkspace.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\syyun\\Documents\\GitHub\\Routing_ML_251014\\frontend-prediction\\src\\components\\workspaces\\__tests__\\DataOutputWorkspace.test.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\syyun\\Documents\\GitHub\\Routing_ML_251014\\frontend-prediction\\src\\components\\workspaces\\__tests__\\OptionsWorkspace.test.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\syyun\\Documents\\GitHub\\Routing_ML_251014\\frontend-prediction\\src\\devpages\\RuleBadgeDemo.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\syyun\\Documents\\GitHub\\Routing_ML_251014\\frontend-prediction\\src\\hooks\\useDrawingViewerSettings.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\syyun\\Documents\\GitHub\\Routing_ML_251014\\frontend-prediction\\src\\hooks\\useErpViewExplorer.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\syyun\\Documents\\GitHub\\Routing_ML_251014\\frontend-prediction\\src\\hooks\\useGSAPAnimation.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\syyun\\Documents\\GitHub\\Routing_ML_251014\\frontend-prediction\\src\\hooks\\useMasterData.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\syyun\\Documents\\GitHub\\Routing_ML_251014\\frontend-prediction\\src\\hooks\\useOutputProfiles.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":8,"column":28,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":8,"endColumn":31,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[176,179],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[176,179],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":9,"column":29,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":9,"endColumn":32,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[209,212],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[209,212],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import {\n  fetchOutputProfileDetail,\n  fetchOutputProfiles,\n  // type OutputProfileDetail,\n  // type OutputProfileSummary,\n} from \"@lib/apiClient\";\n\ntype OutputProfileDetail = any;\ntype OutputProfileSummary = any;\nimport { useQuery, useQueryClient } from \"@tanstack/react-query\";\n\nconst LIST_QUERY_KEY = [\"output-profiles\"] as const;\n\nconst detailQueryKey = (profileId: string | null) =>\n  [...LIST_QUERY_KEY, profileId] as const;\n\nexport function useOutputProfiles() {\n  const query = useQuery<OutputProfileSummary[]>({\n    queryKey: LIST_QUERY_KEY,\n    queryFn: fetchOutputProfiles,\n    staleTime: 60_000,\n  });\n\n  return {\n    data: query.data,\n    isLoading: query.isLoading,\n    isFetching: query.isFetching,\n    isError: query.isError,\n    error: query.error,\n    refresh: query.refetch,\n  };\n}\n\nexport function useOutputProfile(profileId: string | null) {\n  const queryClient = useQueryClient();\n\n  const query = useQuery<OutputProfileDetail>({\n    queryKey: detailQueryKey(profileId),\n    queryFn: () => fetchOutputProfileDetail(profileId ?? \"\"),\n    enabled: Boolean(profileId),\n    staleTime: 30_000,\n  });\n\n  const prefetch = (id: string) =>\n    queryClient.prefetchQuery({\n      queryKey: detailQueryKey(id),\n      queryFn: () => fetchOutputProfileDetail(id),\n      staleTime: 30_000,\n    });\n\n  return {\n    data: query.data,\n    isLoading: query.isLoading,\n    isFetching: query.isFetching,\n    isRefetching: query.isRefetching,\n    isError: query.isError,\n    error: query.error,\n    refresh: query.refetch,\n    prefetch,\n  };\n}\n","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\syyun\\Documents\\GitHub\\Routing_ML_251014\\frontend-prediction\\src\\hooks\\usePredictRoutings.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\syyun\\Documents\\GitHub\\Routing_ML_251014\\frontend-prediction\\src\\hooks\\usePurchaseOrderItems.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\syyun\\Documents\\GitHub\\Routing_ML_251014\\frontend-prediction\\src\\hooks\\useQuality.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\syyun\\Documents\\GitHub\\Routing_ML_251014\\frontend-prediction\\src\\hooks\\useResponsiveNav.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\syyun\\Documents\\GitHub\\Routing_ML_251014\\frontend-prediction\\src\\hooks\\useRoutingGroups.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'steps' is assigned a value but never used.","line":136,"column":13,"nodeType":"Identifier","messageId":"unusedVar","endLine":136,"endColumn":18},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'itemCodes' is assigned a value but never used.","line":138,"column":13,"nodeType":"Identifier","messageId":"unusedVar","endLine":138,"endColumn":22},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useCallback has an unnecessary dependency: 'erpRequired'. Either exclude it or remove the dependency array.","line":202,"column":5,"nodeType":"ArrayExpression","endLine":216,"endColumn":6,"suggestions":[{"desc":"Update the dependencies array to be: [captureLastSuccess, clearValidation, collectItemCodes, getRoutingSaveState, rollbackToLastSuccess, setActiveGroup, setDirty, setLastSavedAt, setSaving, setValidationErrors, connections, timeline]","fix":{"range":[7785,8079],"text":"[captureLastSuccess, clearValidation, collectItemCodes, getRoutingSaveState, rollbackToLastSuccess, setActiveGroup, setDirty, setLastSavedAt, setSaving, setValidationErrors, connections, timeline]"}}]},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useCallback has unnecessary dependencies: 'applyGroup', 'captureLastSuccess', and 'setDirty'. Either exclude them or remove the dependency array.","line":257,"column":5,"nodeType":"ArrayExpression","endLine":257,"endColumn":80,"suggestions":[{"desc":"Update the dependencies array to be: [setLoading, setValidationErrors]","fix":{"range":[9515,9590],"text":"[setLoading, setValidationErrors]"}}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'params' is defined but never used.","line":261,"column":12,"nodeType":"Identifier","messageId":"unusedVar","endLine":261,"endColumn":89}],"suppressedMessages":[],"errorCount":3,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"﻿import type {\n  RoutingGroupCreateResponse,\n  RoutingGroupDetail,\n  RoutingGroupListResponse,\n  RoutingGroupStep,\n  TimelineStepMetadata,\n} from \"@app-types/routing\";\n// Routing groups API functions removed - feature not used in prediction-only frontend\n// import {\n//   createRoutingGroup,\n//   fetchRoutingGroup,\n//   listRoutingGroups,\n//   postUiAudit,\n// } from \"@lib/apiClient\";\nimport { useRoutingStore } from \"@store/routingStore\";\nimport { useWorkspaceStore } from \"@store/workspaceStore\";\nimport axios from \"axios\";\nimport { useCallback } from \"react\";\n\ninterface SaveGroupArgs {\n  groupName: string;\n  metadata?: Record<string, unknown> | null;\n}\n\ninterface SaveGroupResult {\n  ok: boolean;\n  message: string;\n  response?: RoutingGroupCreateResponse;\n}\n\ninterface LoadGroupResult {\n  ok: boolean;\n  message: string;\n  detail?: RoutingGroupDetail;\n}\n\nconst cloneStepMetadata = (metadata?: TimelineStepMetadata | null): TimelineStepMetadata | null => {\n  if (!metadata) {\n    return null;\n  }\n  const cloned: TimelineStepMetadata = { ...metadata };\n  if (metadata.sqlValues) {\n    cloned.sqlValues = { ...metadata.sqlValues };\n  } else if (metadata.sqlValues === null) {\n    cloned.sqlValues = null;\n  }\n  if (metadata.extra) {\n    cloned.extra = { ...metadata.extra };\n  } else if (metadata.extra === null) {\n    cloned.extra = null;\n  }\n  return cloned;\n};\n\nconst buildSteps = (timeline: ReturnType<typeof useRoutingStore.getState>[\"timeline\"]): RoutingGroupStep[] =>\n  timeline.map((step, index) => {\n    const metadata = cloneStepMetadata(step.metadata);\n    const sqlValues = step.sqlValues ?? metadata?.sqlValues ?? null;\n    if (metadata && sqlValues && metadata.sqlValues !== sqlValues) {\n      metadata.sqlValues = { ...sqlValues };\n    }\n    return {\n      seq: index + 1,\n      process_code: step.processCode,\n      description: step.description ?? null,\n      duration_min: step.runTime ?? null,\n      setup_time: step.setupTime ?? null,\n      wait_time: step.waitTime ?? null,\n      routing_set_code: step.routingSetCode ?? metadata?.routingSetCode ?? null,\n      variant_code: step.variantCode ?? metadata?.variantCode ?? null,\n      primary_routing_code: step.primaryRoutingCode ?? metadata?.primaryRoutingCode ?? null,\n      secondary_routing_code: step.secondaryRoutingCode ?? metadata?.secondaryRoutingCode ?? null,\n      branch_code: step.branchCode ?? metadata?.branchCode ?? null,\n      branch_label: step.branchLabel ?? metadata?.branchLabel ?? null,\n      branch_path: step.branchPath ?? metadata?.branchPath ?? null,\n      sql_values: sqlValues ?? null,\n      metadata: metadata ?? undefined,\n    };\n  });\n\nconst buildConnections = (\n  timeline: ReturnType<typeof useRoutingStore.getState>[\"timeline\"],\n  connections: ReturnType<typeof useRoutingStore.getState>[\"connections\"],\n) =>\n  connections\n    .filter((connection) => (connection.metadata?.createdBy ?? \"auto\") === \"manual\")\n    .filter((connection) => {\n      const ids = new Set(timeline.map((step) => step.id));\n      return ids.has(connection.sourceNodeId) && ids.has(connection.targetNodeId);\n    })\n    .map((connection) => ({\n      id: connection.id,\n      source_node_id: connection.sourceNodeId,\n      target_node_id: connection.targetNodeId,\n      created_at: connection.metadata?.createdAt ?? new Date().toISOString(),\n      created_by: \"manual\" as const,\n    }));\n\nexport function useRoutingGroups() {\n  const timeline = useRoutingStore((state) => state.timeline);\n  const connections = useRoutingStore((state) => state.connections);\n  const erpRequired = useRoutingStore((state) => state.erpRequired);\n  const sourceItemCodes = useRoutingStore((state) => state.sourceItemCodes);\n  const setSaving = useRoutingStore((state) => state.setSaving);\n  const setLoading = useRoutingStore((state) => state.setLoading);\n  const setDirty = useRoutingStore((state) => state.setDirty);\n  const setActiveGroup = useRoutingStore((state) => state.setActiveGroup);\n  const setLastSavedAt = useRoutingStore((state) => state.setLastSavedAt);\n  const setValidationErrors = useRoutingStore((state) => state.setValidationErrors);\n  const clearValidation = useRoutingStore((state) => state.clearValidation);\n  const captureLastSuccess = useRoutingStore((state) => state.captureLastSuccess);\n  const rollbackToLastSuccess = useRoutingStore((state) => state.rollbackToLastSuccess);\n  const applyGroup = useRoutingStore((state) => state.applyGroup);\n  const getRoutingSaveState = useWorkspaceStore((state) => state.saveRouting);\n\n  const collectItemCodes = useCallback((): string[] => {\n    const codes = new Set<string>();\n    timeline.forEach((step) => {\n      if (step.itemCode) {\n        codes.add(step.itemCode);\n      }\n    });\n    return codes.size > 0 ? Array.from(codes) : sourceItemCodes;\n  }, [timeline, sourceItemCodes]);\n\n  const saveGroup = useCallback(\n    async ({ groupName, metadata }: SaveGroupArgs): Promise<SaveGroupResult> => {\n      const trimmed = groupName.trim();\n      if (!trimmed) {\n        return { ok: false, message: \"Enter a group name.\" };\n      }\n      if (timeline.length === 0) {\n        return { ok: false, message: \"Add steps to the timeline before saving.\" };\n      }\n\n      const steps = buildSteps(timeline);\n      const manualConnections = buildConnections(timeline, connections);\n      const itemCodes = collectItemCodes();\n      const { columnMappings } = getRoutingSaveState();\n\n      try {\n        setSaving(true);\n        clearValidation();\n        const metadataPayload = { ...(metadata ?? { source: \"codex-ui\" }) } as Record<string, unknown>;\n        if (columnMappings.length > 0) {\n          metadataPayload.output_mappings = columnMappings;\n          metadataPayload.output_mapping_count = columnMappings.length;\n        }\n        if (manualConnections.length > 0) {\n          metadataPayload.manual_connections = manualConnections;\n          metadataPayload.manual_connection_count = manualConnections.length;\n        }\n        // API removed - return mock response\n        const response = {\n          group_id: `group-${Date.now()}`,\n          version: 1,\n          updated_at: new Date().toISOString()\n        } as RoutingGroupCreateResponse;\n        // const response = await createRoutingGroup({\n        //   groupName: trimmed,\n        //   itemCodes,\n        //   steps,\n        //   erpRequired,\n        //   metadata: metadataPayload,\n        // });\n        setActiveGroup({ id: response.group_id, name: trimmed, version: response.version, updatedAt: response.updated_at });\n        setLastSavedAt(response.updated_at);\n        captureLastSuccess();\n        setDirty(false);\n        // Audit API removed\n        // await postUiAudit({\n        //   action: \"ui.routing.save\",\n        //   username: \"codex\",\n        //   payload: {\n        //     group_id: response.group_id,\n        //     version: response.version,\n        //     step_count: steps.length,\n        //     erp_required: erpRequired,\n        //   },\n        // });\n        return { ok: true, message: \"Group saved successfully.\", response };\n      } catch (error) {\n        rollbackToLastSuccess();\n        let message = \"Failed to save group.\";\n        if (axios.isAxiosError(error)) {\n          const detail = error.response?.data?.detail ?? error.response?.data?.message;\n          if (Array.isArray(detail)) {\n            const messages = detail.map((value) => String(value));\n            setValidationErrors(messages);\n            message = messages.join(\"\\n\");\n          } else if (detail) {\n            const text = typeof detail === \"string\" ? detail : JSON.stringify(detail);\n            setValidationErrors([text]);\n            message = text;\n          }\n        }\n        return { ok: false, message };\n      } finally {\n        setSaving(false);\n      }\n    },\n    [\n      captureLastSuccess,\n      clearValidation,\n      collectItemCodes,\n      erpRequired,\n      getRoutingSaveState,\n      rollbackToLastSuccess,\n      setActiveGroup,\n      setDirty,\n      setLastSavedAt,\n      setSaving,\n      setValidationErrors,\n      connections,\n      timeline,\n    ],\n  );\n\n  const loadGroup = useCallback(\n    async (groupId: string): Promise<LoadGroupResult> => {\n      const trimmed = groupId.trim();\n      if (!trimmed) {\n        return { ok: false, message: \"Enter a group ID.\" };\n      }\n      try {\n        setLoading(true);\n        // API removed - return error\n        return { ok: false, message: \"Routing groups loading feature not available in prediction-only mode.\" };\n        // const detail = await fetchRoutingGroup(trimmed);\n        // applyGroup(detail, \"replace\");\n        // captureLastSuccess();\n        // setDirty(false);\n        // await postUiAudit({\n        //   action: \"ui.routing.load\",\n        //   username: \"codex\",\n        //   payload: {\n        //     group_id: detail.group_id,\n        //     version: detail.version,\n        //     item_count: detail.item_codes.length,\n        //   },\n        // });\n        // return { ok: true, message: `Loaded group '${detail.group_name}'.`, detail };\n      } catch (error) {\n        let message = \"Failed to load group.\";\n        if (axios.isAxiosError(error)) {\n          const detail = error.response?.data?.detail ?? error.response?.data?.message;\n          if (detail) {\n            message = typeof detail === \"string\" ? detail : JSON.stringify(detail);\n          }\n          setValidationErrors([message]);\n        }\n        return { ok: false, message };\n      } finally {\n        setLoading(false);\n      }\n    },\n    [applyGroup, captureLastSuccess, setDirty, setLoading, setValidationErrors],\n  );\n\n  const fetchGroups = useCallback(\n    async (params?: { owner?: string; search?: string; limit?: number; offset?: number }): Promise<RoutingGroupListResponse> => {\n      // API removed - return empty list\n      return { items: [], pagination: { total: 0, limit: 0, offset: 0 } } as RoutingGroupListResponse;\n      // return listRoutingGroups(params);\n    },\n    [],\n  );\n\n  return {\n    saveGroup,\n    loadGroup,\n    fetchGroups,\n  };\n}\n","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\syyun\\Documents\\GitHub\\Routing_ML_251014\\frontend-prediction\\src\\hooks\\useTheme.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'getSystemTheme' is defined but never used.","line":15,"column":10,"nodeType":"Identifier","messageId":"unusedVar","endLine":15,"endColumn":24},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'e' is defined but never used.","line":138,"column":27,"nodeType":"Identifier","messageId":"unusedVar","endLine":138,"endColumn":49}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * Theme Management Hook\n * 다크/라이트 테마 전환 및 LocalStorage 저장\n */\nimport { useEffect,useState } from 'react';\n\nexport type Theme = 'light' | 'dark';\n\nconst THEME_STORAGE_KEY = 'routing-ml-theme';\nconst DEFAULT_THEME: Theme = 'light'; // 현장 환경 고려하여 라이트 테마 기본값\n\n/**\n * 시스템 다크 모드 선호도 확인\n */\nfunction getSystemTheme(): Theme {\n  if (typeof window === 'undefined') return DEFAULT_THEME;\n\n  return window.matchMedia('(prefers-color-scheme: dark)').matches\n    ? 'dark'\n    : 'light';\n}\n\n/**\n * LocalStorage에서 저장된 테마 로드\n */\nfunction getStoredTheme(): Theme | null {\n  if (typeof window === 'undefined') return null;\n\n  const stored = localStorage.getItem(THEME_STORAGE_KEY);\n  if (stored === 'light' || stored === 'dark') {\n    return stored;\n  }\n  return null;\n}\n\n/**\n * 테마를 LocalStorage에 저장\n */\nfunction saveTheme(theme: Theme): void {\n  if (typeof window === 'undefined') return;\n  localStorage.setItem(THEME_STORAGE_KEY, theme);\n}\n\n/**\n * HTML 루트 요소에 테마 클래스 적용 + CSS 변수 강제 설정\n * CSS cascade 문제로 인해 JavaScript로 직접 설정\n */\nfunction applyThemeToDOM(theme: Theme): void {\n  if (typeof window === 'undefined') return;\n\n  const root = document.documentElement;\n\n  if (theme === 'dark') {\n    root.classList.add('dark');\n    // 다크 모드 CSS 변수 강제 적용\n    root.style.setProperty('--gradient-sky-start', '220 25% 12%');\n    root.style.setProperty('--gradient-sky-mid', '220 20% 16%');\n    root.style.setProperty('--gradient-sky-end', '220 18% 20%');\n    root.style.setProperty('--surface-raised', '220 15% 15%');\n    root.style.setProperty('--background', 'hsl(220 18% 10%)');\n    root.style.setProperty('--foreground', 'hsl(210 20% 85%)');\n    root.style.setProperty('--card', 'hsl(220 15% 15%)');\n    root.style.setProperty('--text-primary', 'hsl(210 20% 85%)');\n    root.style.setProperty('--text-muted', 'hsl(210 15% 55%)');\n    root.style.setProperty('--border', 'hsl(220 15% 25%)');\n  } else {\n    root.classList.remove('dark');\n    // 라이트 모드로 복원 (CSS 기본값 사용)\n    root.style.setProperty('--gradient-sky-start', '195 85% 72%');\n    root.style.setProperty('--gradient-sky-mid', '140 65% 75%');\n    root.style.setProperty('--gradient-sky-end', '195 45% 92%');\n    root.style.setProperty('--surface-raised', '0 0% 100%');\n    root.style.setProperty('--background', 'hsl(195 45% 98%)');\n    root.style.setProperty('--foreground', 'hsl(210 45% 20%)');\n    root.style.setProperty('--card', 'hsl(0 0% 100%)');\n    root.style.setProperty('--text-primary', 'hsl(210 45% 22%)');\n    root.style.setProperty('--text-muted', 'hsl(210 25% 45%)');\n    root.style.setProperty('--border', 'hsl(195 30% 85%)');\n  }\n\n  // data-theme 속성도 설정\n  root.setAttribute('data-theme', theme);\n}\n\n/**\n * 테마 관리 훅\n *\n * @returns {Object} theme, setTheme, toggleTheme\n *\n * @example\n * ```tsx\n * function App() {\n *   const { theme, toggleTheme } = useTheme();\n *\n *   return (\n *     <button onClick={toggleTheme}>\n *       {theme === 'light' ? '🌙 다크 모드' : '☀️ 라이트 모드'}\n *     </button>\n *   );\n * }\n * ```\n */\nexport function useTheme() {\n  // 초기 테마: LocalStorage > 시스템 설정 > 기본값\n  const [theme, setThemeState] = useState<Theme>(() => {\n    const stored = getStoredTheme();\n    if (stored) return stored;\n\n    // 현장 환경 고려: 시스템 설정 무시하고 항상 라이트 테마 기본\n    return DEFAULT_THEME;\n  });\n\n  // 테마 변경 시 DOM 업데이트 및 저장\n  const setTheme = (newTheme: Theme) => {\n    setThemeState(newTheme);\n    applyThemeToDOM(newTheme);\n    saveTheme(newTheme);\n  };\n\n  // 테마 토글\n  const toggleTheme = () => {\n    setTheme(theme === 'light' ? 'dark' : 'light');\n  };\n\n  // 컴포넌트 마운트 시 테마 적용\n  useEffect(() => {\n    applyThemeToDOM(theme);\n  }, [theme]);\n\n  // 시스템 다크 모드 설정 변경 감지 (선택적)\n  useEffect(() => {\n    // 사용자가 명시적으로 테마를 선택한 경우 시스템 설정 무시\n    const stored = getStoredTheme();\n    if (stored) return;\n\n    const mediaQuery = window.matchMedia('(prefers-color-scheme: dark)');\n\n    const handleChange = (e: MediaQueryListEvent) => {\n      // 현장 환경에서는 시스템 변경 무시\n      // 필요시 주석 해제:\n      // setTheme(e.matches ? 'dark' : 'light');\n    };\n\n    mediaQuery.addEventListener('change', handleChange);\n    return () => mediaQuery.removeEventListener('change', handleChange);\n  }, []);\n\n  return {\n    theme,\n    setTheme,\n    toggleTheme,\n    isDark: theme === 'dark',\n    isLight: theme === 'light',\n  };\n}\n\n/**\n * 테마 Provider 없이도 사용 가능한 간단한 훅\n * Context API 사용 시 ThemeProvider 구현 권장\n */\nexport default useTheme;\n","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\syyun\\Documents\\GitHub\\Routing_ML_251014\\frontend-prediction\\src\\hooks\\useToast.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\syyun\\Documents\\GitHub\\Routing_ML_251014\\frontend-prediction\\src\\hooks\\useTrackedClick.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":10,"column":53,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":10,"endColumn":56,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[295,298],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[295,298],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":10,"column":63,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":10,"endColumn":66,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[305,308],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[305,308],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useCallback received a function whose dependencies are unknown. Pass an inline function instead.","line":15,"column":10,"nodeType":"Identifier","endLine":15,"endColumn":21},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":16,"column":16,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":16,"endColumn":19,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[409,412],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[409,412],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"Assignments to the 'startTime' variable from inside React Hook useCallback will be lost after each render. To preserve the value over time, store it in a useRef Hook and keep the mutable value in the '.current' property. Otherwise, you can move this variable directly inside useCallback.","line":42,"column":17,"nodeType":"CallExpression","endLine":42,"endColumn":27},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"Assignments to the 'startTime' variable from inside React Hook useCallback will be lost after each render. To preserve the value over time, store it in a useRef Hook and keep the mutable value in the '.current' property. Otherwise, you can move this variable directly inside useCallback.","line":49,"column":17,"nodeType":"Literal","endLine":49,"endColumn":21},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"Assignments to the 'startTime' variable from inside React Hook useCallback will be lost after each render. To preserve the value over time, store it in a useRef Hook and keep the mutable value in the '.current' property. Otherwise, you can move this variable directly inside useCallback.","line":54,"column":17,"nodeType":"Literal","endLine":54,"endColumn":21}],"suppressedMessages":[],"errorCount":3,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { analytics } from '@lib/analytics';\nimport { useCallback } from 'react';\n\n/**\n * Hook for tracking button clicks with analytics\n *\n * @example\n * const handleSave = useTrackedClick('save_button', 'routing_editor', saveToDatabase);\n */\nexport function useTrackedClick<T extends (...args: any[]) => any>(\n  buttonId: string,\n  context?: string,\n  handler?: T\n): T {\n  return useCallback(\n    ((...args: any[]) => {\n      // Track the click\n      analytics.trackButtonClick(buttonId, context);\n\n      // Call the original handler\n      if (handler) {\n        return handler(...args);\n      }\n    }) as T,\n    [buttonId, context, handler]\n  );\n}\n\n/**\n * Hook for tracking feature usage with timing\n *\n * @example\n * const { start, end } = useFeatureTracking('data_export');\n * start();\n * // ... perform export ...\n * end();\n */\nexport function useFeatureTracking(featureId: string) {\n  let startTime: number | null = null;\n\n  const start = useCallback(() => {\n    startTime = Date.now();\n    analytics.trackFeatureUsage(featureId, 'start');\n  }, [featureId]);\n\n  const end = useCallback(() => {\n    const duration = startTime ? Date.now() - startTime : undefined;\n    analytics.trackFeatureUsage(featureId, 'end', duration);\n    startTime = null;\n  }, [featureId]);\n\n  const cancel = useCallback(() => {\n    analytics.trackFeatureUsage(featureId, 'cancel');\n    startTime = null;\n  }, [featureId]);\n\n  return { start, end, cancel };\n}\n\n/**\n * Hook for tracking page views\n *\n * @example\n * usePageTracking('routing_editor');\n */\nexport function usePageTracking(pageName: string) {\n  useCallback(() => {\n    analytics.trackPageView(pageName);\n  }, [pageName]);\n}\n","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\syyun\\Documents\\GitHub\\Routing_ML_251014\\frontend-prediction\\src\\hooks\\useTrainingStatus.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\syyun\\Documents\\GitHub\\Routing_ML_251014\\frontend-prediction\\src\\hooks\\useWorkflowConfig.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\syyun\\Documents\\GitHub\\Routing_ML_251014\\frontend-prediction\\src\\lib\\analytics.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":77,"column":44,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":77,"endColumn":47,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1727,1730],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1727,1730],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":78,"column":18,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":78,"endColumn":21,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1760,1763],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1760,1763],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":210,"column":44,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":210,"endColumn":47,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4835,4838],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4835,4838],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":214,"column":20,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":214,"endColumn":23,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[5015,5018],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[5015,5018],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":4,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * Analytics Library for UI Usage Tracking\n *\n * Supports:\n * - PostHog (production)\n * - Console logging (development)\n * - LocalStorage fallback (no external service)\n */\n\ninterface AnalyticsEvent {\n  event: string;\n  properties?: Record<string, unknown>;\n  timestamp: string;\n}\n\ninterface ButtonClickEvent {\n  button_id: string;\n  context?: string;\n  screen?: string;\n  timestamp: string;\n}\n\ninterface FeatureUsageEvent {\n  feature_id: string;\n  action: string;\n  duration_ms?: number;\n  timestamp: string;\n}\n\nclass AnalyticsService {\n  private enabled: boolean;\n  private buffer: AnalyticsEvent[] = [];\n  private readonly STORAGE_KEY = 'routing_ml_analytics_buffer';\n  private readonly MAX_BUFFER_SIZE = 100;\n\n  constructor() {\n    this.enabled = true;\n    this.loadBuffer();\n  }\n\n  /**\n   * Initialize analytics service\n   */\n  init(): void {\n    if (import.meta.env.PROD && import.meta.env.VITE_POSTHOG_KEY) {\n      // PostHog will be initialized when available\n      console.log('[Analytics] PostHog initialized (placeholder)');\n    } else {\n      console.log('[Analytics] Running in development mode (console only)');\n    }\n\n    // Send buffered events\n    this.flushBuffer();\n  }\n\n  /**\n   * Track generic event\n   */\n  track(event: string, properties?: Record<string, unknown>): void {\n    if (!this.enabled) return;\n\n    const analyticsEvent: AnalyticsEvent = {\n      event,\n      properties,\n      timestamp: new Date().toISOString(),\n    };\n\n    // Log in development\n    if (import.meta.env.DEV) {\n      console.log('[Analytics]', event, properties);\n    }\n\n    // Buffer for later sending\n    this.addToBuffer(analyticsEvent);\n\n    // Send to PostHog in production\n    if (import.meta.env.PROD && (window as any).posthog) {\n      (window as any).posthog.capture(event, properties);\n    }\n  }\n\n  /**\n   * Track button click with context\n   */\n  trackButtonClick(buttonId: string, context?: string, screen?: string): void {\n    const event: ButtonClickEvent = {\n      button_id: buttonId,\n      context,\n      screen,\n      timestamp: new Date().toISOString(),\n    };\n\n    this.track('button_click', event as unknown as Record<string, unknown>);\n  }\n\n  /**\n   * Track feature usage\n   */\n  trackFeatureUsage(featureId: string, action: string, durationMs?: number): void {\n    const event: FeatureUsageEvent = {\n      feature_id: featureId,\n      action,\n      duration_ms: durationMs,\n      timestamp: new Date().toISOString(),\n    };\n\n    this.track('feature_usage', event as unknown as Record<string, unknown>);\n  }\n\n  /**\n   * Track page view\n   */\n  trackPageView(pageName: string): void {\n    this.track('page_view', {\n      page_name: pageName,\n      url: window.location.pathname,\n    });\n  }\n\n  /**\n   * Track error\n   */\n  trackError(error: Error, context?: string): void {\n    this.track('error', {\n      error_name: error.name,\n      error_message: error.message,\n      error_stack: error.stack,\n      context,\n    });\n  }\n\n  /**\n   * Get analytics summary (for debugging)\n   */\n  getSummary(): {\n    totalEvents: number;\n    buttonClicks: number;\n    featureUsage: number;\n    pageViews: number;\n  } {\n    const buffer = this.loadBuffer();\n\n    return {\n      totalEvents: buffer.length,\n      buttonClicks: buffer.filter(e => e.event === 'button_click').length,\n      featureUsage: buffer.filter(e => e.event === 'feature_usage').length,\n      pageViews: buffer.filter(e => e.event === 'page_view').length,\n    };\n  }\n\n  /**\n   * Export analytics data (for manual analysis)\n   */\n  exportData(): AnalyticsEvent[] {\n    return this.loadBuffer();\n  }\n\n  /**\n   * Clear all buffered data\n   */\n  clearData(): void {\n    this.buffer = [];\n    this.saveBuffer();\n  }\n\n  /**\n   * Enable/disable tracking\n   */\n  setEnabled(enabled: boolean): void {\n    this.enabled = enabled;\n    console.log(`[Analytics] Tracking ${enabled ? 'enabled' : 'disabled'}`);\n  }\n\n  // Private methods\n\n  private addToBuffer(event: AnalyticsEvent): void {\n    this.buffer.push(event);\n\n    // Limit buffer size\n    if (this.buffer.length > this.MAX_BUFFER_SIZE) {\n      this.buffer = this.buffer.slice(-this.MAX_BUFFER_SIZE);\n    }\n\n    this.saveBuffer();\n  }\n\n  private loadBuffer(): AnalyticsEvent[] {\n    try {\n      const stored = localStorage.getItem(this.STORAGE_KEY);\n      if (stored) {\n        this.buffer = JSON.parse(stored);\n        return this.buffer;\n      }\n    } catch (error) {\n      console.error('[Analytics] Failed to load buffer:', error);\n    }\n    return [];\n  }\n\n  private saveBuffer(): void {\n    try {\n      localStorage.setItem(this.STORAGE_KEY, JSON.stringify(this.buffer));\n    } catch (error) {\n      console.error('[Analytics] Failed to save buffer:', error);\n    }\n  }\n\n  private flushBuffer(): void {\n    // In production with PostHog, send buffered events\n    if (import.meta.env.PROD && (window as any).posthog && this.buffer.length > 0) {\n      console.log(`[Analytics] Flushing ${this.buffer.length} buffered events`);\n\n      this.buffer.forEach(event => {\n        (window as any).posthog.capture(event.event, event.properties);\n      });\n\n      // Clear buffer after successful flush\n      this.clearData();\n    }\n  }\n}\n\n// Singleton instance\nexport const analytics = new AnalyticsService();\n\n// Export types\nexport type { AnalyticsEvent, ButtonClickEvent, FeatureUsageEvent };\n","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\syyun\\Documents\\GitHub\\Routing_ML_251014\\frontend-prediction\\src\\lib\\apiClient.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'_payload' is defined but never used.","line":503,"column":43,"nodeType":"Identifier","messageId":"unusedVar","endLine":503,"endColumn":72},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'_event' is defined but never used.","line":560,"column":35,"nodeType":"Identifier","messageId":"unusedVar","endLine":560,"endColumn":55},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'_request' is defined but never used.","line":564,"column":40,"nodeType":"Identifier","messageId":"unusedVar","endLine":564,"endColumn":69},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'_request' is defined but never used.","line":581,"column":3,"nodeType":"Identifier","messageId":"unusedVar","endLine":581,"endColumn":36}],"suppressedMessages":[],"errorCount":4,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import type { AuthenticatedUserPayload, LoginRequestPayload, LoginResponsePayload, RegisterRequestPayload, RegisterResponsePayload, UserSession, UserStatusResponsePayload } from \"@app-types/auth\";\nimport type { MasterDataItemResponse, MasterDataLogsResponse, MasterDataTreeResponse } from \"@app-types/masterData\";\nimport type { PredictionResponse } from \"@app-types/routing\";\nimport type { TrainingStatusMetrics } from \"@app-types/training\";\nimport type {\n  WorkflowCodeSyncResponse,\n  WorkflowConfigPatch,\n  WorkflowConfigResponse,\n} from \"@app-types/workflow\";\nimport axios from \"axios\";\n\nexport interface ViewExplorerView {\n  schema_name: string;\n  view_name: string;\n  full_name: string;\n  definition?: string | null;\n}\n\nexport interface ViewExplorerColumn {\n  name: string;\n  type: string;\n  max_length?: number | null;\n  precision?: number | null;\n  scale?: number | null;\n}\n\nexport interface ViewExplorerSampleResponse {\n  view_name: string;\n  columns: ViewExplorerColumn[];\n  data: Array<Record<string, unknown>>;\n  row_count: number;\n  page?: number;\n  page_size?: number;\n  total_pages?: number;\n  has_next?: boolean;\n}\n\n// Use relative URL to leverage Vite proxy in development\n// In production, set VITE_API_URL environment variable\nconst api = axios.create({\n  baseURL: import.meta.env.VITE_API_URL ?? \"/api\",\n  timeout: 60_000,\n  withCredentials: true,\n});\n\n// 401 Unauthorized 에러 핸들링 인터셉터\napi.interceptors.response.use(\n  (response) => response,\n  (error) => {\n    if (axios.isAxiosError(error)) {\n      // 401 에러이고, /auth/me 엔드포인트가 아닌 경우에만 처리\n      // /auth/me는 fetchCurrentUser에서 이미 처리하므로 제외\n      if (error.response?.status === 401 && !error.config?.url?.includes('/auth/me')) {\n        // 인증이 필요한 페이지에서 401 에러 발생 시\n        // 사용자에게 알림 표시 (콘솔 대신 사용자 친화적 메시지)\n        console.warn('인증이 필요합니다. 로그인 페이지로 이동하지 않습니다.');\n        // 실제 프로덕션에서는 로그인 페이지로 리다이렉트 가능:\n        // window.location.href = '/login';\n      }\n    }\n    return Promise.reject(error);\n  }\n);\n\nconst toUserSession = (payload: AuthenticatedUserPayload): UserSession => ({\n  username: payload.username,\n  displayName: payload.display_name ?? undefined,\n  status: payload.status,\n  isAdmin: payload.is_admin,\n  issuedAt: payload.issued_at,\n  expiresAt: payload.expires_at,\n});\n\nexport async function registerUser(payload: RegisterRequestPayload): Promise<RegisterResponsePayload> {\n  const response = await api.post<RegisterResponsePayload>(\"/auth/register\", {\n    username: payload.username,\n    password: payload.password,\n    display_name: payload.displayName ?? undefined,\n  });\n  return response.data;\n}\n\nexport async function loginUser(payload: LoginRequestPayload): Promise<LoginResponsePayload> {\n  const response = await api.post<LoginResponsePayload>(\"/auth/login\", payload);\n  return response.data;\n}\n\nexport async function logoutUser(): Promise<void> {\n  await api.post(\"/auth/logout\");\n}\n\nexport async function fetchCurrentUser(): Promise<UserSession | null> {\n  try {\n    const response = await api.get<AuthenticatedUserPayload>(\"/auth/me\");\n    return toUserSession(response.data);\n  } catch (error) {\n    if (axios.isAxiosError(error) && error.response?.status === 401) {\n      return null;\n    }\n    throw error;\n  }\n}\n\nexport async function approveUserAccount(payload: { username: string; makeAdmin?: boolean }): Promise<UserStatusResponsePayload> {\n  const response = await api.post<UserStatusResponsePayload>(\"/auth/admin/approve\", {\n    username: payload.username,\n    make_admin: payload.makeAdmin ?? false,\n  });\n  return response.data;\n}\n\nexport async function rejectUserAccount(payload: { username: string; reason?: string | null }): Promise<UserStatusResponsePayload> {\n  const response = await api.post<UserStatusResponsePayload>(\"/auth/admin/reject\", {\n    username: payload.username,\n    reason: payload.reason ?? null,\n  });\n  return response.data;\n}\n\nexport async function predictRoutings(params: {\n  itemCodes: string[];\n  topK: number;\n  threshold: number;\n  featureWeights?: Record<string, number>;\n  weightProfile?: string | null;\n  exportFormats?: string[];\n  withVisualization?: boolean;\n}): Promise<PredictionResponse> {\n  const payload: Record<string, unknown> = {\n    item_codes: params.itemCodes,\n    top_k: params.topK,\n    similarity_threshold: params.threshold,\n    with_visualization: params.withVisualization ?? false,\n  };\n  if (params.featureWeights && Object.keys(params.featureWeights).length > 0) {\n    payload.feature_weights = params.featureWeights;\n  }\n  if (params.weightProfile) {\n    payload.weight_profile = params.weightProfile;\n  }\n  if (params.exportFormats && params.exportFormats.length > 0) {\n    payload.export_formats = params.exportFormats;\n  }\n\n  const response = await api.post<PredictionResponse>(\"/predict\", payload, { timeout: 20_000 });\n  return response.data;\n}\n\nexport async function fetchViewExplorerViews(): Promise<ViewExplorerView[]> {\n  const response = await api.get<ViewExplorerView[]>(\"/view-explorer/views\");\n  return response.data;\n}\n\nexport interface ViewExplorerSampleRequestOptions {\n  limit?: number;\n  page?: number;\n  pageSize?: number;\n  search?: string;\n  searchColumn?: string;\n}\n\nexport async function fetchViewExplorerSample(\n  viewName: string,\n  options: ViewExplorerSampleRequestOptions = {},\n): Promise<ViewExplorerSampleResponse> {\n  const encodedViewName = encodeURIComponent(viewName);\n  const params: Record<string, unknown> = {};\n  if (options.limit != null) {\n    params.limit = options.limit;\n  }\n  if (options.page != null) {\n    params.page = options.page;\n  }\n  if (options.pageSize != null) {\n    params.page_size = options.pageSize;\n  }\n  if (options.search && options.search.length > 0) {\n    params.search = options.search;\n  }\n  if (options.searchColumn && options.searchColumn.length > 0) {\n    params.search_column = options.searchColumn;\n  }\n  const response = await api.get<ViewExplorerSampleResponse>(\n    `/view-explorer/views/${encodedViewName}/sample`,\n    {\n      params,\n    },\n  );\n  return response.data;\n}\n\n\nexport interface TrainingStatus {\n  job_id?: string | null;\n  status: string;\n  started_at?: string | null;\n  finished_at?: string | null;\n  progress: number;\n  message?: string | null;\n  version_path?: string | null;\n  metrics: TrainingStatusMetrics;\n  latest_version?: Record<string, unknown> | null;\n}\n\nexport interface TrainingRequestPayload {\n  version_label?: string | null;\n  projector_metadata?: string[];\n  dry_run?: boolean;\n}\n\nexport async function fetchTrainingStatus(): Promise<TrainingStatus> {\n  const response = await api.get<TrainingStatus>(\"/trainer/status\");\n  return response.data;\n}\n\nexport interface TrainingMetricCard {\n  id?: string;\n  title: string;\n  value: string | number;\n  subtitle?: string | null;\n}\n\nexport interface TrainingMetricTrendPoint {\n  timestamp: string;\n  value: number;\n  label?: string | null;\n}\n\nexport interface TrainingHeatmapPayload {\n  xLabels: string[];\n  yLabels: string[];\n  values: number[][];\n  unit?: string | null;\n  label?: string | null;\n}\n\nexport interface TrainingMetricsResponse {\n  cards?: TrainingMetricCard[];\n  tensorboard_url?: string | null;\n  metric_trend?: TrainingMetricTrendPoint[];\n  metric_trend_label?: string | null;\n  heatmap?: TrainingHeatmapPayload | null;\n}\n\nexport interface TrainingFeatureWeight {\n  id: string;\n  label: string;\n  weight: number;\n  enabled: boolean;\n  description?: string | null;\n}\n\nexport interface TrainingRunRecord {\n  id?: string;\n  timestamp: string;\n  user: string;\n  result: string;\n  duration_seconds?: number | null;\n  duration_label?: string | null;\n  metadata?: Record<string, unknown> | null;\n}\n\nexport interface TrainingFeaturePatchRequest {\n  features: Record<string, boolean>;\n}\n\nexport interface TrainingFeaturePatchResponse {\n  updated: string[];\n  disabled?: string[];\n  timestamp: string;\n}\n\nexport async function fetchTrainingMetrics(): Promise<TrainingMetricsResponse> {\n  const response = await api.get<TrainingMetricsResponse>(\"/trainer/metrics\");\n  return response.data;\n}\n\nexport async function fetchTrainingFeatureWeights(): Promise<TrainingFeatureWeight[]> {\n  const response = await api.get<TrainingFeatureWeight[] | { features?: TrainingFeatureWeight[] }>(\n    \"/training/features\",\n  );\n  const payload = response.data;\n  return Array.isArray(payload) ? payload : payload.features ?? [];\n}\n\nexport async function fetchTrainingRunHistory(limit = 10): Promise<TrainingRunRecord[]> {\n  const response = await api.get<TrainingRunRecord[] | { runs?: TrainingRunRecord[] }>(\"/trainer/runs\", {\n    params: { limit },\n  });\n  const payload = response.data;\n  return Array.isArray(payload) ? payload : payload.runs ?? [];\n}\n\nexport async function patchTrainingFeatures(\n  payload: TrainingFeaturePatchRequest,\n): Promise<TrainingFeaturePatchResponse> {\n  const response = await api.patch<TrainingFeaturePatchResponse>(\"/training/features\", payload);\n  return response.data;\n}\n\n\nexport async function runTraining(payload: TrainingRequestPayload): Promise<TrainingStatus> {\n  const response = await api.post<TrainingStatus>(\"/trainer/run\", payload);\n  return response.data;\n}\n\n// ============================================================================\n// TYPE EXPORTS\n// ============================================================================\n\nexport interface WorkspaceColumnMappingPayload {\n  scope: string;\n  source: string;\n  target: string;\n}\n\nexport interface WorkspaceOptionsPayload {\n  standard: string[];\n  similarity: string[];\n  offline_dataset_path: string | null;\n  database_target_table: string | null;\n  erp_interface: boolean;\n  column_mappings: WorkspaceColumnMappingPayload[];\n}\n\nexport interface WorkspaceAccessPayload {\n  path: string | null;\n  table: string | null;\n}\n\nexport interface WorkspaceSettingsPayload {\n  version: number | string;\n  layout?: Record<string, unknown>;\n  routing?: Record<string, unknown>;\n  algorithm?: Record<string, unknown>;\n  options?: WorkspaceOptionsPayload;\n  access?: WorkspaceAccessPayload;\n  metadata?: Record<string, unknown>;\n  output?: Record<string, unknown>;\n}\n\nexport interface WorkspaceOptionsResponse {\n  standard?: unknown;\n  similarity?: unknown;\n  offline_dataset_path?: string | null;\n  database_target_table?: string | null;\n  erp_interface?: boolean;\n  column_mappings?: unknown;\n  [key: string]: unknown;\n}\n\nexport interface WorkspaceDataSourceSettings {\n  offline_dataset_path?: string | null;\n  [key: string]: unknown;\n}\n\nexport interface WorkspaceExportSettings {\n  database_target_table?: string | null;\n  erp_interface_enabled?: boolean;\n  [key: string]: unknown;\n}\n\nexport interface WorkspaceSettingsResponse {\n  version?: number | string;\n  options?: WorkspaceOptionsResponse;\n  data_source?: WorkspaceDataSourceSettings;\n  export?: WorkspaceExportSettings;\n  access?: WorkspaceAccessPayload;\n  metadata?: Record<string, unknown>;\n  updated_at: string;\n  user?: string;\n}\n\nexport interface UiAuditEvent {\n  action: string;\n  username?: string;\n  entity?: string;\n  payload?: Record<string, unknown>;\n  metadata?: Record<string, unknown>;\n  timestamp?: string;\n}\n\nexport interface UiAuditBatchRequest {\n  events: UiAuditEvent[];\n  source?: string;\n}\n\nexport interface RoutingSnapshotsBatchResponse {\n  accepted_snapshot_ids: string[];\n  accepted_audit_ids: string[];\n  updated_groups: string[];\n}\n\nexport interface RoutingInterfaceRequest {\n  groupId: string;\n  reason?: string;\n}\n\nexport interface RoutingInterfaceResponse {\n  message?: string;\n  erp_path?: string;\n  [key: string]: unknown;\n}\n\nexport interface RoutingGroupListResponse {\n  groups: Array<Record<string, unknown>>;\n  total: number;\n}\n\nexport type OutputProfileColumn = OutputProfileMapping;\n\nexport interface DatabaseMetadataColumn {\n  name: string;\n  type: string;\n  nullable?: boolean;\n}\n\nexport interface DatabaseMetadataResponse {\n  table: string;\n  columns: DatabaseMetadataColumn[];\n  server?: string;\n  database?: string;\n  updated_at?: string;\n}\n\nexport interface DatabaseConnectionTestPayload {\n  server: string;\n  database: string;\n  user: string;\n  password: string;\n  encrypt?: boolean;\n  trustCertificate?: boolean;\n}\n\nexport interface DatabaseConnectionTestResult {\n  success: boolean;\n  message: string;\n  details?: Record<string, unknown>;\n}\n\n// ============================================================================\n// MASTER DATA APIs (MSSQL)\n// ============================================================================\n\nexport async function fetchMasterDataTree(\n  query?: string,\n  parentType?: string,\n  parentId?: string\n): Promise<MasterDataTreeResponse> {\n  const params: Record<string, string> = {};\n  if (query) params.query = query;\n  if (parentType) params.parent_type = parentType;\n  if (parentId) params.parent_id = parentId;\n\n  const response = await api.get<MasterDataTreeResponse>(\"/master-data/tree\", { params });\n  return response.data;\n}\n\nexport async function fetchMasterDataItem(itemCode: string): Promise<MasterDataItemResponse> {\n  const response = await api.get<MasterDataItemResponse>(`/master-data/items/${encodeURIComponent(itemCode)}`);\n  return response.data;\n}\n\nexport async function fetchMasterDataLogs(): Promise<MasterDataLogsResponse> {\n  const response = await api.get<MasterDataLogsResponse>(\"/master-data/logs\");\n  return response.data;\n}\n\nexport async function downloadMasterDataLog(): Promise<Blob> {\n  const response = await api.get<Blob>(\"/master-data/logs/download\", { responseType: \"blob\" });\n  return response.data;\n}\n\nexport async function fetchDatabaseMetadata(params?: { table?: string }): Promise<DatabaseMetadataResponse> {\n  const response = await api.get<DatabaseMetadataResponse>(\"/mssql/metadata\", {\n    params: params ?? {},\n  });\n  return response.data;\n}\n\nexport async function testDatabaseConnection(\n  payload: DatabaseConnectionTestPayload\n): Promise<DatabaseConnectionTestResult> {\n  const response = await api.post<DatabaseConnectionTestResult>(\"/database/test-connection\", {\n    server: payload.server,\n    database: payload.database,\n    user: payload.user,\n    password: payload.password,\n    encrypt: payload.encrypt ?? false,\n    trust_certificate: payload.trustCertificate ?? true,\n  });\n  return response.data;\n}\n\n// ============================================================================\n// PLACEHOLDER / LEGACY APIs\n// ============================================================================\n\nexport async function fetchWorkflowConfig(): Promise<WorkflowConfigResponse> {\n  throw new Error(\"Workflow API removed - feature not available\");\n}\n\nexport async function patchWorkflowConfig(_payload: WorkflowConfigPatch): Promise<WorkflowConfigResponse> {\n  throw new Error(\"Workflow API removed - feature not available\");\n}\n\nexport async function regenerateWorkflowCode(): Promise<WorkflowCodeSyncResponse> {\n  throw new Error(\"Workflow API removed - feature not available\");\n}\n\nexport async function fetchWorkspaceSettings(): Promise<WorkspaceSettingsResponse> {\n  return {\n    version: Date.now(),\n    options: {\n      standard: [],\n      similarity: [],\n      offline_dataset_path: null,\n      database_target_table: null,\n      erp_interface: false,\n      column_mappings: [],\n    },\n    data_source: { offline_dataset_path: null },\n    export: { database_target_table: null, erp_interface_enabled: false },\n    access: { path: null, table: null },\n    updated_at: new Date().toISOString(),\n  };\n}\n\nexport async function saveWorkspaceSettings(payload: WorkspaceSettingsPayload): Promise<WorkspaceSettingsResponse> {\n  const options: WorkspaceOptionsPayload = payload.options ?? {\n    standard: [],\n    similarity: [],\n    offline_dataset_path: null,\n    database_target_table: null,\n    erp_interface: false,\n    column_mappings: [],\n  };\n  const access: WorkspaceAccessPayload = payload.access ?? { path: null, table: null };\n  return {\n    version: payload.version,\n    options: {\n      standard: options.standard,\n      similarity: options.similarity,\n      offline_dataset_path: options.offline_dataset_path,\n      database_target_table: options.database_target_table,\n      erp_interface: options.erp_interface,\n      column_mappings: options.column_mappings,\n    },\n    data_source: { offline_dataset_path: access.path },\n    export: {\n      database_target_table: options.database_target_table,\n      erp_interface_enabled: options.erp_interface,\n    },\n    access,\n    metadata: payload.metadata,\n    updated_at: new Date().toISOString(),\n  };\n}\n\nexport async function postUiAudit(_event: UiAuditEvent): Promise<void> {\n  return;\n}\n\nexport async function postUiAuditBatch(_request: UiAuditBatchRequest): Promise<void> {\n  return;\n}\n\nexport async function createRoutingGroup(): Promise<never> {\n  throw new Error(\"Routing groups API removed - feature not available\");\n}\n\nexport async function fetchRoutingGroup(): Promise<never> {\n  throw new Error(\"Routing groups API removed - feature not available\");\n}\n\nexport async function listRoutingGroups(): Promise<RoutingGroupListResponse> {\n  return { groups: [], total: 0 };\n}\n\nexport async function triggerRoutingInterface(\n  _request: RoutingInterfaceRequest\n): Promise<RoutingInterfaceResponse> {\n  throw new Error(\"Routing interface API removed - feature not available\");\n}\n\nexport interface OutputProfileListItem {\n  id: string;\n  name: string;\n  description?: string | null;\n  format?: string;\n  created_at?: string;\n  updated_at?: string;\n}\n\nexport interface OutputProfileMapping {\n  source: string;\n  mapped: string;\n  type: string;\n  required: boolean;\n  default_value?: string | null;\n}\n\nexport interface OutputProfileDetail {\n  id: string;\n  name: string;\n  description?: string | null;\n  format: string;\n  mappings: OutputProfileMapping[];\n  created_at?: string;\n  updated_at?: string;\n  sample?: Array<Record<string, unknown>>;\n}\n\nexport interface CreateOutputProfilePayload {\n  name: string;\n  description?: string | null;\n  format?: string;\n  mappings?: OutputProfileMapping[];\n}\n\nexport interface CreateOutputProfileResponse {\n  id: string;\n  name: string;\n  description?: string | null;\n  format: string;\n  created_at: string;\n  updated_at: string;\n  message: string;\n}\n\nexport async function fetchOutputProfiles(): Promise<OutputProfileListItem[]> {\n  const response = await api.get<OutputProfileListItem[]>(\"/routing/output-profiles\");\n  return response.data;\n}\n\nexport async function fetchOutputProfileDetail(profileId: string): Promise<OutputProfileDetail> {\n  const response = await api.get<OutputProfileDetail>(`/routing/output-profiles/${profileId}`);\n  return response.data;\n}\n\nexport async function createOutputProfile(payload: CreateOutputProfilePayload): Promise<CreateOutputProfileResponse> {\n  const response = await api.post<CreateOutputProfileResponse>(\"/routing/output-profiles\", {\n    name: payload.name,\n    description: payload.description ?? null,\n    format: payload.format ?? \"CSV\",\n    mappings: payload.mappings ?? [],\n  });\n  return response.data;\n}\n\nexport async function generateOutputPreview(payload: {\n  profileId?: string | null;\n  mappings: Array<{\n    source: string;\n    mapped: string;\n    type: string;\n    required: boolean;\n    default_value?: string | null;\n  }>;\n  format: string;\n}): Promise<{ rows: Array<Record<string, unknown>>; columns: string[] }> {\n  const response = await api.post<{ rows: Array<Record<string, unknown>>; columns: string[] }>(\n    \"/routing/output-profiles/preview\",\n    payload\n  );\n  return response.data;\n}\n\nexport async function postRoutingSnapshotsBatch(): Promise<RoutingSnapshotsBatchResponse> {\n  return { accepted_snapshot_ids: [], accepted_audit_ids: [], updated_groups: [] };\n}\n\n// ============================================================================\n// DATA MAPPING APIs (데이터 관계 설정)\n// ============================================================================\n\nexport interface DataRelationshipMapping {\n  training_column: string;\n  prediction_column?: string | null;\n  output_column: string;\n  data_type: \"string\" | \"number\" | \"boolean\" | \"date\";\n  is_required: boolean;\n  default_value?: string | null;\n  transform_rule?: string | null;\n  description?: string | null;\n}\n\nexport interface DataMappingProfile {\n  id: string;\n  name: string;\n  description?: string | null;\n  relationships: DataRelationshipMapping[];\n  mappings?: unknown[]; // Legacy field\n  created_by?: string | null;\n  created_at?: string | null;\n  updated_at?: string | null;\n  is_active: boolean;\n}\n\nexport interface DataMappingProfileCreate {\n  name: string;\n  description?: string | null;\n  relationships?: DataRelationshipMapping[];\n  mappings?: unknown[];\n}\n\nexport interface DataMappingProfileUpdate {\n  name?: string | null;\n  description?: string | null;\n  relationships?: DataRelationshipMapping[] | null;\n  mappings?: unknown[] | null;\n  is_active?: boolean | null;\n}\n\nexport interface DataMappingProfileListResponse {\n  profiles: DataMappingProfile[];\n  total: number;\n}\n\nexport interface DataMappingApplyRequest {\n  profile_id: string;\n  routing_group_id: string;\n  preview_only: boolean;\n}\n\nexport interface DataMappingApplyResponse {\n  profile_id: string;\n  routing_group_id: string;\n  columns: string[];\n  preview_rows: Array<Record<string, unknown>>;\n  total_rows: number;\n  csv_path?: string | null;\n  message: string;\n}\n\nexport async function fetchDataMappingProfiles(): Promise<DataMappingProfileListResponse> {\n  const response = await api.get<DataMappingProfileListResponse>(\"/data-mapping/profiles\");\n  return response.data;\n}\n\nexport async function fetchDataMappingProfile(profileId: string): Promise<DataMappingProfile> {\n  const response = await api.get<DataMappingProfile>(`/data-mapping/profiles/${profileId}`);\n  return response.data;\n}\n\nexport async function createDataMappingProfile(\n  payload: DataMappingProfileCreate\n): Promise<DataMappingProfile> {\n  const response = await api.post<DataMappingProfile>(\"/data-mapping/profiles\", payload);\n  return response.data;\n}\n\nexport async function updateDataMappingProfile(\n  profileId: string,\n  payload: DataMappingProfileUpdate\n): Promise<DataMappingProfile> {\n  const response = await api.patch<DataMappingProfile>(`/data-mapping/profiles/${profileId}`, payload);\n  return response.data;\n}\n\nexport async function deleteDataMappingProfile(profileId: string): Promise<void> {\n  await api.delete(`/data-mapping/profiles/${profileId}`);\n}\n\nexport async function applyDataMapping(\n  request: DataMappingApplyRequest\n): Promise<DataMappingApplyResponse> {\n  const response = await api.post<DataMappingApplyResponse>(\"/data-mapping/apply\", request);\n  return response.data;\n}\n\n// ============================================================================\n// ITERATIVE TRAINING QUALITY APIs\n// ============================================================================\n\nexport interface AlertItem {\n  item_cd: string;\n  proc_cd?: string | null;\n  issue: string;\n  value: number;\n  threshold: number;\n  message: string;\n  metadata?: Record<string, unknown>;\n}\n\nexport interface QualityMetrics {\n  cycle_id: string;\n  sample_size: number;\n  strategy: \"random\" | \"stratified\" | \"recent_bias\";\n  mae: number;\n  trim_mae: number;\n  rmse: number;\n  process_match: number;\n  outsourcing_success: number;\n  cv: number;\n  sample_count: number;\n  alerts: AlertItem[];\n  timestamp: string;\n  duration_seconds: number;\n  items_evaluated: number;\n  items_failed: number;\n  metadata?: Record<string, unknown>;\n}\n\nexport interface QualityCycle {\n  cycle_id: string;\n  timestamp: string;\n  metrics: QualityMetrics;\n}\n\nexport interface QualityHistoryResponse {\n  cycles: QualityCycle[];\n  total: number;\n  start_date?: string;\n  end_date?: string;\n}\n\n// ============================================================================\n// DATA QUALITY APIs\n// ============================================================================\n\nexport interface DataQualityMetrics {\n  completeness: number;\n  consistency: number;\n  validity: number;\n  timestamp: string;\n  trends?: {\n    completeness: number[];\n    consistency: number[];\n    validity: number[];\n  };\n}\n\nexport interface DataQualityIssue {\n  id: string;\n  severity: \"critical\" | \"warning\" | \"info\";\n  type: string;\n  message: string;\n  affectedRecords: number;\n  timestamp: string;\n  details?: Record<string, unknown>;\n}\n\nexport interface DataQualityReport {\n  issues: DataQualityIssue[];\n  summary: {\n    critical: number;\n    warning: number;\n    info: number;\n  };\n  lastCheck: string;\n}\n\nexport interface ComponentHealth {\n  status: \"healthy\" | \"degraded\" | \"unhealthy\";\n  message?: string;\n  lastCheck: string;\n}\n\nexport interface HealthStatus {\n  status: \"healthy\" | \"degraded\" | \"unhealthy\";\n  components: {\n    database: ComponentHealth;\n    api: ComponentHealth;\n    workers: ComponentHealth;\n  };\n  timestamp: string;\n}\n\nexport async function fetchDataQualityMetrics(): Promise<DataQualityMetrics> {\n  const response = await api.get<DataQualityMetrics>(\"/data-quality/metrics\");\n  return response.data;\n}\n\nexport async function fetchDataQualityReport(): Promise<DataQualityReport> {\n  const response = await api.get<DataQualityReport>(\"/data-quality/report\");\n  return response.data;\n}\n\nexport async function fetchPrometheusMetrics(): Promise<string> {\n  const response = await api.get<string>(\"/data-quality/prometheus\");\n  return response.data;\n}\n\nexport async function fetchDataQualityHealth(): Promise<HealthStatus> {\n  const response = await api.get<HealthStatus>(\"/data-quality/health\");\n  return response.data;\n}\n\nexport interface HistoricalMetricsParams {\n  startDate: string; // ISO format\n  endDate: string; // ISO format\n  interval?: \"1h\" | \"6h\" | \"1d\"; // Data point interval\n}\n\nexport interface HistoricalMetricsDataPoint {\n  timestamp: string;\n  metrics: DataQualityMetrics;\n}\n\nexport interface HistoricalIssuesDataPoint {\n  timestamp: string;\n  issues: DataQualityIssue[];\n}\n\nexport interface HistoricalMetricsResponse {\n  dataPoints: HistoricalMetricsDataPoint[];\n  startDate: string;\n  endDate: string;\n  interval: string;\n}\n\nexport interface HistoricalIssuesResponse {\n  dataPoints: HistoricalIssuesDataPoint[];\n  startDate: string;\n  endDate: string;\n  interval: string;\n}\n\nexport async function fetchHistoricalMetrics(params: HistoricalMetricsParams): Promise<HistoricalMetricsResponse> {\n  const response = await api.get<HistoricalMetricsResponse>(\"/data-quality/historical/metrics\", {\n    params: {\n      start_date: params.startDate,\n      end_date: params.endDate,\n      interval: params.interval ?? \"1h\",\n    },\n  });\n  return response.data;\n}\n\nexport async function fetchHistoricalIssues(params: HistoricalMetricsParams): Promise<HistoricalIssuesResponse> {\n  const response = await api.get<HistoricalIssuesResponse>(\"/data-quality/historical/issues\", {\n    params: {\n      start_date: params.startDate,\n      end_date: params.endDate,\n      interval: params.interval ?? \"1h\",\n    },\n  });\n  return response.data;\n}\n\n// ============================================================================\n// DRAWING VIEWER API (ERP Integration)\n// ============================================================================\n\nexport interface DrawingInfo {\n  /**\n   * 도면 번호 (DRAW_NO)\n   */\n  drawingNumber: string;\n\n  /**\n   * 리비전 (DRAW_REV)\n   */\n  revision: string;\n\n  /**\n   * 시트 번호 (DRAW_SHEET_NO)\n   */\n  sheetNumber: string;\n\n  /**\n   * 도면 정보 사용 가능 여부\n   */\n  available: boolean;\n}\n\n/**\n * 품목의 도면 정보를 조회합니다.\n *\n * MSSQL item_info 테이블에서 DRAW_NO, DRAW_REV, DRAW_SHEET_NO를 조회합니다.\n *\n * @param itemCode - 품목 코드\n * @returns 도면 정보\n */\nexport async function fetchDrawingInfo(itemCode: string): Promise<DrawingInfo> {\n  const response = await api.get<DrawingInfo>(`/items/${itemCode}/drawing-info`);\n  return response.data;\n}\n\n\nexport default api;\n","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\syyun\\Documents\\GitHub\\Routing_ML_251014\\frontend-prediction\\src\\lib\\classNames.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\syyun\\Documents\\GitHub\\Routing_ML_251014\\frontend-prediction\\src\\lib\\csvExporter.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\syyun\\Documents\\GitHub\\Routing_ML_251014\\frontend-prediction\\src\\lib\\dragAndDrop.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\syyun\\Documents\\GitHub\\Routing_ML_251014\\frontend-prediction\\src\\lib\\errorHandler.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":40,"column":48,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":40,"endColumn":51,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[972,975],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[972,975],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * 공통 에러 처리 유틸리티\n *\n * API 에러를 파싱하고 사용자 친화적인 메시지로 변환합니다.\n */\n\nexport interface ApiError {\n  message: string;\n  status?: number;\n  code?: string;\n  details?: unknown;\n}\n\nexport interface ErrorHandlerOptions {\n  showToast?: boolean;\n  logToConsole?: boolean;\n  fallbackMessage?: string;\n}\n\n/**\n * API 에러 응답을 파싱합니다.\n */\nexport async function parseApiError(response: Response): Promise<ApiError> {\n  const status = response.status;\n  let message = `HTTP ${status}: ${response.statusText}`;\n  let code: string | undefined;\n  let details: unknown;\n\n  try {\n    const contentType = response.headers.get(\"content-type\");\n    if (contentType?.includes(\"application/json\")) {\n      const body = await response.json();\n\n      // FastAPI 표준 에러 형식\n      if (body.detail) {\n        if (typeof body.detail === \"string\") {\n          message = body.detail;\n        } else if (Array.isArray(body.detail)) {\n          // Pydantic 유효성 검증 에러\n          const errors = body.detail.map((err: any) =>\n            `${err.loc?.join(\".\")}: ${err.msg}`\n          ).join(\", \");\n          message = `유효성 검증 실패: ${errors}`;\n          details = body.detail;\n        } else if (typeof body.detail === \"object\") {\n          message = body.detail.message || JSON.stringify(body.detail);\n          code = body.detail.code;\n          details = body.detail;\n        }\n      }\n\n      // 기타 에러 형식\n      if (body.message) {\n        message = body.message;\n      }\n      if (body.code) {\n        code = body.code;\n      }\n      if (body.error) {\n        message = body.error;\n      }\n    } else {\n      // JSON이 아닌 경우 텍스트로 파싱\n      const text = await response.text();\n      if (text) {\n        message = text;\n      }\n    }\n  } catch (parseError) {\n    // 파싱 실패 시 기본 메시지 사용\n    console.error(\"Failed to parse error response:\", parseError);\n  }\n\n  return {\n    message,\n    status,\n    code,\n    details,\n  };\n}\n\n/**\n * 네트워크 에러를 처리합니다.\n */\nexport function handleNetworkError(error: unknown): ApiError {\n  if (error instanceof TypeError && error.message.includes(\"fetch\")) {\n    return {\n      message: \"네트워크 연결을 확인해주세요. 서버에 접속할 수 없습니다.\",\n      code: \"NETWORK_ERROR\",\n    };\n  }\n\n  if (error instanceof Error) {\n    return {\n      message: error.message,\n      code: \"UNKNOWN_ERROR\",\n    };\n  }\n\n  return {\n    message: \"알 수 없는 에러가 발생했습니다.\",\n    code: \"UNKNOWN_ERROR\",\n    details: error,\n  };\n}\n\n/**\n * HTTP 상태 코드에 따라 사용자 친화적인 메시지를 반환합니다.\n */\nexport function getStatusMessage(status: number): string {\n  switch (status) {\n    case 400:\n      return \"요청이 올바르지 않습니다.\";\n    case 401:\n      return \"인증이 필요합니다. 다시 로그인해주세요.\";\n    case 403:\n      return \"이 작업을 수행할 권한이 없습니다.\";\n    case 404:\n      return \"요청한 리소스를 찾을 수 없습니다.\";\n    case 409:\n      return \"리소스 충돌이 발생했습니다. (중복되거나 버전이 맞지 않습니다)\";\n    case 422:\n      return \"입력 데이터의 형식이 올바르지 않습니다.\";\n    case 429:\n      return \"너무 많은 요청을 보냈습니다. 잠시 후 다시 시도해주세요.\";\n    case 500:\n      return \"서버 내부 오류가 발생했습니다.\";\n    case 502:\n      return \"게이트웨이 오류가 발생했습니다.\";\n    case 503:\n      return \"서비스를 일시적으로 사용할 수 없습니다.\";\n    case 504:\n      return \"게이트웨이 시간 초과가 발생했습니다.\";\n    default:\n      return `HTTP ${status} 에러가 발생했습니다.`;\n  }\n}\n\n/**\n * API 에러를 처리하고 사용자에게 알립니다.\n */\nexport function handleApiError(\n  error: ApiError,\n  options: ErrorHandlerOptions = {}\n): void {\n  const {\n    showToast = true,\n    logToConsole = true,\n    fallbackMessage = \"작업을 수행하는 중 에러가 발생했습니다.\",\n  } = options;\n\n  const displayMessage = error.message || fallbackMessage;\n\n  if (logToConsole) {\n    console.error(\"API Error:\", {\n      message: error.message,\n      status: error.status,\n      code: error.code,\n      details: error.details,\n    });\n  }\n\n  if (showToast) {\n    // Toast 시스템이 구현되면 여기서 호출\n    // showToast({ type: \"error\", message: displayMessage });\n    console.error(`[Toast would show] ${displayMessage}`);\n  }\n}\n\n/**\n * Fetch 요청을 래핑하여 에러를 자동으로 처리합니다.\n */\nexport async function fetchWithErrorHandling(\n  url: string,\n  options?: RequestInit,\n  errorOptions?: ErrorHandlerOptions\n): Promise<Response> {\n  try {\n    const response = await fetch(url, options);\n\n    if (!response.ok) {\n      const apiError = await parseApiError(response);\n      handleApiError(apiError, errorOptions);\n      throw apiError;\n    }\n\n    return response;\n  } catch (error) {\n    if (error && typeof error === \"object\" && \"status\" in error) {\n      // 이미 parseApiError에서 처리된 에러\n      throw error;\n    }\n\n    // 네트워크 에러 등\n    const networkError = handleNetworkError(error);\n    handleApiError(networkError, errorOptions);\n    throw networkError;\n  }\n}\n\n/**\n * 재시도 로직을 포함한 Fetch 요청\n */\nexport async function fetchWithRetry(\n  url: string,\n  options?: RequestInit,\n  maxRetries: number = 3,\n  delayMs: number = 1000\n): Promise<Response> {\n  let lastError: ApiError | undefined;\n\n  for (let attempt = 0; attempt <= maxRetries; attempt++) {\n    try {\n      const response = await fetch(url, options);\n\n      if (!response.ok) {\n        const apiError = await parseApiError(response);\n\n        // 재시도 가능한 상태 코드\n        const retryableStatuses = [408, 429, 500, 502, 503, 504];\n        if (attempt < maxRetries && retryableStatuses.includes(response.status)) {\n          console.warn(`Retrying request (${attempt + 1}/${maxRetries})...`);\n          await new Promise(resolve => setTimeout(resolve, delayMs * (attempt + 1)));\n          continue;\n        }\n\n        throw apiError;\n      }\n\n      return response;\n    } catch (error) {\n      if (error && typeof error === \"object\" && \"status\" in error) {\n        lastError = error as ApiError;\n      } else {\n        lastError = handleNetworkError(error);\n      }\n\n      if (attempt < maxRetries) {\n        console.warn(`Retrying request (${attempt + 1}/${maxRetries})...`);\n        await new Promise(resolve => setTimeout(resolve, delayMs * (attempt + 1)));\n      }\n    }\n  }\n\n  if (lastError) {\n    handleApiError(lastError);\n    throw lastError;\n  }\n\n  throw new Error(\"Unexpected error in fetchWithRetry\");\n}\n","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\syyun\\Documents\\GitHub\\Routing_ML_251014\\frontend-prediction\\src\\lib\\masterDataMock.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\syyun\\Documents\\GitHub\\Routing_ML_251014\\frontend-prediction\\src\\lib\\routingDataExtractor.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\syyun\\Documents\\GitHub\\Routing_ML_251014\\frontend-prediction\\src\\main.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\syyun\\Documents\\GitHub\\Routing_ML_251014\\frontend-prediction\\src\\services\\alertService.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\syyun\\Documents\\GitHub\\Routing_ML_251014\\frontend-prediction\\src\\services\\exportService.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":238,"column":28,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":238,"endColumn":31,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[6136,6139],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[6136,6139],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import type { DataQualityIssue, DataQualityMetrics } from \"@lib/apiClient\";\nimport jsPDF from \"jspdf\";\nimport autoTable from \"jspdf-autotable\";\nimport Papa from \"papaparse\";\n\n/**\n * Export Service\n * Handles CSV and PDF export functionality for Data Quality UI\n */\n\n// ============================================================================\n// CSV Export\n// ============================================================================\n\nexport interface CSVExportOptions {\n  filename: string;\n  includeHeader?: boolean;\n  separator?: \",\" | \";\" | \"\\t\";\n}\n\n/**\n * Export issues to CSV format\n */\nexport function exportIssuesToCSV(\n  issues: DataQualityIssue[],\n  options: CSVExportOptions = { filename: \"data-quality-issues.csv\" }\n): void {\n  const { filename, includeHeader = true, separator = \",\" } = options;\n\n  // Prepare data for CSV\n  const csvData = issues.map((issue) => ({\n    ID: issue.id,\n    Severity: issue.severity,\n    Type: issue.type,\n    Message: issue.message,\n    \"Affected Records\": issue.affectedRecords,\n    Timestamp: new Date(issue.timestamp).toLocaleString(),\n  }));\n\n  // Convert to CSV\n  const csv = Papa.unparse(csvData, {\n    delimiter: separator,\n    header: includeHeader,\n  });\n\n  // Download file\n  downloadFile(csv, filename, \"text/csv\");\n}\n\n/**\n * Export metrics to CSV format\n */\nexport function exportMetricsToCSV(\n  metrics: DataQualityMetrics,\n  options: CSVExportOptions = { filename: \"data-quality-metrics.csv\" }\n): void {\n  const { filename, includeHeader = true, separator = \",\" } = options;\n\n  // Prepare data for CSV\n  const csvData = [\n    {\n      Metric: \"Completeness\",\n      Value: `${metrics.completeness}%`,\n      Timestamp: metrics.timestamp,\n    },\n    {\n      Metric: \"Consistency\",\n      Value: `${metrics.consistency}%`,\n      Timestamp: metrics.timestamp,\n    },\n    {\n      Metric: \"Validity\",\n      Value: `${metrics.validity}%`,\n      Timestamp: metrics.timestamp,\n    },\n  ];\n\n  // Add trend data if available\n  if (metrics.trends) {\n    csvData.push(\n      {\n        Metric: \"Completeness Trend (last 10)\",\n        Value: metrics.trends.completeness.join(\", \"),\n        Timestamp: metrics.timestamp,\n      },\n      {\n        Metric: \"Consistency Trend (last 10)\",\n        Value: metrics.trends.consistency.join(\", \"),\n        Timestamp: metrics.timestamp,\n      },\n      {\n        Metric: \"Validity Trend (last 10)\",\n        Value: metrics.trends.validity.join(\", \"),\n        Timestamp: metrics.timestamp,\n      }\n    );\n  }\n\n  // Convert to CSV\n  const csv = Papa.unparse(csvData, {\n    delimiter: separator,\n    header: includeHeader,\n  });\n\n  // Download file\n  downloadFile(csv, filename, \"text/csv\");\n}\n\n// ============================================================================\n// PDF Export\n// ============================================================================\n\nexport interface PDFExportOptions {\n  filename: string;\n  title: string;\n  includeTimestamp?: boolean;\n}\n\n/**\n * Export issues to PDF format\n */\nexport function exportIssuesToPDF(\n  issues: DataQualityIssue[],\n  options: PDFExportOptions = {\n    filename: \"data-quality-issues.pdf\",\n    title: \"Data Quality Issues Report\",\n  }\n): void {\n  const { filename, title, includeTimestamp = true } = options;\n\n  // Create PDF\n  const doc = new jsPDF();\n\n  // Add title\n  doc.setFontSize(18);\n  doc.text(title, 14, 20);\n\n  // Add timestamp\n  if (includeTimestamp) {\n    doc.setFontSize(10);\n    doc.setTextColor(100);\n    doc.text(`Generated: ${new Date().toLocaleString()}`, 14, 28);\n  }\n\n  // Add summary\n  doc.setFontSize(12);\n  doc.setTextColor(0);\n  doc.text(`Total Issues: ${issues.length}`, 14, 38);\n\n  const criticalCount = issues.filter((i) => i.severity === \"critical\").length;\n  const warningCount = issues.filter((i) => i.severity === \"warning\").length;\n  const infoCount = issues.filter((i) => i.severity === \"info\").length;\n\n  doc.setFontSize(10);\n  doc.text(`Critical: ${criticalCount}`, 14, 44);\n  doc.text(`Warning: ${warningCount}`, 50, 44);\n  doc.text(`Info: ${infoCount}`, 85, 44);\n\n  // Prepare table data\n  const tableData = issues.map((issue) => [\n    issue.severity,\n    issue.type,\n    issue.message.substring(0, 50) + (issue.message.length > 50 ? \"...\" : \"\"),\n    issue.affectedRecords.toLocaleString(),\n    new Date(issue.timestamp).toLocaleDateString(),\n  ]);\n\n  // Add table\n  autoTable(doc, {\n    startY: 52,\n    head: [[\"Severity\", \"Type\", \"Message\", \"Affected Records\", \"Date\"]],\n    body: tableData,\n    theme: \"striped\",\n    headStyles: { fillColor: [41, 128, 185] },\n    styles: { fontSize: 8, cellPadding: 2 },\n    columnStyles: {\n      0: { cellWidth: 20 },\n      1: { cellWidth: 30 },\n      2: { cellWidth: 70 },\n      3: { cellWidth: 30 },\n      4: { cellWidth: 30 },\n    },\n  });\n\n  // Save PDF\n  doc.save(filename);\n}\n\n/**\n * Export metrics to PDF format\n */\nexport function exportMetricsToPDF(\n  metrics: DataQualityMetrics,\n  options: PDFExportOptions = {\n    filename: \"data-quality-metrics.pdf\",\n    title: \"Data Quality Metrics Report\",\n  }\n): void {\n  const { filename, title, includeTimestamp = true } = options;\n\n  // Create PDF\n  const doc = new jsPDF();\n\n  // Add title\n  doc.setFontSize(18);\n  doc.text(title, 14, 20);\n\n  // Add timestamp\n  if (includeTimestamp) {\n    doc.setFontSize(10);\n    doc.setTextColor(100);\n    doc.text(`Generated: ${new Date().toLocaleString()}`, 14, 28);\n    doc.text(`Data Timestamp: ${metrics.timestamp}`, 14, 34);\n  }\n\n  // Add metrics\n  doc.setFontSize(14);\n  doc.setTextColor(0);\n  doc.text(\"Current Metrics\", 14, 44);\n\n  const metricsData = [\n    [\"Completeness\", `${metrics.completeness}%`, getStatusColor(metrics.completeness)],\n    [\"Consistency\", `${metrics.consistency}%`, getStatusColor(metrics.consistency)],\n    [\"Validity\", `${metrics.validity}%`, getStatusColor(metrics.validity)],\n  ];\n\n  autoTable(doc, {\n    startY: 50,\n    head: [[\"Metric\", \"Value\", \"Status\"]],\n    body: metricsData,\n    theme: \"striped\",\n    headStyles: { fillColor: [41, 128, 185] },\n    styles: { fontSize: 12, cellPadding: 4 },\n  });\n\n  // Add trend section if available\n  if (metrics.trends) {\n    const finalY = (doc as any).lastAutoTable.finalY || 50;\n\n    doc.setFontSize(14);\n    doc.text(\"Historical Trends (Last 10 Data Points)\", 14, finalY + 15);\n\n    const trendsData = [\n      [\"Completeness\", metrics.trends.completeness.join(\", \")],\n      [\"Consistency\", metrics.trends.consistency.join(\", \")],\n      [\"Validity\", metrics.trends.validity.join(\", \")],\n    ];\n\n    autoTable(doc, {\n      startY: finalY + 20,\n      head: [[\"Metric\", \"Trend Values\"]],\n      body: trendsData,\n      theme: \"striped\",\n      headStyles: { fillColor: [41, 128, 185] },\n      styles: { fontSize: 10, cellPadding: 3 },\n    });\n  }\n\n  // Save PDF\n  doc.save(filename);\n}\n\n// ============================================================================\n// Helper Functions\n// ============================================================================\n\n/**\n * Download a file to the user's device\n */\nfunction downloadFile(content: string, filename: string, mimeType: string): void {\n  const blob = new Blob([content], { type: mimeType });\n  const url = URL.createObjectURL(blob);\n  const link = document.createElement(\"a\");\n  link.href = url;\n  link.download = filename;\n  document.body.appendChild(link);\n  link.click();\n  document.body.removeChild(link);\n  URL.revokeObjectURL(url);\n}\n\n/**\n * Get status color description based on metric value\n */\nfunction getStatusColor(value: number): string {\n  if (value >= 95) return \"Excellent\";\n  if (value >= 90) return \"Good\";\n  if (value >= 85) return \"Fair\";\n  if (value >= 75) return \"Poor\";\n  return \"Critical\";\n}\n","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\syyun\\Documents\\GitHub\\Routing_ML_251014\\frontend-prediction\\src\\store\\authStore.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\syyun\\Documents\\GitHub\\Routing_ML_251014\\frontend-prediction\\src\\store\\backgroundSettings.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\syyun\\Documents\\GitHub\\Routing_ML_251014\\frontend-prediction\\src\\store\\routingStore.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\syyun\\Documents\\GitHub\\Routing_ML_251014\\frontend-prediction\\src\\store\\workspaceStore.ts","messages":[{"ruleId":"simple-import-sort/imports","severity":2,"message":"Run autofix to sort these imports!","line":1,"column":1,"nodeType":null,"messageId":"sort","endLine":12,"endColumn":25,"fix":{"range":[0,430],"text":"import type { FeatureWeightsProfile, PredictionResponse } from \"@app-types/routing\";\nimport type { WorkspaceSettingsPayload, WorkspaceSettingsResponse } from \"@lib/apiClient\";\nimport { create } from \"zustand\";\n\n// import { saveWorkspaceSettings } from \"@lib/apiClient\";\nimport {\n  DEFAULT_REFERENCE_MATRIX_COLUMNS,\n  type ReferenceMatrixColumnKey,\n  registerReferenceMatrixPersistence,\n  useRoutingStore,\n} from \"./routingStore\";"}},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'payload' is assigned a value but never used.","line":547,"column":11,"nodeType":"Identifier","messageId":"unusedVar","endLine":547,"endColumn":44}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":1,"fixableWarningCount":0,"source":"import type { FeatureWeightsProfile, PredictionResponse } from \"@app-types/routing\";\nimport type { WorkspaceSettingsPayload, WorkspaceSettingsResponse } from \"@lib/apiClient\";\nimport { create } from \"zustand\";\n\n// import { saveWorkspaceSettings } from \"@lib/apiClient\";\n\nimport {\n  DEFAULT_REFERENCE_MATRIX_COLUMNS,\n  type ReferenceMatrixColumnKey,\n  registerReferenceMatrixPersistence,\n  useRoutingStore,\n} from \"./routingStore\";\n\nexport type LayoutMode = \"desktop\";\nexport type NavigationKey =\n  | \"master-data\"\n  | \"routing\"\n  | \"routing-config\"\n  | \"routing-matrix\"\n  | \"process-groups\"\n  | \"data-output\"\n  | \"algorithm\"\n  | \"algorithm-viz\"\n  | \"training-status\"\n  | \"options\"\n  | \"data-mapping\"\n  | \"data-relationship\"\n  | \"profile-management\"\n  | \"data-quality\"\n  | \"quality-monitor\"\n  | \"training-monitor\"\n  | \"training-settings\"\n  | \"log-viewer\";\n\ntype ExportDestination = \"local\" | \"clipboard\" | \"server\";\n\ninterface ItemSearchState {\n  itemCodes: string[];\n  topK: number;\n  threshold: number;\n  lastRequestedAt?: string;\n}\n\ninterface FeatureProfileSummary {\n  name: string;\n  description?: string | null;\n  weights?: Record<string, number>;\n}\n\ninterface FeatureWeightState {\n  profile: string | null;\n  manualWeights: Record<string, number>;\n  availableProfiles: FeatureProfileSummary[];\n}\n\ninterface ExportProfileState {\n  formats: string[];\n  destination: ExportDestination;\n  withVisualization: boolean;\n  lastSyncAt?: string;\n}\n\nexport interface WorkspaceColumnMappingRow {\n  id: string;\n  scope: string;\n  source: string;\n  target: string;\n}\n\nexport interface WorkspaceOptionsSnapshot {\n  standard: string[];\n  similarity: string[];\n  offlineDatasetPath: string;\n  databaseTargetTable: string;\n  columnMappings: WorkspaceColumnMappingRow[];\n  erpInterface: boolean;\n}\n\ninterface WorkspaceOptionsState {\n  data: WorkspaceOptionsSnapshot;\n  loading: boolean;\n  saving: boolean;\n  dirty: boolean;\n  lastSyncedAt?: string;\n}\n\ninterface SaveWorkspaceOptionsArgs {\n  version?: number;\n  metadata?: WorkspaceSettingsPayload[\"metadata\"];\n  columnMappings?: WorkspaceColumnMappingRow[];\n}\n\nexport interface OutputMappingRow {\n  id: string;\n  source: string;\n  mapped: string;\n  type: string;\n  required: boolean;\n  defaultValue?: string;\n}\n\nexport interface SerializedOutputMappingRow {\n  source: string;\n  mapped: string;\n  type: string;\n  required: boolean;\n  defaultValue?: string;\n}\n\ninterface RoutingSaveState {\n  exportProfile: ExportProfileState;\n  erpInterfaceEnabled: boolean;\n  columnMappings: SerializedOutputMappingRow[];\n}\n\ninterface WorkspaceStoreState {\n  layout: LayoutMode;\n  activeMenu: NavigationKey;\n  itemSearch: ItemSearchState;\n  featureWeights: FeatureWeightState;\n  exportProfile: ExportProfileState;\n  erpInterfaceEnabled: boolean;\n  workspaceOptions: WorkspaceOptionsState;\n  outputMappings: OutputMappingRow[];\n  setLayout: (layout: LayoutMode) => void;\n  referenceMatrixColumns: ReferenceMatrixColumnKey[];\n  setActiveMenu: (menu: NavigationKey) => void;\n  updateItemCodes: (codes: string[]) => void;\n  updateTopK: (value: number) => void;\n  updateThreshold: (value: number) => void;\n  setFeatureWeightProfile: (profile: string | null) => void;\n  setManualWeight: (feature: string, value: number) => void;\n  resetManualWeights: () => void;\n  setAvailableProfiles: (profiles: FeatureProfileSummary[]) => void;\n  setExportFormats: (formats: string[]) => void;\n  toggleExportFormat: (format: string) => void;\n  setExportDestination: (destination: ExportDestination) => void;\n  toggleVisualization: (enabled: boolean) => void;\n  setErpInterfaceEnabled: (enabled: boolean) => void;\n  markExportSynced: () => void;\n  applyPredictionResponse: (response: PredictionResponse) => void;\n  setWorkspaceOptionsLoading: (loading: boolean) => void;\n  setWorkspaceOptionsSnapshot: (snapshot: WorkspaceOptionsSnapshot, options?: { dirty?: boolean; lastSyncedAt?: string }) => void;\n  updateWorkspaceOptions: (\n    patch: Partial<WorkspaceOptionsSnapshot> | ((prev: WorkspaceOptionsSnapshot) => WorkspaceOptionsSnapshot),\n  ) => void;\n  updateWorkspaceColumnMappings: (\n    updater: (rows: WorkspaceColumnMappingRow[]) => WorkspaceColumnMappingRow[],\n  ) => void;\n  setWorkspaceOptionsDirty: (dirty: boolean) => void;\n  saveWorkspaceOptions: (args?: SaveWorkspaceOptionsArgs) => Promise<WorkspaceSettingsResponse>;\n  setReferenceMatrixColumns: (columns: Array<string | ReferenceMatrixColumnKey>) => void;\n  setOutputMappings: (rows: OutputMappingRow[]) => void;\n  updateOutputMappings: (updater: (rows: OutputMappingRow[]) => OutputMappingRow[]) => void;\n  reorderOutputMappings: (fromIndex: number, toIndex: number) => void;\n  clearOutputMappings: () => void;\n  saveRouting: () => RoutingSaveState;\n}\n\nconst DEFAULT_PROFILES: FeatureProfileSummary[] = [\n  { name: \"default\", description: \"Default\" },\n  { name: \"geometry-focus\", description: \"Geometry emphasis\" },\n  { name: \"operation-history\", description: \"Runtime emphasis\" },\n];\n\nconst normalizeFormats = (formats: string[]): string[] => {\n  const unique = new Set<string>();\n  formats.forEach((format) => {\n    if (format) {\n      unique.add(format.toLowerCase());\n    }\n  });\n  return Array.from(unique);\n};\n\nconst toProfileSummary = (profiles: FeatureWeightsProfile[] | undefined): FeatureProfileSummary[] => {\n  if (!profiles || profiles.length === 0) {\n    return DEFAULT_PROFILES;\n  }\n  return profiles.map((profile) => ({\n    name: profile.name,\n    description: profile.description ?? null,\n    weights: profile.weights,\n  }));\n};\n\nconst normalizeReferenceMatrixColumns = (\n  columns: Array<string | ReferenceMatrixColumnKey>,\n): ReferenceMatrixColumnKey[] => {\n  const normalized: ReferenceMatrixColumnKey[] = [];\n  const validColumns = DEFAULT_REFERENCE_MATRIX_COLUMNS as ReadonlyArray<ReferenceMatrixColumnKey>;\n  columns.forEach((column) => {\n    if (typeof column === \"string\") {\n      const match = validColumns.find((candidate) => candidate === column);\n      if (match && !normalized.includes(match)) {\n        normalized.push(match);\n      }\n    } else if (validColumns.includes(column) && !normalized.includes(column)) {\n      normalized.push(column);\n    }\n  });\n  if (normalized.length === 0) {\n    return [...DEFAULT_REFERENCE_MATRIX_COLUMNS];\n  }\n  return normalized;\n};\n\nconst nowIsoString = () => new Date().toISOString();\nconst createDefaultWorkspaceOptions = (): WorkspaceOptionsSnapshot => ({\n  standard: [\"zscore\"],\n  similarity: [\"cosine\", \"profile\"],\n  offlineDatasetPath: \"\",\n  databaseTargetTable: \"\",\n  columnMappings: [],\n  erpInterface: useRoutingStore.getState().erpRequired,\n});\n\nconst createWorkspaceOptionsState = (): WorkspaceOptionsState => ({\n  data: createDefaultWorkspaceOptions(),\n  loading: false,\n  saving: false,\n  dirty: false,\n  lastSyncedAt: undefined,\n});\nconst createMappingRowId = () => {\n  if (typeof crypto !== \"undefined\" && \"randomUUID\" in crypto) {\n    return crypto.randomUUID();\n  }\n  return `mapping-${Date.now().toString(36)}-${Math.random().toString(36).slice(2, 10)}`;\n};\n\nexport const useWorkspaceStore = create<WorkspaceStoreState>()((set, get) => ({\n  layout: \"desktop\",\n  activeMenu: \"routing\",\n  itemSearch: {\n    itemCodes: [\"ITEM-001\"],\n    topK: 10,\n    threshold: 0.3,\n    lastRequestedAt: undefined,\n  },\n  featureWeights: {\n    profile: \"geometry-focus\",\n    manualWeights: {},\n    availableProfiles: DEFAULT_PROFILES,\n  },\n  exportProfile: {\n    formats: [\"csv\", \"excel\"],\n    destination: \"local\",\n    withVisualization: false,\n    lastSyncAt: undefined,\n  },\n  erpInterfaceEnabled: useRoutingStore.getState().erpRequired,\n  workspaceOptions: createWorkspaceOptionsState(),\n  referenceMatrixColumns: [...DEFAULT_REFERENCE_MATRIX_COLUMNS],\n  outputMappings: [],\n  setLayout: (layout) => set({ layout }),\n  setActiveMenu: (menu) => set({ activeMenu: menu }),\n  updateItemCodes: (codes) =>\n    set((state) => ({\n      itemSearch: {\n        ...state.itemSearch,\n        itemCodes: codes,\n      },\n    })),\n  updateTopK: (value) =>\n    set((state) => ({\n      itemSearch: {\n        ...state.itemSearch,\n        topK: value,\n      },\n    })),\n  updateThreshold: (value) =>\n    set((state) => ({\n      itemSearch: {\n        ...state.itemSearch,\n        threshold: value,\n      },\n    })),\n  setFeatureWeightProfile: (profile) =>\n    set((state) => ({\n      featureWeights: {\n        ...state.featureWeights,\n        profile,\n        manualWeights: profile === \"custom\" ? state.featureWeights.manualWeights : {},\n      },\n    })),\n  setManualWeight: (feature, value) =>\n    set((state) => ({\n      featureWeights: {\n        profile: \"custom\",\n        availableProfiles: state.featureWeights.availableProfiles,\n        manualWeights: {\n          ...state.featureWeights.manualWeights,\n          [feature]: value,\n        },\n      },\n    })),\n  resetManualWeights: () =>\n    set((state) => ({\n      featureWeights: {\n        ...state.featureWeights,\n        profile: \"default\",\n        manualWeights: {},\n      },\n    })),\n  setAvailableProfiles: (profiles) =>\n    set((state) => {\n      const currentProfile = state.featureWeights.profile;\n      const catalog = profiles.length > 0 ? profiles : DEFAULT_PROFILES;\n      const profileNames = catalog.map((profile) => profile.name);\n      const keepCurrent = !currentProfile || currentProfile === \"custom\" || profileNames.includes(currentProfile);\n      const nextProfile = keepCurrent ? currentProfile : catalog[0]?.name ?? null;\n      return {\n        featureWeights: {\n          ...state.featureWeights,\n          profile: nextProfile,\n          availableProfiles: catalog,\n        },\n      };\n    }),\n  setExportFormats: (formats) =>\n    set((state) => ({\n      exportProfile: {\n        ...state.exportProfile,\n        formats: normalizeFormats(formats),\n      },\n    })),\n  toggleExportFormat: (format) =>\n    set((state) => {\n      const normalized = format.toLowerCase();\n      const formats = new Set(state.exportProfile.formats.map((item) => item.toLowerCase()));\n      if (formats.has(normalized)) {\n        formats.delete(normalized);\n      } else {\n        formats.add(normalized);\n      }\n      return {\n        exportProfile: {\n          ...state.exportProfile,\n          formats: Array.from(formats),\n        },\n      };\n    }),\n  setExportDestination: (destination) =>\n    set((state) => ({\n      exportProfile: {\n        ...state.exportProfile,\n        destination,\n      },\n    })),\n  toggleVisualization: (enabled) =>\n    set((state) => ({\n      exportProfile: {\n        ...state.exportProfile,\n        withVisualization: enabled,\n      },\n    })),\n  setErpInterfaceEnabled: (enabled) => {\n    useRoutingStore.getState().setERPRequired(enabled);\n    set((state) => ({\n      erpInterfaceEnabled: enabled,\n      workspaceOptions: {\n        ...state.workspaceOptions,\n        data:\n          state.workspaceOptions.data.erpInterface === enabled\n            ? state.workspaceOptions.data\n            : { ...state.workspaceOptions.data, erpInterface: enabled },\n        dirty:\n          state.workspaceOptions.dirty || state.workspaceOptions.data.erpInterface !== enabled,\n      },\n    }));\n  },\n  markExportSynced: () =>\n    set((state) => ({\n      exportProfile: {\n        ...state.exportProfile,\n        lastSyncAt: nowIsoString(),\n      },\n    })),\n  setReferenceMatrixColumns: (columns) =>\n    set((state) => {\n      const nextColumns = normalizeReferenceMatrixColumns(columns);\n      const current = state.referenceMatrixColumns;\n      if (\n        nextColumns.length === current.length &&\n        nextColumns.every((column, index) => column === current[index])\n      ) {\n        return state;\n      }\n      useRoutingStore.getState().hydrateReferenceMatrixColumns(nextColumns);\n      return { referenceMatrixColumns: nextColumns };\n    }),\n  setOutputMappings: (rows) =>\n    set({\n      outputMappings: rows.map((row) => ({\n        id: row.id || createMappingRowId(),\n        source: row.source,\n        mapped: row.mapped,\n        type: row.type,\n        required: row.required,\n        defaultValue: row.defaultValue ?? \"\",\n      })),\n    }),\n  updateOutputMappings: (updater) =>\n    set((state) => ({\n      outputMappings: updater(state.outputMappings).map((row) => ({\n        id: row.id || createMappingRowId(),\n        source: row.source,\n        mapped: row.mapped,\n        type: row.type,\n        required: row.required,\n        defaultValue: row.defaultValue ?? \"\",\n      })),\n    })),\n  reorderOutputMappings: (fromIndex, toIndex) =>\n    set((state) => {\n      if (fromIndex === toIndex) {\n        return state;\n      }\n      const next = [...state.outputMappings];\n      if (fromIndex < 0 || fromIndex >= next.length) {\n        return state;\n      }\n      const clampedIndex = Math.max(0, Math.min(toIndex, next.length - 1));\n      const [moved] = next.splice(fromIndex, 1);\n      if (!moved) {\n        return state;\n      }\n      next.splice(clampedIndex, 0, moved);\n      return { outputMappings: next };\n    }),\n  clearOutputMappings: () => set({ outputMappings: [] }),\n  saveRouting: () => {\n    const state = get();\n    const columnMappings: SerializedOutputMappingRow[] = state.outputMappings\n      .map((row) => ({\n        source: row.source.trim(),\n        mapped: (row.mapped ?? \"\").trim() || row.source.trim(),\n        type: row.type.trim() || \"string\",\n        required: Boolean(row.required),\n        defaultValue: row.defaultValue?.trim() || undefined,\n      }))\n      .filter((row) => row.mapped !== \"\" && (row.source !== \"\" || (row.defaultValue ?? \"\") !== \"\"));\n    return {\n      exportProfile: state.exportProfile,\n      erpInterfaceEnabled: state.erpInterfaceEnabled,\n      columnMappings,\n    };\n  },\n  applyPredictionResponse: (response) => {\n    useRoutingStore.getState().loadRecommendations(response);\n    const generatedAt = response.metrics.generated_at ?? nowIsoString();\n    const availableProfiles = toProfileSummary(response.metrics.feature_weights?.profiles);\n    set((state) => ({\n      itemSearch: {\n        ...state.itemSearch,\n        lastRequestedAt: generatedAt,\n      },\n      featureWeights: {\n        ...state.featureWeights,\n        availableProfiles,\n        profile:\n          state.featureWeights.profile === \"custom\" || !state.featureWeights.profile\n            ? state.featureWeights.profile\n            : availableProfiles.some((profile) => profile.name === state.featureWeights.profile)\n              ? state.featureWeights.profile\n              : availableProfiles[0]?.name ?? state.featureWeights.profile,\n      },\n      exportProfile: {\n        ...state.exportProfile,\n        withVisualization: Boolean(response.metrics.visualization),\n        lastSyncAt: generatedAt,\n      },\n    }));\n  },\n  setWorkspaceOptionsLoading: (loading) =>\n    set((state) => ({\n      workspaceOptions: {\n        ...state.workspaceOptions,\n        loading,\n      },\n    })),\n  setWorkspaceOptionsSnapshot: (snapshot, options) => {\n    useRoutingStore.getState().setERPRequired(snapshot.erpInterface);\n    set((state) => ({\n      erpInterfaceEnabled: snapshot.erpInterface,\n      workspaceOptions: {\n        ...state.workspaceOptions,\n        data: snapshot,\n        loading: false,\n        saving: false,\n        dirty: options?.dirty ?? state.workspaceOptions.dirty,\n        lastSyncedAt: options?.lastSyncedAt ?? state.workspaceOptions.lastSyncedAt,\n      },\n    }));\n  },\n  updateWorkspaceOptions: (patch) =>\n    set((state) => {\n      const current = state.workspaceOptions.data;\n      const next = typeof patch === \"function\" ? patch(current) : { ...current, ...patch };\n      return {\n        workspaceOptions: {\n          ...state.workspaceOptions,\n          data: next,\n          dirty: true,\n        },\n      };\n    }),\n  updateWorkspaceColumnMappings: (updater) =>\n    set((state) => ({\n      workspaceOptions: {\n        ...state.workspaceOptions,\n        data: {\n          ...state.workspaceOptions.data,\n          columnMappings: updater(state.workspaceOptions.data.columnMappings),\n        },\n        dirty: true,\n      },\n    })),\n  setWorkspaceOptionsDirty: (dirty) =>\n    set((state) => ({\n      workspaceOptions: {\n        ...state.workspaceOptions,\n        dirty,\n      },\n    })),\n  saveWorkspaceOptions: async (args) => {\n    const current = get().workspaceOptions.data;\n    const standard = Array.from(new Set(current.standard.map((value) => value.trim()).filter(Boolean)));\n    const similarity = Array.from(new Set(current.similarity.map((value) => value.trim()).filter(Boolean)));\n    const offlineDatasetPath = current.offlineDatasetPath.trim();\n    const databaseTargetTable = current.databaseTargetTable.trim();\n    const mappingsSource = args?.columnMappings ?? current.columnMappings;\n    const normalizedMappings = mappingsSource.map((row) => ({\n      id: row.id,\n      scope: row.scope.trim(),\n      source: row.source.trim(),\n      target: row.target.trim(),\n    }));\n    const payloadMappings = normalizedMappings\n      .map((row) => ({\n        scope: row.scope,\n        source: row.source,\n        target: row.target,\n      }))\n      .filter((row) => row.scope || row.source || row.target);\n    const payload: WorkspaceSettingsPayload = {\n      version: args?.version ?? Date.now(),\n      options: {\n        standard,\n        similarity,\n        offline_dataset_path: offlineDatasetPath,\n        database_target_table: databaseTargetTable || null,\n        erp_interface: current.erpInterface,\n        column_mappings: payloadMappings,\n      },\n      access: {\n        path: offlineDatasetPath || null,\n        table: databaseTargetTable || null,\n      },\n      metadata: args?.metadata,\n    };\n    set((state) => ({\n      workspaceOptions: {\n        ...state.workspaceOptions,\n        saving: true,\n      },\n    }));\n    try {\n      // API function removed - workspace settings feature not used\n      const response = {} as WorkspaceSettingsResponse;\n      // const response = await saveWorkspaceSettings(payload);\n      useRoutingStore.getState().setERPRequired(current.erpInterface);\n      set((state) => ({\n        erpInterfaceEnabled: current.erpInterface,\n        workspaceOptions: {\n          ...state.workspaceOptions,\n          data: {\n            ...state.workspaceOptions.data,\n            standard,\n            similarity,\n            offlineDatasetPath,\n            databaseTargetTable,\n            columnMappings: normalizedMappings,\n            erpInterface: current.erpInterface,\n          },\n          saving: false,\n          dirty: false,\n          lastSyncedAt: response.updated_at ?? nowIsoString(),\n        },\n      }));\n      return response;\n    } catch (error) {\n      set((state) => ({\n        workspaceOptions: {\n          ...state.workspaceOptions,\n          saving: false,\n        },\n      }));\n      throw error;\n    }\n  },\n}));\n\nregisterReferenceMatrixPersistence((columns) => {\n  useWorkspaceStore.setState((current) => {\n    if (\n      current.referenceMatrixColumns.length === columns.length &&\n      current.referenceMatrixColumns.every((column, index) => column === columns[index])\n    ) {\n      return current;\n    }\n    return { referenceMatrixColumns: columns };\n  });\n});\n\nuseRoutingStore.getState().hydrateReferenceMatrixColumns(useWorkspaceStore.getState().referenceMatrixColumns);\n\nuseRoutingStore.subscribe(\n  (state) => {\n    const erpRequired = state.erpRequired;\n    useWorkspaceStore.setState((current) => ({\n      erpInterfaceEnabled: erpRequired,\n      workspaceOptions: {\n        ...current.workspaceOptions,\n        data:\n          current.workspaceOptions.data.erpInterface === erpRequired\n            ? current.workspaceOptions.data\n            : { ...current.workspaceOptions.data, erpInterface: erpRequired },\n      },\n    }));\n  }\n);\n\nuseRoutingStore.subscribe(\n  (state) => {\n    const codes = state.sourceItemCodes;\n    if (codes && codes.length > 0) {\n      useWorkspaceStore.setState((current) => ({\n        itemSearch: {\n          ...current.itemSearch,\n          itemCodes: codes,\n        },\n      }));\n    }\n  }\n);\n","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\syyun\\Documents\\GitHub\\Routing_ML_251014\\frontend-prediction\\src\\styles\\responsive.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\syyun\\Documents\\GitHub\\Routing_ML_251014\\frontend-prediction\\src\\styles\\theme.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'baseVariableMap' is assigned a value but never used.","line":208,"column":7,"nodeType":"Identifier","messageId":"unusedVar","endLine":208,"endColumn":46}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import type { CSSProperties } from \"react\";\n\nexport type LayoutTier = \"desktop\" | \"laptop\" | \"tablet\" | \"mobile\";\n\ninterface GradientTokens {\n  start: string;\n  end: string;\n  mid: string;\n}\n\ninterface BrandTokens {\n  primary: string;\n  primaryGlow: string;\n  primaryForeground: string;\n  secondary: string;\n  secondaryForeground: string;\n}\n\ninterface AccentTokens {\n  base: string;\n  hover: string;\n  strong: string;\n  subtle: string;\n}\n\ninterface SurfaceTokens {\n  base: string;\n  raised: string;\n  background: string;\n  foreground: string;\n  card: string;\n  cardForeground: string;\n  popover: string;\n  popoverForeground: string;\n  menu: string;\n  overlay: string;\n  border: string;\n  borderStrong: string;\n  input: string;\n  ring: string;\n}\n\ninterface TypographyTokens {\n  family: string;\n  headingColor: string;\n  bodyColor: string;\n  mutedColor: string;\n  emphasisColor: string;\n}\n\ninterface NavigationTokens {\n  default: string;\n  hover: string;\n  active: string;\n}\n\ninterface StatusTokens {\n  destructive: string;\n  destructiveForeground: string;\n}\n\ninterface ChartTokens {\n  primary: string;\n  secondary: string;\n  tertiary: string;\n  quaternary: string;\n  quinary: string;\n}\n\ninterface MotionTokens {\n  durationXS: string;\n  durationSM: string;\n  durationLG: string;\n  easeOut: string;\n}\n\ninterface ShadowTokens {\n  resting: string;\n  hover: string;\n  focus: string;\n  glow: string;\n  elegant: string;\n  raised: string;\n}\n\ninterface TransitionTokens {\n  emphasis: string;\n  lift: string;\n  glow: string;\n  smooth: string;\n}\n\ninterface LayoutTokens {\n  maxWidth: string;\n  radius: string;\n  columnGap: string;\n  workspaceColumns: string;\n}\n\nexport interface RoutingMLTheme {\n  gradient: GradientTokens;\n  brand: BrandTokens;\n  accent: AccentTokens;\n  surface: SurfaceTokens;\n  typography: TypographyTokens;\n  navigation: NavigationTokens;\n  statuses: StatusTokens;\n  charts: ChartTokens;\n  motion: MotionTokens;\n  shadows: ShadowTokens;\n  transitions: TransitionTokens;\n  layout: LayoutTokens;\n}\n\nconst hsl = (value: string) => `hsl(${value})`;\nconst withAlpha = (value: string, alpha: number) => `hsl(${value} / ${alpha})`;\n\nexport const pastelSkyTheme: RoutingMLTheme = {\n  gradient: {\n    start: \"195 85% 72%\",\n    mid: \"140 65% 75%\",\n    end: \"195 45% 92%\",\n  },\n  brand: {\n    primary: \"195 100% 33%\",\n    primaryGlow: \"195 100% 45%\",\n    primaryForeground: \"0 0% 100%\",\n    secondary: \"188 82% 47%\",\n    secondaryForeground: \"0 0% 100%\",\n  },\n  accent: {\n    base: \"188 82% 47%\",\n    hover: \"195 100% 45%\",\n    strong: \"195 100% 33%\",\n    subtle: \"195 85% 72%\",\n  },\n  surface: {\n    base: \"195 45% 98%\",\n    raised: \"0 0% 100%\",\n    background: \"195 45% 98%\",\n    foreground: \"210 45% 20%\",\n    card: \"0 0% 100%\",\n    cardForeground: \"210 45% 20%\",\n    popover: \"0 0% 100%\",\n    popoverForeground: \"210 45% 20%\",\n    menu: \"195 45% 96%\",\n    overlay: \"195 45% 92%\",\n    border: \"195 30% 85%\",\n    borderStrong: \"195 30% 78%\",\n    input: \"195 30% 95%\",\n    ring: \"188 82% 47%\",\n  },\n  typography: {\n    family: \"'Inter', 'Pretendard', 'Segoe UI', sans-serif\",\n    headingColor: \"210 45% 18%\",\n    bodyColor: \"210 45% 22%\",\n    mutedColor: \"210 25% 45%\",\n    emphasisColor: \"210 60% 15%\",\n  },\n  navigation: {\n    default: \"210 40% 25%\",\n    hover: \"210 60% 15%\",\n    active: \"195 100% 18%\",\n  },\n  statuses: {\n    destructive: \"0 84.2% 60.2%\",\n    destructiveForeground: \"0 0% 98%\",\n  },\n  charts: {\n    primary: \"195 100% 33%\",\n    secondary: \"188 82% 47%\",\n    tertiary: \"140 65% 45%\",\n    quaternary: \"195 85% 72%\",\n    quinary: \"210 45% 35%\",\n  },\n  motion: {\n    durationXS: \"120ms\",\n    durationSM: \"180ms\",\n    durationLG: \"320ms\",\n    easeOut: \"cubic-bezier(0.22, 0.61, 0.36, 1)\",\n  },\n  shadows: {\n    resting: `0 8px 20px ${withAlpha(\"195 100% 33%\", 0.12)}`,\n    hover: `0 12px 32px ${withAlpha(\"195 100% 33%\", 0.18)}`,\n    focus: `0 0 0 3px ${withAlpha(\"188 82% 47%\", 0.35)}`,\n    glow: `0 0 40px ${withAlpha(\"195 100% 45%\", 0.35)}`,\n    elegant: `0 10px 30px ${withAlpha(\"195 100% 33%\", 0.3)}`,\n    raised: `0 12px 28px ${withAlpha(\"195 100% 33%\", 0.16)}`,\n  },\n  transitions: {\n    emphasis: \"background-color 0.18s ease, color 0.18s ease\",\n    lift: \"transform 0.18s ease, box-shadow 0.2s ease\",\n    glow: \"box-shadow 0.25s ease\",\n    smooth: \"all 0.3s cubic-bezier(0.4, 0, 0.2, 1)\",\n  },\n  layout: {\n    maxWidth: \"1200px\",\n    radius: \"0.75rem\",\n    columnGap: \"1.5rem\",\n    workspaceColumns: \"20% 60% 20%\",\n  },\n};\n\nfunction createVariableMap(theme: RoutingMLTheme): Record<string, string> {\n  const borderGradient = `linear-gradient(135deg, ${hsl(theme.brand.primary)} 0%, ${hsl(\n    theme.brand.primaryGlow\n  )} 45%, ${hsl(theme.brand.secondary)} 100%)`;\nconst baseVariableMap: Record<string, string> = {\n  \"--gradient-start\": pastelSkyTheme.gradient.start,\n  \"--gradient-mid\": pastelSkyTheme.gradient.mid,\n  \"--gradient-end\": pastelSkyTheme.gradient.end,\n  \"--surface\": pastelSkyTheme.surface.base,\n  \"--surface-card\": pastelSkyTheme.surface.card,\n  \"--surface-menu\": pastelSkyTheme.surface.menu,\n  \"--surface-overlay\": pastelSkyTheme.surface.overlay,\n  \"--border\": pastelSkyTheme.surface.border,\n  \"--border-strong\": pastelSkyTheme.surface.borderStrong,\n  \"--accent\": pastelSkyTheme.accent.base,\n  \"--accent-hover\": pastelSkyTheme.accent.hover,\n  \"--accent-strong\": pastelSkyTheme.accent.strong,\n  \"--accent-soft\": pastelSkyTheme.accent.subtle,\n  \"--text-primary\": pastelSkyTheme.typography.bodyColor,\n  \"--text-heading\": pastelSkyTheme.typography.headingColor,\n  \"--text-muted\": pastelSkyTheme.typography.mutedColor,\n  \"--text-emphasis\": pastelSkyTheme.typography.emphasisColor,\n  \"--shadow-resting\": pastelSkyTheme.shadows.resting,\n  \"--shadow-hover\": pastelSkyTheme.shadows.hover,\n  \"--shadow-focus\": pastelSkyTheme.shadows.focus,\n  \"--transition-emphasis\": pastelSkyTheme.transitions.emphasis,\n  \"--transition-lift\": pastelSkyTheme.transitions.lift,\n  \"--transition-glow\": pastelSkyTheme.transitions.glow,\n  \"--layout-max-width\": pastelSkyTheme.layout.maxWidth,\n  \"--layout-column-gap\": pastelSkyTheme.layout.columnGap,\n  \"--layout-radius\": pastelSkyTheme.layout.radius,\n  \"--layout-workspace-columns\": pastelSkyTheme.layout.workspaceColumns,\n};\n\n  return {\n    \"--primary\": hsl(theme.brand.primary),\n    \"--primary-glow\": hsl(theme.brand.primaryGlow),\n    \"--primary-foreground\": hsl(theme.brand.primaryForeground),\n    \"--secondary\": hsl(theme.brand.secondary),\n    \"--secondary-foreground\": hsl(theme.brand.secondaryForeground),\n    \"--gradient-sky-start\": theme.gradient.start,\n    \"--gradient-sky-mid\": theme.gradient.mid,\n    \"--gradient-sky-end\": theme.gradient.end,\n    \"--gradient-start\": hsl(theme.gradient.start),\n    \"--gradient-mid\": hsl(theme.gradient.mid),\n    \"--gradient-end\": hsl(theme.gradient.end),\n    \"--surface-base\": theme.surface.base,\n    \"--surface-raised\": theme.surface.raised,\n    \"--surface\": hsl(theme.surface.base),\n    \"--surface-card\": hsl(theme.surface.card),\n    \"--card\": hsl(theme.surface.card),\n    \"--card-foreground\": hsl(theme.surface.cardForeground),\n    \"--popover\": hsl(theme.surface.popover),\n    \"--popover-foreground\": hsl(theme.surface.popoverForeground),\n    \"--surface-menu\": hsl(theme.surface.menu),\n    \"--surface-overlay\": hsl(theme.surface.overlay),\n    \"--background\": hsl(theme.surface.background),\n    \"--foreground\": hsl(theme.surface.foreground),\n    \"--border\": hsl(theme.surface.border),\n    \"--border-strong\": hsl(theme.surface.borderStrong),\n    \"--accent\": hsl(theme.accent.base),\n    \"--accent-hover\": hsl(theme.accent.hover),\n    \"--accent-strong\": hsl(theme.accent.strong),\n    \"--accent-soft\": hsl(theme.accent.subtle),\n    \"--text-primary\": hsl(theme.typography.bodyColor),\n    \"--text-heading\": hsl(theme.typography.headingColor),\n    \"--text-muted\": hsl(theme.typography.mutedColor),\n    \"--text-muted-strong\": hsl(theme.typography.mutedColor),\n    \"--text-emphasis\": hsl(theme.typography.emphasisColor),\n    \"--nav-default\": hsl(theme.navigation.default),\n    \"--nav-hover\": hsl(theme.navigation.hover),\n    \"--nav-active\": hsl(theme.navigation.active),\n    \"--input\": hsl(theme.surface.input),\n    \"--ring\": hsl(theme.surface.ring),\n    \"--destructive\": hsl(theme.statuses.destructive),\n    \"--destructive-foreground\": hsl(theme.statuses.destructiveForeground),\n    \"--chart-1\": hsl(theme.charts.primary),\n    \"--chart-2\": hsl(theme.charts.secondary),\n    \"--chart-3\": hsl(theme.charts.tertiary),\n    \"--chart-4\": hsl(theme.charts.quaternary),\n    \"--chart-5\": hsl(theme.charts.quinary),\n    \"--motion-duration-xs\": theme.motion.durationXS,\n    \"--motion-duration-sm\": theme.motion.durationSM,\n    \"--motion-duration-lg\": theme.motion.durationLG,\n    \"--motion-ease-out\": theme.motion.easeOut,\n    \"--shadow-elegant\": theme.shadows.elegant,\n    \"--shadow-glow\": theme.shadows.glow,\n    \"--shadow-raised\": theme.shadows.raised,\n    \"--shadow-resting\": theme.shadows.resting,\n    \"--shadow-hover\": theme.shadows.hover,\n    \"--shadow-focus\": theme.shadows.focus,\n    \"--transition-emphasis\": theme.transitions.emphasis,\n    \"--transition-lift\": theme.transitions.lift,\n    \"--transition-glow\": theme.transitions.glow,\n    \"--transition-smooth\": theme.transitions.smooth,\n    \"--layout-max-width\": theme.layout.maxWidth,\n    \"--layout-column-gap\": theme.layout.columnGap,\n    \"--layout-radius\": theme.layout.radius,\n    \"--radius\": theme.layout.radius,\n    \"--glass-blur\": \"18px\",\n    \"--border-gradient\": borderGradient,\n  };\n}\n\nconst baseVariableMap = createVariableMap(pastelSkyTheme);\n\nexport function applyTheme(root?: HTMLElement | null, theme: RoutingMLTheme = pastelSkyTheme): void {\n  if (typeof document === \"undefined\") {\n    return;\n  }\n\n  const target = root ?? document.documentElement;\n  const variableMap = {\n    ...baseVariableMap,\n    ...createVariableMap(theme),\n    \"--layout-workspace-columns\": theme.layout.workspaceColumns,\n  };\n\n  Object.entries(variableMap).forEach(([prop, value]) => {\n    target.style.setProperty(prop, value);\n  });\n\n  target.style.setProperty(\"--font-family\", theme.typography.family);\n}\n\nexport const cardHoverStyle: CSSProperties = {\n  transition: pastelSkyTheme.transitions.lift,\n  boxShadow: pastelSkyTheme.shadows.resting,\n};\n\nexport const hoverElevationStyle: CSSProperties = {\n  transition: pastelSkyTheme.transitions.lift,\n  boxShadow: pastelSkyTheme.shadows.hover,\n};\n\nexport const focusHaloStyle: CSSProperties = {\n  transition: pastelSkyTheme.transitions.glow,\n  boxShadow: pastelSkyTheme.shadows.focus,\n};\n","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\syyun\\Documents\\GitHub\\Routing_ML_251014\\frontend-prediction\\src\\types\\alerts.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\syyun\\Documents\\GitHub\\Routing_ML_251014\\frontend-prediction\\src\\types\\auth.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\syyun\\Documents\\GitHub\\Routing_ML_251014\\frontend-prediction\\src\\types\\index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\syyun\\Documents\\GitHub\\Routing_ML_251014\\frontend-prediction\\src\\types\\masterData.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\syyun\\Documents\\GitHub\\Routing_ML_251014\\frontend-prediction\\src\\types\\routing.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\syyun\\Documents\\GitHub\\Routing_ML_251014\\frontend-prediction\\src\\types\\training.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\syyun\\Documents\\GitHub\\Routing_ML_251014\\frontend-prediction\\src\\types\\workflow.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\syyun\\Documents\\GitHub\\Routing_ML_251014\\frontend-prediction\\src\\utils\\erpViewerUrl.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\syyun\\Documents\\GitHub\\Routing_ML_251014\\frontend-prediction\\src\\vite-env.d.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]}]