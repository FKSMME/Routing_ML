# ============================================================================
# PostgreSQL 14 + pgAdmin 4 Docker Compose
# ============================================================================
# Purpose: Development and Staging PostgreSQL environment
# Usage:
#   docker-compose up -d          # Start services
#   docker-compose down           # Stop services
#   docker-compose logs -f postgres  # View logs
# ============================================================================

version: '3.8'

services:
  # ==========================================================================
  # PostgreSQL 14
  # ==========================================================================
  postgres:
    image: postgres:14-alpine
    container_name: routing_ml_postgres
    restart: unless-stopped

    environment:
      POSTGRES_USER: routing_admin
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-routing_secure_password_2025}
      POSTGRES_DB: routing_ml
      POSTGRES_INITDB_ARGS: "--encoding=UTF8 --locale=en_US.UTF-8"
      TZ: Asia/Seoul

    ports:
      - "5432:5432"

    volumes:
      # PostgreSQL 데이터 영구 저장
      - postgres_data:/var/lib/postgresql/data

      # 초기 스키마 자동 실행
      - ./schema.sql:/docker-entrypoint-initdb.d/01-schema.sql

      # 추가 초기화 스크립트 (선택)
      # - ./init.sql:/docker-entrypoint-initdb.d/02-init.sql

    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U routing_admin -d routing_ml"]
      interval: 10s
      timeout: 5s
      retries: 5

    networks:
      - routing_network

    # 성능 튜닝 (선택)
    command:
      - "postgres"
      - "-c"
      - "shared_buffers=256MB"
      - "-c"
      - "effective_cache_size=1GB"
      - "-c"
      - "maintenance_work_mem=64MB"
      - "-c"
      - "checkpoint_completion_target=0.9"
      - "-c"
      - "wal_buffers=16MB"
      - "-c"
      - "default_statistics_target=100"
      - "-c"
      - "random_page_cost=1.1"
      - "-c"
      - "effective_io_concurrency=200"
      - "-c"
      - "work_mem=4MB"
      - "-c"
      - "min_wal_size=1GB"
      - "-c"
      - "max_wal_size=4GB"
      - "-c"
      - "max_connections=200"

  # ==========================================================================
  # pgAdmin 4 (Web UI)
  # ==========================================================================
  pgadmin:
    image: dpage/pgadmin4:latest
    container_name: routing_ml_pgadmin
    restart: unless-stopped

    environment:
      PGADMIN_DEFAULT_EMAIL: ${PGADMIN_EMAIL:-admin@routing.local}
      PGADMIN_DEFAULT_PASSWORD: ${PGADMIN_PASSWORD:-admin_password_2025}
      PGADMIN_CONFIG_SERVER_MODE: 'False'
      PGADMIN_CONFIG_MASTER_PASSWORD_REQUIRED: 'False'

    ports:
      - "5050:80"

    volumes:
      # pgAdmin 설정 영구 저장
      - pgadmin_data:/var/lib/pgadmin

      # 서버 자동 등록 설정 (선택)
      - ./pgadmin_servers.json:/pgadmin4/servers.json

    depends_on:
      postgres:
        condition: service_healthy

    networks:
      - routing_network

  # ==========================================================================
  # Redis (선택 - 캐싱용)
  # ==========================================================================
  redis:
    image: redis:7-alpine
    container_name: routing_ml_redis
    restart: unless-stopped

    ports:
      - "6379:6379"

    volumes:
      - redis_data:/data

    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD:-redis_password_2025}

    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 3s
      retries: 5

    networks:
      - routing_network

  # ==========================================================================
  # Prometheus (선택 - 모니터링용)
  # ==========================================================================
  # prometheus:
  #   image: prom/prometheus:latest
  #   container_name: routing_ml_prometheus
  #   restart: unless-stopped
  #
  #   ports:
  #     - "9090:9090"
  #
  #   volumes:
  #     - ./prometheus.yml:/etc/prometheus/prometheus.yml
  #     - prometheus_data:/prometheus
  #
  #   command:
  #     - '--config.file=/etc/prometheus/prometheus.yml'
  #     - '--storage.tsdb.path=/prometheus'
  #
  #   networks:
  #     - routing_network

  # ==========================================================================
  # Grafana (선택 - 대시보드용)
  # ==========================================================================
  # grafana:
  #   image: grafana/grafana:latest
  #   container_name: routing_ml_grafana
  #   restart: unless-stopped
  #
  #   ports:
  #     - "3000:3000"
  #
  #   environment:
  #     GF_SECURITY_ADMIN_PASSWORD: ${GRAFANA_PASSWORD:-admin_password_2025}
  #
  #   volumes:
  #     - grafana_data:/var/lib/grafana
  #
  #   depends_on:
  #     - prometheus
  #
  #   networks:
  #     - routing_network

# ============================================================================
# Volumes
# ============================================================================
volumes:
  postgres_data:
    driver: local
  pgadmin_data:
    driver: local
  redis_data:
    driver: local
  # prometheus_data:
  #   driver: local
  # grafana_data:
  #   driver: local

# ============================================================================
# Networks
# ============================================================================
networks:
  routing_network:
    driver: bridge
