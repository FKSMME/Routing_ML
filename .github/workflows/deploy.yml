name: Deploy

on:
  workflow_run:
    workflows: ["Build and Push Docker Images"]
    types:
      - completed
  workflow_dispatch:
    inputs:
      environment:
        description: 'Deployment environment'
        required: true
        default: 'staging'
        type: choice
        options:
          - staging
          - production

jobs:
  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    if: github.event.inputs.environment == 'staging' || (github.event.workflow_run.conclusion == 'success' && github.ref == 'refs/heads/develop')
    environment:
      name: staging
      url: https://staging.routing-ml.example.com

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up SSH
        uses: webfactory/ssh-agent@v0.8.0
        with:
          ssh-private-key: ${{ secrets.STAGING_SSH_KEY }}

      - name: Deploy to staging server
        run: |
          ssh -o StrictHostKeyChecking=no ${{ secrets.STAGING_USER }}@${{ secrets.STAGING_HOST }} << 'EOF'
            cd /opt/routing-ml
            git pull origin develop
            docker-compose pull
            docker-compose up -d
            docker-compose logs --tail=100
          EOF

      - name: Health check
        run: |
          sleep 30
          curl -f https://staging.routing-ml.example.com/api/health || exit 1

      - name: Notify deployment
        uses: slackapi/slack-github-action@v1.24.0
        with:
          payload: |
            {
              "text": "✅ Staging deployment successful",
              "blocks": [
                {
                  "type": "section",
                  "text": {
                    "type": "mrkdwn",
                    "text": "*Staging Deployment*\n\nCommit: ${{ github.sha }}\nBranch: ${{ github.ref }}\nStatus: Success"
                  }
                }
              ]
            }
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    if: github.event.inputs.environment == 'production' || startsWith(github.ref, 'refs/tags/v')
    environment:
      name: production
      url: https://routing-ml.example.com

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up SSH
        uses: webfactory/ssh-agent@v0.8.0
        with:
          ssh-private-key: ${{ secrets.PRODUCTION_SSH_KEY }}

      - name: Backup current version
        run: |
          ssh -o StrictHostKeyChecking=no ${{ secrets.PRODUCTION_USER }}@${{ secrets.PRODUCTION_HOST }} << 'EOF'
            cd /opt/routing-ml
            docker-compose exec backend python -c "from backend.database import backup_database; backup_database()"
            tar czf backup-$(date +%Y%m%d-%H%M%S).tar.gz models/ reports/
          EOF

      - name: Deploy to production server
        run: |
          ssh -o StrictHostKeyChecking=no ${{ secrets.PRODUCTION_USER }}@${{ secrets.PRODUCTION_HOST }} << 'EOF'
            cd /opt/routing-ml
            git pull origin main
            docker-compose pull
            docker-compose up -d
            docker-compose logs --tail=100
          EOF

      - name: Health check
        run: |
          sleep 30
          curl -f https://routing-ml.example.com/api/health || exit 1

      - name: Run smoke tests
        run: |
          # Test prediction endpoint
          curl -X POST https://routing-ml.example.com/api/v1/prediction/predict \
            -H "Content-Type: application/json" \
            -d '{"item_code": "TEST001", "quantity": 100}' || exit 1

          # Test anomaly detection
          curl https://routing-ml.example.com/api/anomaly/config || exit 1

      - name: Rollback on failure
        if: failure()
        run: |
          ssh -o StrictHostKeyChecking=no ${{ secrets.PRODUCTION_USER }}@${{ secrets.PRODUCTION_HOST }} << 'EOF'
            cd /opt/routing-ml
            docker-compose down
            git checkout HEAD~1
            docker-compose up -d
          EOF

      - name: Notify deployment success
        uses: slackapi/slack-github-action@v1.24.0
        with:
          payload: |
            {
              "text": "🚀 Production deployment successful",
              "blocks": [
                {
                  "type": "section",
                  "text": {
                    "type": "mrkdwn",
                    "text": "*Production Deployment*\n\nVersion: ${{ github.ref }}\nCommit: ${{ github.sha }}\nStatus: Success"
                  }
                }
              ]
            }
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

      - name: Notify deployment failure
        if: failure()
        uses: slackapi/slack-github-action@v1.24.0
        with:
          payload: |
            {
              "text": "❌ Production deployment failed",
              "blocks": [
                {
                  "type": "section",
                  "text": {
                    "type": "mrkdwn",
                    "text": "*Production Deployment Failed*\n\nVersion: ${{ github.ref }}\nCommit: ${{ github.sha }}\nStatus: Rollback executed"
                  }
                }
              ]
            }
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
