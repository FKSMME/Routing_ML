{
  "permissions": {
    "allow": [
      "Bash(python:*)",
      "Bash(pip install:*)",
      "Bash(unset:*)",
      "Bash(timeout 10 python -m uvicorn backend.api.training_app:app --host 127.0.0.1 --port 8001)",
      "Bash(npm run build)",
      "Bash(git add:*)",
      "Bash(git commit:*)",
      "Bash(node:*)",
      "Bash(npm --version)",
      "Bash(ipconfig)",
      "Bash(findstr:*)",
      "Bash(netsh advfirewall firewall add rule:*)",
      "Bash(start \"Backend-Training-8001\" cmd /c \"run_training_service.bat\")",
      "Bash(start \"Backend-Prediction-8002\" cmd /c \"run_prediction_service.bat\")",
      "Bash(start \"Frontend-Home-3000\" cmd /c \"run_frontend_home.bat\")",
      "Bash(start \"Frontend-Prediction-5173\" cmd /c \"run_frontend_prediction.bat\")",
      "Bash(start \"Frontend-Training-5174\" cmd /c \"run_frontend_training.bat\")",
      "Bash(start \"Backend-Main-8000\" cmd /k \"run_backend_main.bat\")",
      "Bash(start \"Frontend-Home-3000\" cmd /k \"run_frontend_home.bat\")",
      "Bash(start cmd /k \"run_frontend_home.bat\")",
      "Bash(start cmd /k \"run_frontend_prediction.bat\")",
      "Bash(.venvScriptspython.exe -c \"from backend.api.app import app; print(''Backend import OK'')\")",
      "Bash(.venv/Scripts/python.exe:*)",
      "Bash(.venv/Scripts/pip.exe show:*)",
      "Bash(.venv/Scripts/pip.exe install:*)",
      "Bash(.venvScriptspip.exe show pydantic)",
      "Bash(./.venv/Scripts/pip.exe show:*)",
      "Bash(./.venv/Scripts/python.exe:*)",
      "Bash(env SSL_CERT_FILE=\"\":*)",
      "Bash(PYTHONHTTPSVERIFY=0 ./.venv/Scripts/python.exe -m pip install:*)",
      "Bash(start cmd /k \"run_backend_main.bat\")",
      "Bash(start cmd /k \"run_frontend_training.bat\")",
      "Bash(netstat:*)",
      "Bash(npm install)",
      "Bash(timeout:*)",
      "Bash(git restore:*)",
      "Bash(git push:*)",
      "Bash(cmd /c:*)",
      "Bash(deploybuild_server_monitor_exe.bat)",
      "Bash(./.venv/Scripts/pip.exe install:*)",
      "Bash(./.venv/Scripts/pyinstaller.exe:*)",
      "Bash(time:*)",
      "Bash(git log:*)",
      "mcp__ide__getDiagnostics",
      "Bash(dir:*)",
      "Bash(then echo \".env exists\")",
      "Bash(else echo \".env does not exist\")",
      "Bash(tasklist)",
      "Bash(PYTHONHTTPSVERIFY=0 ./.venv/Scripts/python.exe -m pip uninstall:*)",
      "Bash(tasklist:*)",
      "Bash(build_server_monitor_exe.bat)",
      "Bash(deploy/build_server_monitor_exe.bat)",
      "Bash(git checkout:*)",
      "Bash(git pull:*)",
      "Bash(git merge:*)",
      "Bash(npx tsc:*)",
      "Bash(env SSL_CERT_FILE=\"\" PYTHONHTTPSVERIFY=0 .venv/Scripts/pip.exe install pyinstaller)",
      "Bash(.venv/Scripts/pyinstaller.exe:*)",
      "Bash(npm run build:win:*)",
      "Bash(git check-ignore:*)",
      "Bash(git stash:*)",
      "Bash(if [ ! -d \"dist/old\" ])",
      "Bash(then mkdir dist/old)",
      "Bash(fi)",
      "Bash(if [ -f \"dist/RoutingMLMonitor_v5.1.0.exe\" ])",
      "Bash(then mv dist/RoutingMLMonitor_v5.1.0.exe dist/old/)",
      "Bash(if [ -f \"dist/old/RoutingMLMonitor_v5.2.0.exe\" ])",
      "Bash(then mv dist/old/RoutingMLMonitor_v5.2.0.exe dist/old/RoutingMLMonitor_v5.2.0_old1.exe)",
      "Bash(sort-object:*)",
      "Bash(select-object -last 3 Name, LastWriteTime, Length)",
      "Bash(taskkill:*)",
      "Bash(curl:*)",
      "Bash(powershell:*)",
      "Bash(cat:*)",
      "Bash(where:*)",
      "Bash(openssl req:*)",
      "Bash(openssl genrsa:*)",
      "Bash(start \"\" \"C:\\Users\\syyun\\Documents\\GitHub\\Routing_ML_251014\\dist\\RoutingMLMonitor_v5.2.2.exe\")",
      "Bash(openssl x509:*)",
      "Bash(ping:*)",
      "Bash(nslookup:*)",
      "Bash(npm install:*)",
      "Bash(sed:*)",
      "Bash(./../.venv/Scripts/python.exe -m pytest tests/ -v --tb=short)",
      "Bash(npm run lint)",
      "Bash(npm run lint:*)",
      "Bash(for file in AnimatedLogo3D.tsx BackgroundControls.tsx FullScreen3DBackground.tsx Hyperspeed.tsx HyperspeedBackground.tsx ParticleBackground.tsx)",
      "Bash(do echo \"=== $file ===\")",
      "Bash(diff:*)",
      "Bash(done)",
      "Bash(npx vite build)",
      "Bash(./../.venv/Scripts/python.exe:*)"
    ],
    "deny": [],
    "ask": []
  }
}
