{
  "permissions": {
    "allow": [
      "Bash(python:*)",
      "Bash(pip install:*)",
      "Bash(unset:*)",
      "Bash(timeout 10 python -m uvicorn backend.api.training_app:app --host 127.0.0.1 --port 8001)",
      "Bash(npm run build)",
      "Bash(git add:*)",
      "Bash(git commit:*)",
      "Bash(node:*)",
      "Bash(npm --version)",
      "Bash(ipconfig)",
      "Bash(findstr:*)",
      "Bash(netsh advfirewall firewall add rule:*)",
      "Bash(start \"Backend-Training-8001\" cmd /c \"run_training_service.bat\")",
      "Bash(start \"Backend-Prediction-8002\" cmd /c \"run_prediction_service.bat\")",
      "Bash(start \"Frontend-Home-3000\" cmd /c \"run_frontend_home.bat\")",
      "Bash(start \"Frontend-Prediction-5173\" cmd /c \"run_frontend_prediction.bat\")",
      "Bash(start \"Frontend-Training-5174\" cmd /c \"run_frontend_training.bat\")",
      "Bash(start \"Backend-Main-8000\" cmd /k \"run_backend_main.bat\")",
      "Bash(start \"Frontend-Home-3000\" cmd /k \"run_frontend_home.bat\")",
      "Bash(start cmd /k \"run_frontend_home.bat\")",
      "Bash(start cmd /k \"run_frontend_prediction.bat\")",
      "Bash(.venvScriptspython.exe -c \"from backend.api.app import app; print(''Backend import OK'')\")",
      "Bash(.venv/Scripts/python.exe:*)",
      "Bash(.venv/Scripts/pip.exe show:*)",
      "Bash(.venv/Scripts/pip.exe install:*)",
      "Bash(.venvScriptspip.exe show pydantic)",
      "Bash(./.venv/Scripts/pip.exe show:*)",
      "Bash(./.venv/Scripts/python.exe:*)",
      "Bash(env SSL_CERT_FILE=\"\":*)",
      "Bash(PYTHONHTTPSVERIFY=0 ./.venv/Scripts/python.exe -m pip install:*)",
      "Bash(start cmd /k \"run_backend_main.bat\")",
      "Bash(start cmd /k \"run_frontend_training.bat\")",
      "Bash(netstat:*)",
      "Bash(npm install)",
      "Bash(timeout:*)",
      "Bash(git restore:*)",
      "Bash(git push:*)",
      "Bash(cmd /c:*)",
      "Bash(deploybuild_server_monitor_exe.bat)",
      "Bash(./.venv/Scripts/pip.exe install:*)",
      "Bash(./.venv/Scripts/pyinstaller.exe:*)",
      "Bash(time:*)",
      "Bash(git log:*)",
      "mcp__ide__getDiagnostics",
      "Bash(dir:*)",
      "Bash(then echo \".env exists\")",
      "Bash(else echo \".env does not exist\")"
    ],
    "deny": [],
    "ask": []
  }
}
