아래 내용 중간 점검 후 현재 상황 보고 할 것. 그 후 다음 sprint task 진행


--- 아래 ---
전체적인 디자인과 frontend 기능 수정 필요. C:\Routing_ML\docs\Design\samples 안에 샘플 프로젝트를 넣어 놨음. 이걸 참조할 것. 
1. 상단 메뉴바 : 기준정보 확인, 라우팅 생성, 알고리즘, 데이터 출력 설정, 학습 데이터 현황, 옵션
2. 메뉴별 디자인
1) 기준정보 확인 : access data base 의 제품 기준 정보 행렬 데이터를 볼 수 있고 검색 기능, Siemens Teamcenter Tree 구조 비슷
2) 라우팅 생성: 좌측 20%, 센터 60%, 우측 20% 구역 설정,
- 좌측 상단 : 품목명 입력란, 여러줄 입력 가능, 세로 스크롤바 적용
- 좌측 하단 : 행렬 구조, 좌측 컬럼명 (access data base 컬럼명) 에 대응하는 검색한 품목의 값들
- 센터 : 추천된 라우팅 열을 드래그앤 드롭으로 상하를 바꿀수 있도록 구성, workflow 시각화 처럼 가로 블럭을 생성, 상하 순서로 라우팅 시간 순서를 보여 주도록 구성. 가로/세로 스크롤바 기능, 여러 품목 입력시 상단 탭으로 품목 선택후 해당 데이터 볼 수 있도록 구성. 선택된 탭은 짙은색으로 유지
- 우측 상단 80%: 라우팅에 추가 구성한 선택 가능한 라우팅 개별 요소 블럭 리스트, 이 블럭들은 드래그 앤 드롭이 가능하며, 센터 라우팅 리스트의 중간에 드래그앤 드롭으로 유저가 원하는 위치에 드래그앤 드롭으로 삽입 가능하도록 구성.
- 우측 하단 20%: SAVE, INTERFACE 버튼 , SAVE는 LOCAL과 클립보드 저장 선택되도록 구성. 저장되는 파일은 CSV나 ACCESS, XML등 여러 데이터 확장명을 지원해야함. INTERFACE 버튼은 옵션에서 ERP INTERFACE 설정 ON시 활성화 될 것임.
3. 알고리즘 : 현재 trainer 함수들과 predictor 함수들의 알고리즘을 unreal engine의 블루스크린처럼 시각화하고 해당 블럭을 더블 클릭시 설정창이 팝업되며 수정시 코드가 업데이트 되는 기능을 추가.
4. 데이터 출력 설정 : 라우팅 생성 메뉴에서 필요한 여러 컬럼명과 데이터 구조를 설정할 수 있는 화면, 구성 후 저장시 라우팅 생성 후 SAVE시 해당 행렬 구조로 출력된다.
5. 학습 데이터 현황 : 현재 학습되고 로드된 머신 모델의 여러가지 정보를 시각화로 보여줌. Tensorboard 나 heatmap, T등 여러가지 시각화를 볼 수 있고, 언제 학습 되었고, 현재 피쳐별 추천 가중치는 어떻게 되며, 학습에 사용할 피쳐를 유저가 체크 박스 형태로 선택 할 수 있고, save 할 수 있는 기능을 구현.
6. 옵션 : 표준 시간 예측시 적용될 표준편차 옵션값 (z-score등) 설정, 여러가지 유사 품목을 찾을 수 있는 옵션을 제공하여 유저가 선택할 수 있도록 제공. 단 충돌되는 옵션은 같이 선택할 수 없도록 구성.
옵션에 다음 설정 추가.
1) 라우팅 생성에 필요한 컬럼명, 컬럼 종류, 라우팅 요소 추가/삭제, 제제품 정보 UI에 표시할 컬럼명과 검색된 품목의 KEY 값 추가
2) 학습데이터 컬럼과 라우팅 생성 및 출력 데이터간의 컬럼명 관계 매칭

#. 위 모든 메뉴의 설정값들은 저장이 가능해야 하며, 모든 로그는 ip주소와 시간, 작업한 이력을 남겨야 한다.

#. 디자인 참고
전체적으로 파스텔 하늘 그라이데션 기능을 넣고 마우스 오버 효과를 좀더 강조할 것.
반응형 기능 향상
메뉴는 연하게, 각 박스는 강하게, 글씨가 잘 보이도록 크기와 색상을 구성.
라우팅 워크플로우에 생성된 라우팅 순서는 그룹으로 저장 할 수 있는 기능 추가.
기준정보는 로컬이나 내부망의 다른 공용 드라이브에 access data base에 저장되어 있으니 그 파일과 테이블을 연결 할 수 있는 기능 추가

모든 화면 페이지에  react나 webGL, next.js등 여러 프레임 워크중 가장 퍼포먼스가 뛰어나고 주니어 엔지니어가 쉽게 그리고 흥미롭게 업무에 집중 할 수 있는 디자인과 효과를 구현할 것. 

모델 학습 콘솔은 별도 분리할 것. 동일 서비스에서 구동되면 안됨.
현재 학습할 데이터가 없으니 models 안에 미리 학습되어 있는 데이터를 사용할 수 있도록 해볼것.,
라우팅 예측 콘솔의 메인화면 디자인을 main\4.jpg 디자인과 같이 수정 할 것.
feautre 가중치, 예측 매트릭, 출력, 시각화, 데이터 소스 설정, workflow graph 시각화는 각기 정 tab으로 별도 구성
workflow graph 시각화는 trainer와 predictor의 각 함수를 시각화로 표현하는거야. 그러니까 현재 코드를 기반으로 블루프린터와 노드가 연결된 것을 보여줘야해. 거기서 수정하고 save를 누르면 코드가 연동되어 수정되는 기능을 구현할 것.
Tensorboard 시각화만 구현할 것으로 학습된 내용으로만 할거니까 이 솔루션에서는 웹링크를 연결할 수 있기만 하면 될 것.

위 모든 사항은 절대지령에 맞추어 PRD와 각 번호마다 상세 task list 문서를 수정, 신규 작성하고 보고 할것.

## 절대 지령 
각 단계는 승인 후에만 진행한다.
단계 착수 전 이번 단계 전체 범위를 리뷰하고 오류를 식별한다.
오류 발견 시 수정 전에 승인 재요청한다.
이전 단계 오류가 없음을 재확인한 뒤 다음 단계 승인을 요청한다.
모든 단계 작업은 백그라운드 방식으로 수행한다.
문서/웹뷰어 점검이 필요한 경우 반드시 승인 확인 후 진행한다.
다음 단계 착수 전에 이전 단계 전반을 재점검하여 미해결 오류가 없는지 확인한다.
만약 오류나 사용자의 지시로 task나 절대지령이 수정될시 취소선으로 기존 지시나 이력을 보존하고, 아래에 추가한다.
모든 웹은 codex가 테스트 실시 후 이상 없을시 보고한다.
1인 개발자와 codex가 같이 협업하며, 모든 산출물은 codex가 작업한다. 중간 중간 성능 향상이나 기능 향상을 위해 제안하는 것을 목표로한다.
이 서비스는 사내 내부망으로 운영될 예정이며, 외부 서버나 클라우드 사용은 절대 금한다.
local 호스트 서버를 통해 PoC를 1인 개발자와 같이 진행하며, 테스트 완료시 1인 개발자 PC를 서버로하여 사내망에 릴리즈한다.
코딩과 IT기술을 전혀 모르는 인원도 쉽게 PoC가 가능하도록 Docker나 기타 exe 형태로 배포할 방법을 검토하며 개발 진행한다.

모든 스프린트 태스크는 전용 스프린트 Task List를 참조하고, docs/sprint 명세에 따른 영어 로그북 + 설명적 코드 주석을 남김.


프로젝트 최상단부터 최하단 폴더까지 모든 md 문서 최상단에 프로젝트 내의 PRD와 task list 문서 최상단에 기록해 놓고 정량적으로 숫자로 보고 할 것.
절대 지표가 이미 있는 곳은 위 내용에 맞춰서 수정할 것.

--- 다음 sprint task ---


남은 주요 작업 현황

Stage 3 메뉴 고도화

알고리즘 워크플로우: Unreal 블루프린트형 노드 UI, 더블클릭 설정/코드 반영, ReactFlow 수정 필요 (frontend/src/components/workspaces/AlgorithmWorkspace.tsx 미구현).
데이터 출력 설정: 컬럼 매핑/프로필 편집 UI와 서버 연계, 저장 시 라우팅 SAVE 출력 구조 반영 (현 UI 스켈레톤 상태).
학습 데이터 현황: TensorBoard 링크, Heatmap/Feature 가중치 시각화, 체크박스 기반 피처 선택·저장 로직 미구현.
옵션 메뉴: 현재 표준편차·ERP/Access 항목만 구현; 충돌 옵션 자동 제어, 유사 품목 탐색 옵션, 컬럼 매핑 매트릭스 구성 추가 필요.
Stage 4 통합/지속성

IndexedDB + 서버 설정 이중 저장, 오프라인 복원 로직 미구현.
UI 감사 로그가 라우팅·기타 메뉴에는 적용됐으나, 전 메뉴(알고리즘/데이터 출력/학습/옵션) 액션별 로그 체계 완성 필요.
ERP 인터페이스 실연동(Access 경로 기반 ERP 호출, /api/routing/groups Save 후 인터페이스 트리거) 및 Access 파일 링크 자동 갱신.
Stage 5 QA 및 배포 준비

docs/sprint/routing_enhancement_qa.md 기반 QA 체크리스트 수행 & 결과 기록 미착수.
/api/routing/groups 통합 테스트 및 회귀 검증 진행 필요.
새 엔드포인트(/api/access/metadata, 확장된 /access/connection/test)를 포함한 문서화/Swagger 반영 미완료.
내부망 릴리즈 및 Docker/EXE PoC 배포 계획 문서 작성 미완료.
요구사항별 잔여 과제

라우팅 화면: Drag&Drop 워크플로우 노드 시각화, 우측 요소 라이브러리, 상단 다중 품목 탭 등 상세 요구 미구현.
알고리즘/학습/시각화: TensorBoard 연계, trainer/predictor 블루프린트, feature weight 탭 분할 미완료.
모델 학습 콘솔 분리, main\4.jpg 스타일링, 옵션 충돌 제어 등 디자인 지시 다수 대기.
즉시 착수 가능 작업 우선순위

Stage 3 알고리즘/데이터 출력/학습/옵션 세부 구현 플로우 설계 → 컴포넌트/스토어/API 확장.
라우팅 Drag&Drop 워크플로우(ReactFlow)와 우측 블록 라이브러리 구현으로 Stage 2 요구 보강.
Access 경로 기반 실제 ACCDB 인트로스펙션(내부경로 테스트) 및 /api/access/metadata 결과를 기준정보/라우팅 UI와 직접 연결.
Stage 4/5 문서·QA 준비: 설정 지속성 전략, 감사 로그 범위 확장, QA 체크리스트 실행 계획 수립.
필요한 항목부터 우선순위에 따라 진행 승인 요청 드리겠습니다.