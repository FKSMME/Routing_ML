@startuml Real_Prediction_Sequence
!theme plain

actor User
participant RoutingGUI
participant PredictorModule
participant DatabaseModule
participant HNSWSearch
participant TrainerModule

User -> RoutingGUI: ITEM_CD 입력 후 "🎯 Single Predict"
RoutingGUI -> RoutingGUI: threading.Thread(target=_predict_single_item)

RoutingGUI -> PredictorModule: predict_single_item_with_ml(item_cd, model_dir, top_k=10)

PredictorModule -> TrainerModule: load_optimized_model(model_dir)
TrainerModule --> PredictorModule: (searcher, encoder, scaler, feat_cols)

PredictorModule -> PredictorModule: _load_feature_weights(model_dir, n_feats)

PredictorModule -> DatabaseModule: fetch_single_item(item_cd)
DatabaseModule -> DatabaseModule: _run_query("SELECT * FROM dbo_BI_ITEM_INFO_VIEW WHERE ITEM_CD = ?")
DatabaseModule --> PredictorModule: src_df

PredictorModule -> PredictorModule: _clean_and_encode(src, feat_cols, encoder, scaler)

' 전처리 과정
PredictorModule -> PredictorModule: _safe_string(cat_cols)
PredictorModule -> PredictorModule: _safe_numeric(num_cols)
PredictorModule -> PredictorModule: encoder.transform(df_cat)
PredictorModule -> PredictorModule: scaler.transform(combined)

PredictorModule -> PredictorModule: vec = (enc_df.mean() * weights).reshape(1, -1)

PredictorModule -> PredictorModule: _choose_reference_item(vec, searcher, top_k=10)
PredictorModule -> HNSWSearch: find_similar(vec, top_k=10)

HNSWSearch -> HNSWSearch: normalize(query)
HNSWSearch -> HNSWSearch: index.search(query, 10)
HNSWSearch --> PredictorModule: (codes, scores) - 상위 10개

loop 10개 후보
    PredictorModule -> DatabaseModule: fetch_routing_for_item(candidate_code)
    DatabaseModule --> PredictorModule: routing_rows
    
    alt 라우팅 존재
        PredictorModule -> PredictorModule: chosen_code = candidate_code
        PredictorModule -> PredictorModule: break
    end
end

PredictorModule -> DatabaseModule: fetch_routing_for_item(chosen_code)
DatabaseModule --> PredictorModule: final_routing_df

PredictorModule -> PredictorModule: _align_columns(routing_df)
PredictorModule --> RoutingGUI: (routing_df, candidate_df)

RoutingGUI -> RoutingGUI: _set_results(routing_df, cand_df)
RoutingGUI -> RoutingGUI: _refresh_table(routing_table, routing_df)
RoutingGUI -> RoutingGUI: _refresh_table(candidate_table, cand_df)
RoutingGUI -> User: "예측 결과 표시"

@enduml