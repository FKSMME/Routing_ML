import { useRoutingStore } from "@store/routingStore";
import { BadgeCheck, Clock3, Download, Printer,Redo2, Save, Undo2 } from "lucide-react";
import { useCallback,useMemo } from "react";

import { AnimatedCard } from "./AnimatedCard";
import { RecommendationsTab } from "./routing/RecommendationsTab";
import { exportAllItemsToCSV } from "@lib/csvExporter";

export function TimelinePanel() {
  const timeline = useRoutingStore((state) => state.timeline);
  const loading = useRoutingStore((state) => state.loading);
  const dirty = useRoutingStore((state) => state.dirty);
  const validationErrors = useRoutingStore((state) => state.validationErrors);
  const activeGroupName = useRoutingStore((state) => state.activeGroupName);
  const lastSavedAt = useRoutingStore((state) => state.lastSavedAt);
  const productTabs = useRoutingStore((state) => state.productTabs);
  const activeProductId = useRoutingStore((state) => state.activeProductId);
  const historyCount = useRoutingStore((state) => state.history.past.length);
  const futureCount = useRoutingStore((state) => state.history.future.length);
  const undo = useRoutingStore((state) => state.undo);
  const redo = useRoutingStore((state) => state.redo);

  const canUndo = historyCount > 0;
  const canRedo = futureCount > 0;
  const totalDuration = useMemo(() => timeline.reduce((acc, step) => acc + (step.runTime ?? 0), 0), [timeline]);

  const handleSave = useCallback(() => {
    // Save routing configuration to localStorage
    try {
      const saveData = {
        productId: activeProductId,
        timeline: timeline,
        savedAt: new Date().toISOString(),
      };
      localStorage.setItem(`routing_timeline_${activeProductId}`, JSON.stringify(saveData));
      console.log("Routing configuration saved:", saveData);
      alert("라우팅 구성이 저장되었습니다.");
    } catch (error) {
      console.error("Failed to save routing:", error);
      alert("저장에 실패했습니다.");
    }
  }, [timeline, activeProductId]);

  const handleExportCSV = useCallback(() => {
    // Export all product tabs to CSV
    const items = productTabs.map((tab) => ({
      itemCode: tab.productCode,
      timeline: tab.timeline,
    }));

    if (items.length === 0 || items.every((item) => item.timeline.length === 0)) {
      alert("내보낼 라우팅 데이터가 없습니다.");
      return;
    }

    exportAllItemsToCSV(items);
    alert(`${items.length}개 품목의 CSV 파일이 다운로드되었습니다.`);
  }, [productTabs]);

  const handlePrint = useCallback(() => {
    // 출력을 위한 HTML 생성
    const printContent = `
      <!DOCTYPE html>
      <html>
        <head>
          <title>라우팅 출력 - ${activeProductId || '미지정'}</title>
          <style>
            body { font-family: Arial, sans-serif; margin: 20px; }
            h1 { color: #333; border-bottom: 2px solid #5b76d8; padding-bottom: 10px; }
            .meta { margin-bottom: 20px; color: #666; }
            table { width: 100%; border-collapse: collapse; margin-top: 20px; }
            th, td { border: 1px solid #ddd; padding: 12px; text-align: left; }
            th { background-color: #5b76d8; color: white; }
            tr:nth-child(even) { background-color: #f9f9f9; }
            .footer { margin-top: 30px; font-size: 12px; color: #999; }
          </style>
        </head>
        <body>
          <h1>라우팅 정보</h1>
          <div class="meta">
            <p><strong>품목:</strong> ${activeProductId || '미지정'}</p>
            <p><strong>그룹:</strong> ${activeGroupName || '미지정'}</p>
            <p><strong>총 공정 수:</strong> ${timeline.length}개</p>
            <p><strong>총 소요 시간:</strong> ${totalDuration.toFixed(1)}분</p>
            <p><strong>출력 일시:</strong> ${new Date().toLocaleString('ko-KR')}</p>
          </div>
          <table>
            <thead>
              <tr>
                <th>순서</th>
                <th>공정 코드</th>
                <th>공정 설명</th>
                <th>셋업 시간(분)</th>
                <th>표준 시간(분)</th>
                <th>대기 시간(분)</th>
              </tr>
            </thead>
            <tbody>
              ${timeline.map((step) => `
                <tr>
                  <td>${step.seq}</td>
                  <td>${step.processCode}</td>
                  <td>${step.description || '-'}</td>
                  <td>${step.setupTime ?? '-'}</td>
                  <td>${step.runTime ?? '-'}</td>
                  <td>${step.waitTime ?? '-'}</td>
                </tr>
              `).join('')}
            </tbody>
          </table>
          <div class="footer">
            <p>Generated by MCS Routing System</p>
          </div>
        </body>
      </html>
    `;

    const printWindow = window.open('', '_blank');
    if (printWindow) {
      printWindow.document.write(printContent);
      printWindow.document.close();
      printWindow.focus();
      setTimeout(() => {
        printWindow.print();
      }, 250);
    }
  }, [timeline, activeProductId, activeGroupName, totalDuration]);

  return (
    <AnimatedCard enableHover className="panel-card interactive-card routing-timeline">
      <header className="timeline-header">
        <div>
          <h2 className="panel-title">Routing Canvas</h2>
          <p className="panel-subtitle">Adjust recommended order and save as groups.</p>
        </div>
        <div className="timeline-actions">
          <button type="button" className="timeline-action" onClick={undo} disabled={!canUndo}>
            <Undo2 size={16} />
            <span>Undo</span>
          </button>
          <button type="button" className="timeline-action" onClick={redo} disabled={!canRedo}>
            <Redo2 size={16} />
            <span>Redo</span>
          </button>
          <button type="button" className="timeline-action" onClick={handleSave} disabled={!dirty || timeline.length === 0}>
            <Save size={16} />
            <span>Save</span>
          </button>
          <button type="button" className="timeline-action" onClick={handleExportCSV} disabled={productTabs.length === 0}>
            <Download size={16} />
            <span>전체 출력</span>
          </button>
          <button type="button" className="timeline-action" onClick={handlePrint} disabled={timeline.length === 0}>
            <Printer size={16} />
            <span>Print</span>
          </button>
        </div>
      </header>

      <div className="timeline-status">
        <div className={`timeline-status__indicator ${dirty ? "is-dirty" : "is-clean"}`}>
          <span className="timeline-dot" />
          <span>{dirty ? "Unsaved changes" : "Saved"}</span>
        </div>
        <div className="timeline-status__meta">
          <span className="timeline-meta-item">
            <Clock3 size={14} /> Total runtime {totalDuration.toFixed(1)} 분
          </span>
          {activeGroupName ? (
            <span className="timeline-meta-item">
              <BadgeCheck size={14} /> Active group: {activeGroupName}
            </span>
          ) : null}
          {lastSavedAt ? <span className="timeline-meta-item">Last saved {new Date(lastSavedAt).toLocaleString()}</span> : null}
        </div>
      </div>

      {validationErrors.length > 0 ? (
        <div className="timeline-errors">
          <h3>Validation failed</h3>
          <ul>
            {validationErrors.map((error) => (
              <li key={error}>{error}</li>
            ))}
          </ul>
        </div>
      ) : null}

      {loading && productTabs.length === 0 ? (
        <div className="timeline-placeholder">Loading timeline...</div>
      ) : productTabs.length === 0 ? (
        <div className="timeline-placeholder">Search items to generate routing.</div>
      ) : (
        <RecommendationsTab initialView="recommendations" />
      )}

      {activeProductId ? <p className="timeline-footer">Active item: {activeProductId}</p> : null}
    </AnimatedCard>
  );
}
